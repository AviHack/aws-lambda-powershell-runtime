<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.ECS</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet">
            <summary>
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource aren't specified in the request parameters, they aren't
            changed. When a resource is deleted, the tags that are associated with that resource
            are deleted as well.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the resource to add tags to. Currently, the supported
            resources are Amazon ECS capacity providers, tasks, services, task definitions, clusters,
            and container instances.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>The tags to add to the resource. A tag is an array of key-value pairs.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.AddECSResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet">
            <summary>
            Lists the account settings for a specified principal.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.EffectiveSetting">
            <summary>
            <para>
            <para>Determines whether to return the effective settings. If <code>true</code>, the account
            settings for the root user or the default setting for the <code>principalArn</code>
            are returned. If <code>false</code>, the account settings for the <code>principalArn</code>
            are returned if they're set. Otherwise, no account settings are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.Name">
            <summary>
            <para>
            <para>The name of the account setting you want to list the settings for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.PrincipalArn">
            <summary>
            <para>
            <para>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If
            this field is omitted, the account settings are listed only for the authenticated
            user.</para><note><para>Federated users assume the account setting of the root user and can't have explicit
            account settings set for them.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.Value">
            <summary>
            <para>
            <para>The value of the account settings to filter results with. You must also specify an
            account setting name to use this parameter.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of account setting results returned by <code>ListAccountSettings</code>
            in paginated output. When this parameter is used, <code>ListAccountSettings</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>ListAccountSettings</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 10. If this parameter isn't used, then <code>ListAccountSettings</code>
            returns up to 10 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code>
            request indicating that more results are available to fulfill the request and further
            calls will be needed. If <code>maxResults</code> was provided, it's possible the number
            of results to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Settings'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListAccountSettingsResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListAccountSettingsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAccountSettingCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet">
            <summary>
            Lists the attributes for Amazon ECS resources within a specified target type and cluster.
            When you specify a target type and cluster, <code>ListAttributes</code> returns a
            list of attribute objects, one for each attribute on each resource. You can filter
            the list of results to a single attribute name to only return results that have that
            name. You can also filter the results by attribute name and value. You can do this,
            for example, to see which container instances in a cluster are running a Linux AMI
            (<code>ecs.os-type=linux</code>).<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.AttributeName">
            <summary>
            <para>
            <para>The name of the attribute to filter the results with. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.AttributeValue">
            <summary>
            <para>
            <para>The value of the attribute to filter results with. You must also specify an attribute
            name to use this parameter.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to list attributes.
            If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.TargetType">
            <summary>
            <para>
            <para>The type of the target to list attributes with.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of cluster results that <code>ListAttributes</code> returned in
            paginated output. When this parameter is used, <code>ListAttributes</code> only returns
            <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>ListAttributes</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter isn't used, then <code>ListAttributes</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListAttributes</code> request
            indicating that more results are available to fulfill the request and further calls
            are needed. If <code>maxResults</code> was provided, it's possible the number of results
            to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Attributes'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListAttributesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListAttributesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSAttributeListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet">
            <summary>
            Describes one or more of your capacity providers.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.CapacityProvider">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of one or more capacity providers.
            Up to <code>100</code> capacity providers can be described in an action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.Include">
            <summary>
            <para>
            <para>Specifies whether or not you want to see the resource tags for the capacity provider.
            If <code>TAGS</code> is specified, the tags are included in the response. If this
            field is omitted, tags aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of account setting results returned by <code>DescribeCapacityProviders</code>
            in paginated output. When this parameter is used, <code>DescribeCapacityProviders</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeCapacityProviders</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 10. If this parameter is not used, then <code>DescribeCapacityProviders</code>
            returns up to 10 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a previous paginated <code>DescribeCapacityProviders</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CapacityProviders'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeCapacityProvidersResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeCapacityProvidersResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSCapacityProviderCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterDetailCmdlet">
            <summary>
            Describes one or more of your clusters.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterDetailCmdlet.Cluster">
            <summary>
            <para>
            <para>A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN) entries.
            If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterDetailCmdlet.Include">
            <summary>
            <para>
            <para>Determines whether to include additional information about the clusters in the response.
            If this field is omitted, this information isn't included.</para><para>If <code>ATTACHMENTS</code> is specified, the attachments for the container instances
            or tasks within the cluster are included.</para><para>If <code>SETTINGS</code> is specified, the settings for the cluster are included.</para><para>If <code>CONFIGURATIONS</code> is specified, the configuration for the cluster is
            included.</para><para>If <code>STATISTICS</code> is specified, the task and service count is included, separated
            by launch type.</para><para>If <code>TAGS</code> is specified, the metadata tags associated with the cluster are
            included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeClustersResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeClustersResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterListCmdlet">
            <summary>
            Returns a list of existing clusters.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of cluster results that <code>ListClusters</code> returned in paginated
            output. When this parameter is used, <code>ListClusters</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListClusters</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter isn't used, then <code>ListClusters</code> returns up
            to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListClusters</code> request
            indicating that more results are available to fulfill the request and further calls
            are needed. If <code>maxResults</code> was provided, it's possible the number of results
            to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ClusterArns'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListClustersResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListClustersResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet">
            <summary>
            Returns a list of services. You can filter the results by cluster, launch type, and
            scheduling strategy.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering
            the <code>ListServices</code> results. If you do not specify a cluster, the default
            cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.LaunchType">
            <summary>
            <para>
            <para>The launch type to use when filtering the <code>ListServices</code> results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.SchedulingStrategy">
            <summary>
            <para>
            <para>The scheduling strategy to use when filtering the <code>ListServices</code> results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of service results that <code>ListServices</code> returned in paginated
            output. When this parameter is used, <code>ListServices</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListServices</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter isn't used, then <code>ListServices</code> returns up
            to 10 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListServices</code> request
            indicating that more results are available to fulfill the request and further calls
            will be needed. If <code>maxResults</code> was provided, it is possible the number
            of results to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ServiceArns'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListServicesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListServicesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSClusterServiceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet">
            <summary>
            Describes one or more container instances. Returns metadata about each container instance
            requested.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container
            instances to describe. If you do not specify a cluster, the default cluster is assumed.
            This parameter is required if the container instance or container instances you are
            describing were launched in any cluster other than the default cluster.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>A list of up to 100 container instance IDs or full Amazon Resource Name (ARN) entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet.Include">
            <summary>
            <para>
            <para>Specifies whether you want to see the resource tags for the container instance. If
            <code>TAGS</code> is specified, the tags are included in the response. If <code>CONTAINER_INSTANCE_HEALTH</code>
            is specified, the container instance health is included in the response. If this field
            is omitted, tags and container instance health status aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeContainerInstancesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeContainerInstancesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet">
            <summary>
            Returns a list of container instances in a specified cluster. You can filter the results
            of a <code>ListContainerInstances</code> operation with cluster query language statements
            inside the <code>filter</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html">Cluster
            Query Language</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container
            instances to list. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.Filter">
            <summary>
            <para>
            <para>You can filter the results of a <code>ListContainerInstances</code> operation with
            cluster query language statements. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html">Cluster
            Query Language</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.Status">
            <summary>
            <para>
            <para>Filters the container instances by status. For example, if you specify the <code>DRAINING</code>
            status, the results include only container instances that have been set to <code>DRAINING</code>
            using <a>UpdateContainerInstancesState</a>. If you don't specify this parameter, the
            default is to include container instances set to all states other than <code>INACTIVE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of container instance results that <code>ListContainerInstances</code>
            returned in paginated output. When this parameter is used, <code>ListContainerInstances</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>ListContainerInstances</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter isn't used, then <code>ListContainerInstances</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListContainerInstances</code>
            request indicating that more results are available to fulfill the request and further
            calls are needed. If <code>maxResults</code> was provided, it's possible the number
            of results to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ContainerInstanceArns'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListContainerInstancesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListContainerInstancesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSContainerInstanceListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet">
            <summary>
            Describes the specified services running in your cluster.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN)the cluster that hosts the service
            to describe. If you do not specify a cluster, the default cluster is assumed. This
            parameter is required if the service or services you are describing were launched
            in any cluster other than the default cluster.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet.Include">
            <summary>
            <para>
            <para>Determines whether you want to see the resource tags for the service. If <code>TAGS</code>
            is specified, the tags are included in the response. If this field is omitted, tags
            aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet.Service">
            <summary>
            <para>
            <para>A list of services to describe. You may specify up to 10 services to describe in a
            single operation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeServicesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeServicesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSServiceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTagsForResourceCmdlet">
            <summary>
            List the tags for an Amazon ECS resource.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTagsForResourceCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) that identifies the resource to list the tags for.
            Currently, the supported resources are Amazon ECS tasks, services, task definitions,
            clusters, and container instances.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTagsForResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Tags'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListTagsForResourceResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListTagsForResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTagsForResourceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionDetailCmdlet">
            <summary>
            Describes a task definition. You can specify a <code>family</code> and <code>revision</code>
            to find information about a specific task definition, or you can simply specify the
            family to find the latest <code>ACTIVE</code> revision in that family.
            
             <note><para>
            You can only describe <code>INACTIVE</code> task definitions while an active task
            or service references them.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionDetailCmdlet.Include">
            <summary>
            <para>
            <para>Determines whether to see the resource tags for the task definition. If <code>TAGS</code>
            is specified, the tags are included in the response. If this field is omitted, tags
            aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionDetailCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> for the latest <code>ACTIVE</code> revision, <code>family</code>
            and <code>revision</code> (<code>family:revision</code>) for a specific revision in
            the family, or full Amazon Resource Name (ARN) of the task definition to describe.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeTaskDefinitionResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeTaskDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TaskDefinition parameter.
            The -PassThru parameter is deprecated, use -Select '^TaskDefinition' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet">
            <summary>
            Returns a list of task definition families that are registered to your account. This
            list includes task definition families that no longer have any <code>ACTIVE</code>
            task definition revisions.
            
             
            <para>
            You can filter out task definition families that don't contain any <code>ACTIVE</code>
            task definition revisions by setting the <code>status</code> parameter to <code>ACTIVE</code>.
            You can also filter the results with the <code>familyPrefix</code> parameter.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.FamilyPrefix">
            <summary>
            <para>
            <para>The <code>familyPrefix</code> is a string that's used to filter the results of <code>ListTaskDefinitionFamilies</code>.
            If you specify a <code>familyPrefix</code>, only task definition family names that
            begin with the <code>familyPrefix</code> string are returned.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.Status">
            <summary>
            <para>
            <para>The task definition family status to filter the <code>ListTaskDefinitionFamilies</code>
            results with. By default, both <code>ACTIVE</code> and <code>INACTIVE</code> task
            definition families are listed. If this parameter is set to <code>ACTIVE</code>, only
            task definition families that have an <code>ACTIVE</code> task definition revision
            are returned. If this parameter is set to <code>INACTIVE</code>, only task definition
            families that do not have any <code>ACTIVE</code> task definition revisions are returned.
            If you paginate the resulting output, be sure to keep the <code>status</code> value
            constant in each subsequent request.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of task definition family results that <code>ListTaskDefinitionFamilies</code>
            returned in paginated output. When this parameter is used, <code>ListTaskDefinitions</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>ListTaskDefinitionFamilies</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter isn't used, then <code>ListTaskDefinitionFamilies</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListTaskDefinitionFamilies</code>
            request indicating that more results are available to fulfill the request and further
            calls will be needed. If <code>maxResults</code> was provided, it is possible the
            number of results to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Families'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListTaskDefinitionFamiliesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListTaskDefinitionFamiliesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionFamilyListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet">
            <summary>
            Returns a list of task definitions that are registered to your account. You can filter
            the results by family name with the <code>familyPrefix</code> parameter or by status
            with the <code>status</code> parameter.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.FamilyPrefix">
            <summary>
            <para>
            <para>The full family name to filter the <code>ListTaskDefinitions</code> results with.
            Specifying a <code>familyPrefix</code> limits the listed task definitions to task
            definition revisions that belong to that family.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.Sort">
            <summary>
            <para>
            <para>The order to sort the results in. Valid values are <code>ASC</code> and <code>DESC</code>.
            By default, (<code>ASC</code>) task definitions are listed lexicographically by family
            name and in ascending numerical order by revision so that the newest task definitions
            in a family are listed last. Setting this parameter to <code>DESC</code> reverses
            the sort order on family name and revision. This is so that the newest task definitions
            in a family are listed first.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.Status">
            <summary>
            <para>
            <para>The task definition status to filter the <code>ListTaskDefinitions</code> results
            with. By default, only <code>ACTIVE</code> task definitions are listed. By setting
            this parameter to <code>INACTIVE</code>, you can view task definitions that are <code>INACTIVE</code>
            as long as an active task or service still references them. If you paginate the resulting
            output, be sure to keep the <code>status</code> value constant in each subsequent
            request.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of task definition results that <code>ListTaskDefinitions</code>
            returned in paginated output. When this parameter is used, <code>ListTaskDefinitions</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>ListTaskDefinitions</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 100. If this parameter isn't used, then <code>ListTaskDefinitions</code>
            returns up to 100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListTaskDefinitions</code>
            request indicating that more results are available to fulfill the request and further
            calls will be needed. If <code>maxResults</code> was provided, it is possible the
            number of results to be fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskDefinitionArns'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListTaskDefinitionsResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListTaskDefinitionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDefinitionListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet">
            <summary>
            Describes a specified task or tasks.
            
             
            <para>
            Currently, stopped tasks appear in the returned results for at least one hour.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task
            or tasks to describe. If you do not specify a cluster, the default cluster is assumed.
            This parameter is required if the task or tasks you are describing were launched in
            any cluster other than the default cluster.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet.Include">
            <summary>
            <para>
            <para>Specifies whether you want to see the resource tags for the task. If <code>TAGS</code>
            is specified, the tags are included in the response. If this field is omitted, tags
            aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet.Task">
            <summary>
            <para>
            <para>A list of up to 100 task IDs or full ARN entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeTasksResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeTasksResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet">
            <summary>
            Returns a list of tasks. You can filter the results by cluster, task definition family,
            container instance, launch type, what IAM principal started the task, or by the desired
            status of the task.
            
             
            <para>
            Recently stopped tasks might appear in the returned results. Currently, stopped tasks
            appear in the returned results for at least one hour.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering
            the <code>ListTasks</code> results. If you do not specify a cluster, the default cluster
            is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>The container instance ID or full ARN of the container instance to use when filtering
            the <code>ListTasks</code> results. Specifying a <code>containerInstance</code> limits
            the results to tasks that belong to that container instance.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.DesiredStatus">
            <summary>
            <para>
            <para>The task desired status to use when filtering the <code>ListTasks</code> results.
            Specifying a <code>desiredStatus</code> of <code>STOPPED</code> limits the results
            to tasks that Amazon ECS has set the desired status to <code>STOPPED</code>. This
            can be useful for debugging tasks that aren't starting properly or have died or finished.
            The default status filter is <code>RUNNING</code>, which shows tasks that Amazon ECS
            has set the desired status to <code>RUNNING</code>.</para><note><para>Although you can filter results based on a desired status of <code>PENDING</code>,
            this doesn't return any results. Amazon ECS never sets the desired status of a task
            to that value (only a task's <code>lastStatus</code> may have a value of <code>PENDING</code>).</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.Family">
            <summary>
            <para>
            <para>The name of the task definition family to use when filtering the <code>ListTasks</code>
            results. Specifying a <code>family</code> limits the results to tasks that belong
            to that family.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.LaunchType">
            <summary>
            <para>
            <para>The launch type to use when filtering the <code>ListTasks</code> results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.ServiceName">
            <summary>
            <para>
            <para>The name of the service to use when filtering the <code>ListTasks</code> results.
            Specifying a <code>serviceName</code> limits the results to tasks that belong to that
            service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.StartedBy">
            <summary>
            <para>
            <para>The <code>startedBy</code> value to filter the task results with. Specifying a <code>startedBy</code>
            value limits the results to tasks that were started with that value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of task results that <code>ListTasks</code> returned in paginated
            output. When this parameter is used, <code>ListTasks</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListTasks</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 100. If this parameter isn't used, then <code>ListTasks</code> returns up to
            100 results and a <code>nextToken</code> value if applicable.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> value returned from a <code>ListTasks</code> request indicating
            that more results are available to fulfill the request and further calls will be needed.
            If <code>maxResults</code> was provided, it's possible the number of results to be
            fewer than <code>maxResults</code>.</para><note><para>This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.</para></note>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskArns'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ListTasksResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ListTasksResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet">
            <summary>
            Describes the task sets in the specified cluster and service. This is used when a
            service uses the <code>EXTERNAL</code> deployment controller type. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            that the task sets exist in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.Include">
            <summary>
            <para>
            <para>Specifies whether to see the resource tags for the task set. If <code>TAGS</code>
            is specified, the tags are included in the response. If this field is omitted, tags
            aren't included in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.Service">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the service that the task sets
            exist in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.TaskSet">
            <summary>
            <para>
            <para>The ID or full Amazon Resource Name (ARN) of task sets to describe.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DescribeTaskSetsResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DescribeTaskSetsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.GetECSTaskSetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet">
            <summary>
            Runs a command remotely on a container within a task.
            
             
            <para>
            If you use a condition key in your IAM policy to refine the conditions for the policy
            statement, for example limit the actions to a specific cluster, you recevie an <code>AccessDeniedException</code>
            when there is a mismatch between the condition key value and the corresponding parameter
            value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Cluster">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) or short name of the cluster the task is running in.
            If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Command">
            <summary>
            <para>
            <para>The command to run on the container.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Container">
            <summary>
            <para>
            <para>The name of the container to execute the command on. A container name only needs to
            be specified for tasks containing multiple containers.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Interactive">
            <summary>
            <para>
            <para>Use this flag to run your command in interactive mode.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Task">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) or ID of the task the container is part of.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.ExecuteCommandResponse).
            Specifying the name of a property of type Amazon.ECS.Model.ExecuteCommandResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.InvokeECSCommandCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet">
            <summary>
            Creates a new capacity provider. Capacity providers are associated with an Amazon
            ECS cluster and are used in capacity provider strategies to facilitate cluster auto
            scaling.
            
             
            <para>
            Only capacity providers that use an Auto Scaling group can be created. Amazon ECS
            tasks on Fargate use the <code>FARGATE</code> and <code>FARGATE_SPOT</code> capacity
            providers. These providers are available to all accounts in the Amazon Web Services
            Regions that Fargate supports.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.AutoScalingGroupProvider_AutoScalingGroupArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) that identifies the Auto Scaling group.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.ManagedScaling_InstanceWarmupPeriod">
            <summary>
            <para>
            <para>The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute
            to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default
            value of <code>300</code> seconds is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.AutoScalingGroupProvider_ManagedTerminationProtection">
            <summary>
            <para>
            <para>The managed termination protection setting to use for the Auto Scaling group capacity
            provider. This determines whether the Auto Scaling group has managed termination protection.
            The default is disabled.</para><important><para>When using managed termination protection, managed scaling must also be used otherwise
            managed termination protection doesn't work.</para></important><para>When managed termination protection is enabled, Amazon ECS prevents the Amazon EC2
            instances in an Auto Scaling group that contain tasks from being terminated during
            a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group
            must have instance protection from scale-in actions enabled as well. For more information,
            see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance
            Protection</a> in the <i>Auto Scaling User Guide</i>.</para><para>When managed termination protection is disabled, your Amazon EC2 instances aren't
            protected from termination when the Auto Scaling group scales in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.ManagedScaling_MaximumScalingStepSize">
            <summary>
            <para>
            <para>The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time.
            The scale in process is not affected by this parameter. If this parameter is omitted,
            the default value of <code>10000</code> is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.ManagedScaling_MinimumScalingStepSize">
            <summary>
            <para>
            <para>The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time.
            The scale in process is not affected by this parameter If this parameter is omitted,
            the default value of <code>1</code> is used.</para><para>When additional capacity is required, Amazon ECS will scale up the minimum scaling
            step size even if the actual demand is less than the minimum scaling step size.</para><para>If you use a capacity provider with an Auto Scaling group configured with more than
            one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the
            exact minimum scaling step size value and will ignore both the maximum scaling step
            size as well as the capacity demand.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.Name">
            <summary>
            <para>
            <para>The name of the capacity provider. Up to 255 characters are allowed. They include
            letters (both upper and lowercase letters), numbers, underscores (_), and hyphens
            (-). The name can't be prefixed with "<code>aws</code>", "<code>ecs</code>", or "<code>fargate</code>".</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.ManagedScaling_Status">
            <summary>
            <para>
            <para>Determines whether to use managed scaling for the capacity provider.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the capacity provider to categorize and organize them
            more conveniently. Each tag consists of a key and an optional value. You define both
            of them.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.ManagedScaling_TargetCapacity">
            <summary>
            <para>
            <para>The target capacity value for the capacity provider. The specified value must be greater
            than <code>0</code> and less than or equal to <code>100</code>. A value of <code>100</code>
            results in the Amazon EC2 instances in your Auto Scaling group being completely used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CapacityProvider'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.CreateCapacityProviderResponse).
            Specifying the name of a property of type Amazon.ECS.Model.CreateCapacityProviderResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSCapacityProviderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet">
            <summary>
            Creates a new Amazon ECS cluster. By default, your account receives a <code>default</code>
            cluster when you launch your first container instance. However, you can create your
            own cluster with a unique name with the <code>CreateCluster</code> action.
            
             <note><para>
            When you call the <a>CreateCluster</a> API operation, Amazon ECS attempts to create
            the Amazon ECS service-linked role for your account. This is so that it can manage
            required resources in other Amazon Web Services services on your behalf. However,
            if the IAM user that makes the call doesn't have permissions to create the service-linked
            role, it isn't created. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using
            service-linked roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.CapacityProvider">
            <summary>
            <para>
            <para>The short name of one or more capacity providers to associate with the cluster. A
            capacity provider must be associated with a cluster before it can be included as part
            of the default capacity provider strategy of the cluster or used in a capacity provider
            strategy when calling the <a>CreateService</a> or <a>RunTask</a> actions.</para><para>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider
            must be created but not associated with another cluster. New Auto Scaling group capacity
            providers can be created with the <a>CreateCapacityProvider</a> API operation.</para><para>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code>
            capacity providers. The Fargate capacity providers are available to all accounts and
            only need to be associated with a cluster to be used.</para><para>The <a>PutClusterCapacityProviders</a> API operation is used to update the list of
            available capacity providers for a cluster after the cluster is created.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.LogConfiguration_CloudWatchEncryptionEnabled">
            <summary>
            <para>
            <para>Determines whether to use encryption on the CloudWatch logs. If not specified, encryption
            will be disabled.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.LogConfiguration_CloudWatchLogGroupName">
            <summary>
            <para>
            <para>The name of the CloudWatch log group to send logs to.</para><note><para>The CloudWatch log group must already be created.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.ClusterName">
            <summary>
            <para>
            <para>The name of your cluster. If you don't specify a name for your cluster, you create
            a cluster that's named <code>default</code>. Up to 255 letters (uppercase and lowercase),
            numbers, underscores, and hyphens are allowed. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.DefaultCapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to set as the default for the cluster. After a default
            capacity provider strategy is set for a cluster, when you call the <a>RunTask</a>
            or <a>CreateService</a> APIs with no capacity provider strategy or launch type specified,
            the default capacity provider strategy for the cluster is used.</para><para>If a default capacity provider strategy isn't defined for a cluster when it was created,
            it can be defined later with the <a>PutClusterCapacityProviders</a> API operation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.ExecuteCommandConfiguration_KmsKeyId">
            <summary>
            <para>
            <para>Specify an Key Management Service key ID to encrypt the data between the local client
            and the container.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.ExecuteCommandConfiguration_Logging">
            <summary>
            <para>
            <para>The log setting to use for redirecting logs for your execute command results. The
            following log settings are available.</para><ul><li><para><code>NONE</code>: The execute command session is not logged.</para></li><li><para><code>DEFAULT</code>: The <code>awslogs</code> configuration in the task definition
            is used. If no logging parameter is specified, it defaults to this value. If no <code>awslogs</code>
            log driver is configured in the task definition, the output won't be logged.</para></li><li><para><code>OVERRIDE</code>: Specify the logging details as a part of <code>logConfiguration</code>.
            If the <code>OVERRIDE</code> logging option is specified, the <code>logConfiguration</code>
            is required.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.LogConfiguration_S3BucketName">
            <summary>
            <para>
            <para>The name of the S3 bucket to send logs to.</para><note><para>The S3 bucket must already be created.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.LogConfiguration_S3EncryptionEnabled">
            <summary>
            <para>
            <para>Determines whether to use encryption on the S3 logs. If not specified, encryption
            is not used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.LogConfiguration_S3KeyPrefix">
            <summary>
            <para>
            <para>An optional folder in the S3 bucket to place logs in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.Setting">
            <summary>
            <para>
            <para>The setting to use when creating a cluster. This parameter is used to turn on CloudWatch
            Container Insights for a cluster. If this value is specified, it overrides the <code>containerInsights</code>
            value set with <a>PutAccountSetting</a> or <a>PutAccountSettingDefault</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the cluster to help you categorize and organize them.
            Each tag consists of a key and an optional value. You define both.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Cluster'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.CreateClusterResponse).
            Specifying the name of a property of type Amazon.ECS.Model.CreateClusterResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ClusterName parameter.
            The -PassThru parameter is deprecated, use -Select '^ClusterName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSClusterCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet">
            <summary>
            Runs and maintains your desired number of tasks from a specified task definition.
            If the number of tasks running in a service drops below the <code>desiredCount</code>,
            Amazon ECS runs another copy of the task in the specified cluster. To update an existing
            service, see the <a>UpdateService</a> action.
            
             
            <para>
            In addition to maintaining the desired count of tasks in your service, you can optionally
            run your service behind one or more load balancers. The load balancers distribute
            traffic across the tasks that are associated with the service. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html">Service
            load balancing</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><para>
            Tasks for services that don't use a load balancer are considered healthy if they're
            in the <code>RUNNING</code> state. Tasks for services that use a load balancer are
            considered healthy if they're in the <code>RUNNING</code> state and are reported as
            healthy by the load balancer.
            </para><para>
            There are two service scheduler strategies available:
            </para><ul><li><para><code>REPLICA</code> - The replica scheduling strategy places and maintains your
            desired number of tasks across your cluster. By default, the service scheduler spreads
            tasks across Availability Zones. You can use task placement strategies and constraints
            to customize task placement decisions. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Service
            scheduler concepts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para></li><li><para><code>DAEMON</code> - The daemon scheduling strategy deploys exactly one task on
            each active container instance that meets all of the task placement constraints that
            you specify in your cluster. The service scheduler also evaluates the task placement
            constraints for running tasks. It also stops tasks that don't meet the placement constraints.
            When using this strategy, you don't need to specify a desired number of tasks, a task
            placement strategy, or use Service Auto Scaling policies. For more information, see
            <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Service
            scheduler concepts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para></li></ul><para>
            You can optionally specify a deployment configuration for your service. The deployment
            is initiated by changing properties. For example, the deployment might be initiated
            by the task definition or by your desired count of a service. This is done with an
            <a>UpdateService</a> operation. The default value for a replica service for <code>minimumHealthyPercent</code>
            is 100%. The default value for a daemon service for <code>minimumHealthyPercent</code>
            is 0%.
            </para><para>
            If a service uses the <code>ECS</code> deployment controller, the minimum healthy
            percent represents a lower limit on the number of tasks in a service that must remain
            in the <code>RUNNING</code> state during a deployment. Specifically, it represents
            it as a percentage of your desired number of tasks (rounded up to the nearest integer).
            This happens when any of your container instances are in the <code>DRAINING</code>
            state if the service contains tasks using the EC2 launch type. Using this parameter,
            you can deploy without using additional cluster capacity. For example, if you set
            your service to have desired number of four tasks and a minimum healthy percent of
            50%, the scheduler might stop two existing tasks to free up cluster capacity before
            starting two new tasks. If they're in the <code>RUNNING</code> state, tasks for services
            that don't use a load balancer are considered healthy . If they're in the <code>RUNNING</code>
            state and reported as healthy by the load balancer, tasks for services that <i>do</i>
            use a load balancer are considered healthy . The default value for minimum healthy
            percent is 100%.
            </para><para>
            If a service uses the <code>ECS</code> deployment controller, the <b>maximum percent</b>
            parameter represents an upper limit on the number of tasks in a service that are allowed
            in the <code>RUNNING</code> or <code>PENDING</code> state during a deployment. Specifically,
            it represents it as a percentage of the desired number of tasks (rounded down to the
            nearest integer). This happens when any of your container instances are in the <code>DRAINING</code>
            state if the service contains tasks using the EC2 launch type. Using this parameter,
            you can define the deployment batch size. For example, if your service has a desired
            number of four tasks and a maximum percent value of 200%, the scheduler may start
            four new tasks before stopping the four older tasks (provided that the cluster resources
            required to do this are available). The default value for maximum percent is 200%.
            </para><para>
            If a service uses either the <code>CODE_DEPLOY</code> or <code>EXTERNAL</code> deployment
            controller types and tasks that use the EC2 launch type, the <b>minimum healthy percent</b>
            and <b>maximum percent</b> values are used only to define the lower and upper limit
            on the number of the tasks in the service that remain in the <code>RUNNING</code>
            state. This is while the container instances are in the <code>DRAINING</code> state.
            If the tasks in the service use the Fargate launch type, the minimum healthy percent
            and maximum percent values aren't used. This is the case even if they're currently
            visible when describing your service.
            </para><para>
            When creating a service that uses the <code>EXTERNAL</code> deployment controller,
            you can specify only parameters that aren't controlled at the task set level. The
            only required parameter is the service name. You control your services using the <a>CreateTaskSet</a>
            operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS deployment types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><para>
            When the service scheduler launches new tasks, it determines task placement. For information
            about task placement and task placement strategies, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement.html">Amazon
            ECS task placement</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.AwsvpcConfiguration_AssignPublicIp">
            <summary>
            <para>
            <para>Whether the task's elastic network interface receives a public IP address. The default
            value is <code>DISABLED</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.CapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to use for the service.</para><para>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
            parameter must be omitted. If no <code>capacityProviderStrategy</code> or <code>launchType</code>
            is specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is
            used.</para><para>A capacity provider strategy may contain a maximum of 6 capacity providers.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that you run your
            service on. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DesiredCount">
            <summary>
            <para>
            <para>The number of instantiations of the specified task definition to place and keep running
            on your cluster.</para><para>This is required if <code>schedulingStrategy</code> is <code>REPLICA</code> or isn't
            specified. If <code>schedulingStrategy</code> is <code>DAEMON</code> then this isn't
            required.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DeploymentCircuitBreaker_Enable">
            <summary>
            <para>
            <para>Determines whether to use the deployment circuit breaker logic for the service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.EnableECSManagedTag">
            <summary>
            <para>
            <para>Specifies whether to turn on Amazon ECS managed tags for the tasks within the service.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging
            your Amazon ECS resources</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.EnableExecuteCommand">
            <summary>
            <para>
            <para>Determines whether the execute command functionality is enabled for the service. If
            <code>true</code>, this enables execute command functionality on all containers in
            the service tasks.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.HealthCheckGracePeriodSecond">
            <summary>
            <para>
            <para>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
            Elastic Load Balancing target health checks after a task has first started. This is
            only used when your service is configured to use a load balancer. If your service
            has a load balancer defined and you don't specify a health check grace period value,
            the default value of <code>0</code> is used.</para><para>If you do not use an Elastic Load Balancing, we recomend that you use the <code>startPeriod</code>
            in the task definition healtch check parameters. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">Health
            check</a>.</para><para>If your service's tasks take a while to start and respond to Elastic Load Balancing
            health checks, you can specify a health check grace period of up to 2,147,483,647
            seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores
            health check status. This grace period can prevent the service scheduler from marking
            tasks as unhealthy and stopping them before they have time to come up.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.LaunchType">
            <summary>
            <para>
            <para>The infrastructure that you run your service on. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon
            ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><para>The <code>FARGATE</code> launch type runs your tasks on Fargate On-Demand infrastructure.</para><note><para>Fargate Spot infrastructure is available for use but a capacity provider strategy
            must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html">Fargate
            capacity providers</a> in the <i>Amazon ECS User Guide for Fargate</i>.</para></note><para>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered
            to your cluster.</para><para>The <code>EXTERNAL</code> launch type runs your tasks on your on-premises server or
            virtual machine (VM) capacity registered to your cluster.</para><para>A service can use either a launch type or a capacity provider strategy. If a <code>launchType</code>
            is specified, the <code>capacityProviderStrategy</code> parameter must be omitted.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.LoadBalancer">
            <summary>
            <para>
            <para>A load balancer object representing the load balancers to use with your service. For
            more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html">Service
            load balancing</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><para>If the service uses the rolling update (<code>ECS</code>) deployment controller and
            using either an Application Load Balancer or Network Load Balancer, you must specify
            one or more target group ARNs to attach to the service. The service-linked role is
            required for services that use multiple target groups. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using
            service-linked roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>.</para><para>If the service uses the <code>CODE_DEPLOY</code> deployment controller, the service
            is required to use either an Application Load Balancer or Network Load Balancer. When
            creating an CodeDeploy deployment group, you specify two target groups (referred to
            as a <code>targetGroupPair</code>). During a deployment, CodeDeploy determines which
            task set in your service has the status <code>PRIMARY</code>, and it associates one
            target group with it. Then, it also associates the other target group with the replacement
            task set. The load balancer can also have up to two listeners: a required listener
            for production traffic and an optional listener that you can use to perform validation
            tests with Lambda functions before routing production traffic to it.</para><para>If you use the <code>CODE_DEPLOY</code> deployment controller, these values can be
            changed when updating the service.</para><para>For Application Load Balancers and Network Load Balancers, this object must contain
            the load balancer target group ARN, the container name, and the container port to
            access from the load balancer. The container name must be as it appears in a container
            definition. The load balancer name parameter must be omitted. When a task from this
            service is placed on a container instance, the container instance and port combination
            is registered as a target in the target group that's specified here.</para><para>For Classic Load Balancers, this object must contain the load balancer name, the container
            name , and the container port to access from the load balancer. The container name
            must be as it appears in a container definition. The target group ARN parameter must
            be omitted. When a task from this service is placed on a container instance, the container
            instance is registered with the load balancer that's specified here.</para><para>Services with tasks that use the <code>awsvpc</code> network mode (for example, those
            with the Fargate launch type) only support Application Load Balancers and Network
            Load Balancers. Classic Load Balancers aren't supported. Also, when you create any
            target groups for these services, you must choose <code>ip</code> as the target type,
            not <code>instance</code>. This is because tasks that use the <code>awsvpc</code>
            network mode are associated with an elastic network interface, not an Amazon EC2 instance.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DeploymentConfiguration_MaximumPercent">
            <summary>
            <para>
            <para>If a service is using the rolling update (<code>ECS</code>) deployment type, the <code>maximumPercent</code>
            parameter represents an upper limit on the number of your service's tasks that are
            allowed in the <code>RUNNING</code> or <code>PENDING</code> state during a deployment,
            as a percentage of the <code>desiredCount</code> (rounded down to the nearest integer).
            This parameter enables you to define the deployment batch size. For example, if your
            service is using the <code>REPLICA</code> service scheduler and has a <code>desiredCount</code>
            of four tasks and a <code>maximumPercent</code> value of 200%, the scheduler may start
            four new tasks before stopping the four older tasks (provided that the cluster resources
            required to do this are available). The default <code>maximumPercent</code> value
            for a service using the <code>REPLICA</code> service scheduler is 200%.</para><para>If a service is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and tasks that use the EC2 launch type, the <b>maximum percent</b>
            value is set to the default value and is used to define the upper limit on the number
            of the tasks in the service that remain in the <code>RUNNING</code> state while the
            container instances are in the <code>DRAINING</code> state. If the tasks in the service
            use the Fargate launch type, the maximum percent value is not used, although it is
            returned when describing your service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DeploymentConfiguration_MinimumHealthyPercent">
            <summary>
            <para>
            <para>If a service is using the rolling update (<code>ECS</code>) deployment type, the <code>minimumHealthyPercent</code>
            represents a lower limit on the number of your service's tasks that must remain in
            the <code>RUNNING</code> state during a deployment, as a percentage of the <code>desiredCount</code>
            (rounded up to the nearest integer). This parameter enables you to deploy without
            using additional cluster capacity. For example, if your service has a <code>desiredCount</code>
            of four tasks and a <code>minimumHealthyPercent</code> of 50%, the service scheduler
            may stop two existing tasks to free up cluster capacity before starting two new tasks.
            </para><para>For services that <i>do not</i> use a load balancer, the following should be noted:</para><ul><li><para>A service is considered healthy if all essential containers within the tasks in the
            service pass their health checks.</para></li><li><para>If a task has no essential containers with a health check defined, the service scheduler
            will wait for 40 seconds after a task reaches a <code>RUNNING</code> state before
            the task is counted towards the minimum healthy percent total.</para></li><li><para>If a task has one or more essential containers with a health check defined, the service
            scheduler will wait for the task to reach a healthy status before counting it towards
            the minimum healthy percent total. A task is considered healthy when all essential
            containers within the task have passed their health checks. The amount of time the
            service scheduler can wait for is determined by the container health check settings.
            </para></li></ul><para>For services are that <i>do</i> use a load balancer, the following should be noted:</para><ul><li><para>If a task has no essential containers with a health check defined, the service scheduler
            will wait for the load balancer target group health check to return a healthy status
            before counting the task towards the minimum healthy percent total.</para></li><li><para>If a task has an essential container with a health check defined, the service scheduler
            will wait for both the task to reach a healthy status and the load balancer target
            group health check to return a healthy status before counting the task towards the
            minimum healthy percent total.</para></li></ul><para>If a service is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and is running tasks that use the EC2 launch type, the <b>minimum
            healthy percent</b> value is set to the default value and is used to define the lower
            limit on the number of the tasks in the service that remain in the <code>RUNNING</code>
            state while the container instances are in the <code>DRAINING</code> state. If a service
            is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and is running tasks that use the Fargate launch type, the minimum
            healthy percent value is not used, although it is returned when describing your service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.PlacementConstraint">
            <summary>
            <para>
            <para>An array of placement constraint objects to use for tasks in your service. You can
            specify a maximum of 10 constraints for each task. This limit includes constraints
            in the task definition and those specified at runtime.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.PlacementStrategy">
            <summary>
            <para>
            <para>The placement strategy objects to use for tasks in your service. You can specify a
            maximum of 5 strategy rules for each service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.PlatformVersion">
            <summary>
            <para>
            <para>The platform version that your tasks in the service are running on. A platform version
            is specified only for tasks using the Fargate launch type. If one isn't specified,
            the <code>LATEST</code> platform version is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate
            platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.PropagateTag">
            <summary>
            <para>
            <para>Specifies whether to propagate the tags from the task definition to the task. If no
            value is specified, the tags aren't propagated. Tags can only be propagated to the
            task during task creation. To add tags to a task after task creation, use the <a>TagResource</a>
            API action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.Role">
            <summary>
            <para>
            <para>The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS
            to make calls to your load balancer on your behalf. This parameter is only permitted
            if you are using a load balancer with your service and your task definition doesn't
            use the <code>awsvpc</code> network mode. If you specify the <code>role</code> parameter,
            you must also specify a load balancer object with the <code>loadBalancers</code> parameter.</para><important><para>If your account has already created the Amazon ECS service-linked role, that role
            is used for your service unless you specify a role here. The service-linked role is
            required if your task definition uses the <code>awsvpc</code> network mode or if the
            service is configured to use service discovery, an external deployment controller,
            multiple target groups, or Elastic Inference accelerators in which case you don't
            specify a role here. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using
            service-linked roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>.</para></important><para>If your specified role has a path other than <code>/</code>, then you must either
            specify the full role ARN (this is recommended) or prefix the role name with the path.
            For example, if a role with the name <code>bar</code> has a path of <code>/foo/</code>
            then you would specify <code>/foo/bar</code> as the role name. For more information,
            see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names">Friendly
            names and paths</a> in the <i>IAM User Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DeploymentCircuitBreaker_Rollback">
            <summary>
            <para>
            <para>Determines whether to configure Amazon ECS to roll back the service if a service deployment
            fails. If rollback is enabled, when a service deployment fails, the service is rolled
            back to the last deployment that completed successfully.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.SchedulingStrategy">
            <summary>
            <para>
            <para>The scheduling strategy to use for the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Services</a>.</para><para>There are two service scheduler strategies available:</para><ul><li><para><code>REPLICA</code>-The replica scheduling strategy places and maintains the desired
            number of tasks across your cluster. By default, the service scheduler spreads tasks
            across Availability Zones. You can use task placement strategies and constraints to
            customize task placement decisions. This scheduler strategy is required if the service
            uses the <code>CODE_DEPLOY</code> or <code>EXTERNAL</code> deployment controller types.</para></li><li><para><code>DAEMON</code>-The daemon scheduling strategy deploys exactly one task on each
            active container instance that meets all of the task placement constraints that you
            specify in your cluster. The service scheduler also evaluates the task placement constraints
            for running tasks and will stop tasks that don't meet the placement constraints. When
            you're using this strategy, you don't need to specify a desired number of tasks, a
            task placement strategy, or use Service Auto Scaling policies.</para><note><para>Tasks using the Fargate launch type or the <code>CODE_DEPLOY</code> or <code>EXTERNAL</code>
            deployment controller types don't support the <code>DAEMON</code> scheduling strategy.</para></note></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.AwsvpcConfiguration_SecurityGroup">
            <summary>
            <para>
            <para>The IDs of the security groups associated with the task or service. If you don't specify
            a security group, the default security group for the VPC is used. There's a limit
            of 5 security groups that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified security groups must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.ServiceName">
            <summary>
            <para>
            <para>The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores,
            and hyphens are allowed. Service names must be unique within a cluster, but you can
            have similarly named services in multiple clusters within a Region or across multiple
            Regions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.ServiceRegistry">
            <summary>
            <para>
            <para>The details of the service discovery registry to associate with this service. For
            more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
            discovery</a>.</para><note><para>Each service may be associated with one service registry. Multiple service registries
            for each service isn't supported.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.AwsvpcConfiguration_Subnet">
            <summary>
            <para>
            <para>The IDs of the subnets associated with the task or service. There's a limit of 16
            subnets that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified subnets must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the service to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define. When a
            service is deleted, the tags are deleted as well.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
            full ARN of the task definition to run in your service. If a <code>revision</code>
            isn't specified, the latest <code>ACTIVE</code> revision is used.</para><para>A task definition must be specified if the service uses either the <code>ECS</code>
            or <code>CODE_DEPLOY</code> deployment controllers.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.DeploymentController_Type">
            <summary>
            <para>
            <para>The deployment controller type to use.</para><para>There are three deployment controller types available:</para><dl><dt>ECS</dt><dd><para>The rolling update (<code>ECS</code>) deployment type involves replacing the current
            running version of the container with the latest version. The number of containers
            Amazon ECS adds or removes from the service during a rolling update is controlled
            by adjusting the minimum and maximum number of healthy tasks allowed during a service
            deployment, as specified in the <a>DeploymentConfiguration</a>.</para></dd><dt>CODE_DEPLOY</dt><dd><para>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment
            model powered by CodeDeploy, which allows you to verify a new deployment of a service
            before sending production traffic to it.</para></dd><dt>EXTERNAL</dt><dd><para>The external (<code>EXTERNAL</code>) deployment type enables you to use any third-party
            deployment controller for full control over the deployment process for an Amazon ECS
            service.</para></dd></dl>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.ClientToken">
            <summary>
            <para>
            <para>An identifier that you provide to ensure the idempotency of the request. It must be
            unique and is case sensitive. Up to 32 ASCII characters are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Service'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.CreateServiceResponse).
            Specifying the name of a property of type Amazon.ECS.Model.CreateServiceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSServiceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet">
            <summary>
            Starts a new task using the specified task definition.
            
             
            <para>
            You can allow Amazon ECS to place tasks for you, or you can customize how Amazon ECS
            places tasks using placement constraints and placement strategies. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html">Scheduling
            Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><para>
            Alternatively, you can use <a>StartTask</a> to use your own scheduler or place tasks
            manually on specific container instances.
            </para><para>
            The Amazon ECS API follows an eventual consistency model. This is because of the distributed
            nature of the system supporting the API. This means that the result of an API command
            you run that affects your Amazon ECS resources might not be immediately visible to
            all subsequent commands you run. Keep this in mind when you carry out an API command
            that immediately follows a previous API command.
            </para><para>
            To manage eventual consistency, you can do the following:
            </para><ul><li><para>
            Confirm the state of the resource before you run a command to modify it. Run the DescribeTasks
            command using an exponential backoff algorithm to ensure that you allow enough time
            for the previous command to propagate through the system. To do this, run the DescribeTasks
            command repeatedly, starting with a couple of seconds of wait time and increasing
            gradually up to five minutes of wait time.
            </para></li><li><para>
            Add wait time between subsequent commands, even if the DescribeTasks command returns
            an accurate response. Apply an exponential backoff algorithm starting with a couple
            of seconds of wait time, and increase gradually up to about five minutes of wait time.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.AwsvpcConfiguration_AssignPublicIp">
            <summary>
            <para>
            <para>Whether the task's elastic network interface receives a public IP address. The default
            value is <code>DISABLED</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.CapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to use for the task.</para><para>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
            parameter must be omitted. If no <code>capacityProviderStrategy</code> or <code>launchType</code>
            is specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is
            used.</para><para>When you use cluster auto scaling, you must specify <code>capacityProviderStrategy</code>
            and not <code>launchType</code>. </para><para>A capacity provider strategy may contain a maximum of 6 capacity providers.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to run your task
            on. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_ContainerOverride">
            <summary>
            <para>
            <para>One or more container overrides that are sent to a task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Count">
            <summary>
            <para>
            <para>The number of instantiations of the specified task to place on your cluster. You can
            specify up to 10 tasks for each call.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_Cpu">
            <summary>
            <para>
            <para>The cpu override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.EnableECSManagedTag">
            <summary>
            <para>
            <para>Specifies whether to use Amazon ECS managed tags for the task. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging
            Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.EnableExecuteCommand">
            <summary>
            <para>
            <para>Determines whether to use the execute command functionality for the containers in
            this task. If <code>true</code>, this enables execute command functionality on all
            containers in the task.</para><para>If <code>true</code>, then the task definition must have a task role, or you must
            provide one as an override.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_ExecutionRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html">Amazon
            ECS task execution IAM role</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Group">
            <summary>
            <para>
            <para>The name of the task group to associate with the task. The default value is the family
            name of the task definition (for example, <code>family:my-family-name</code>).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_InferenceAcceleratorOverride">
            <summary>
            <para>
            <para>The Elastic Inference accelerator override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.LaunchType">
            <summary>
            <para>
            <para>The infrastructure to run your standalone task on. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon
            ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><para>The <code>FARGATE</code> launch type runs your tasks on Fargate On-Demand infrastructure.</para><note><para>Fargate Spot infrastructure is available for use but a capacity provider strategy
            must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html">Fargate
            capacity providers</a> in the <i>Amazon ECS User Guide for Fargate</i>.</para></note><para>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered
            to your cluster.</para><para>The <code>EXTERNAL</code> launch type runs your tasks on your on-premises server or
            virtual machine (VM) capacity registered to your cluster.</para><para>A task can use either a launch type or a capacity provider strategy. If a <code>launchType</code>
            is specified, the <code>capacityProviderStrategy</code> parameter must be omitted.</para><para>When you use cluster auto scaling, you must specify <code>capacityProviderStrategy</code>
            and not <code>launchType</code>. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_Memory">
            <summary>
            <para>
            <para>The memory override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.PlacementConstraint">
            <summary>
            <para>
            <para>An array of placement constraint objects to use for the task. You can specify up to
            10 constraints for each task (including constraints in the task definition and those
            specified at runtime).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.PlacementStrategy">
            <summary>
            <para>
            <para>The placement strategy objects to use for the task. You can specify a maximum of 5
            strategy rules for each task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.PlatformVersion">
            <summary>
            <para>
            <para>The platform version the task uses. A platform version is only specified for tasks
            hosted on Fargate. If one isn't specified, the <code>LATEST</code> platform version
            is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate
            platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.PropagateTag">
            <summary>
            <para>
            <para>Specifies whether to propagate the tags from the task definition to the task. If no
            value is specified, the tags aren't propagated. Tags can only be propagated to the
            task during task creation. To add tags to a task after task creation, use the <a>TagResource</a>
            API action.</para><note><para>An error will be received if you specify the <code>SERVICE</code> option when running
            a task.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.ReferenceId">
            <summary>
            <para>
            <para>The reference ID to use for the task. The reference ID can have a maximum length of
            1024 characters.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.AwsvpcConfiguration_SecurityGroup">
            <summary>
            <para>
            <para>The IDs of the security groups associated with the task or service. If you don't specify
            a security group, the default security group for the VPC is used. There's a limit
            of 5 security groups that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified security groups must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.EphemeralStorage_SizeInGiB">
            <summary>
            <para>
            <para>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported
            value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.StartedBy">
            <summary>
            <para>
            <para>An optional tag specified when a task is started. For example, if you automatically
            trigger a task to run a batch process job, you could apply a unique identifier for
            that job to your task with the <code>startedBy</code> parameter. You can then identify
            which tasks belong to that job by filtering the results of a <a>ListTasks</a> call
            with the <code>startedBy</code> value. Up to 36 letters (uppercase and lowercase),
            numbers, hyphens (-), and underscores (_) are allowed.</para><para>If a task is started by an Amazon ECS service, then the <code>startedBy</code> parameter
            contains the deployment ID of the service that starts it.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.AwsvpcConfiguration_Subnet">
            <summary>
            <para>
            <para>The IDs of the subnets associated with the task or service. There's a limit of 16
            subnets that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified subnets must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the task to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
            full ARN of the task definition to run. If a <code>revision</code> isn't specified,
            the latest <code>ACTIVE</code> revision is used.</para><para>When you create an IAM policy for run-task, you can set the resource to be the latest
            task definition revision, or a specific revision.</para><para>The full ARN value must match the value that you specified as the <code>Resource</code>
            of the IAM principal's permissions policy.</para><para>When you specify the policy resource as the latest task definition version (by setting
            the <code>Resource</code> in the policy to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</code>),
            then set this value to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</code>.</para><para>When you specify the policy resource as a specific task definition version (by setting
            the <code>Resource</code> in the policy to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:1</code>
            or <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*</code>),
            then set this value to <code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:1</code>.</para><para>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources">Policy
            Resources for Amazon ECS</a> in the Amazon Elastic Container Service developer Guide.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Overrides_TaskRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
            All containers in this task are granted the permissions that are specified in this
            role. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM
            Role for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.RunTaskResponse).
            Specifying the name of a property of type Amazon.ECS.Model.RunTaskResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet">
            <summary>
            Create a task set in the specified cluster and service. This is used when a service
            uses the <code>EXTERNAL</code> deployment controller type. For more information, see
            <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS deployment types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.AwsvpcConfiguration_AssignPublicIp">
            <summary>
            <para>
            <para>Whether the task's elastic network interface receives a public IP address. The default
            value is <code>DISABLED</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.CapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to use for the task set.</para><para>A capacity provider strategy consists of one or more capacity providers along with
            the <code>base</code> and <code>weight</code> to assign to them. A capacity provider
            must be associated with the cluster to be used in a capacity provider strategy. The
            <a>PutClusterCapacityProviders</a> API is used to associate a capacity provider with
            a cluster. Only capacity providers with an <code>ACTIVE</code> or <code>UPDATING</code>
            status can be used.</para><para>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
            parameter must be omitted. If no <code>capacityProviderStrategy</code> or <code>launchType</code>
            is specified, the <code>defaultCapacityProviderStrategy</code> for the cluster is
            used.</para><para>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider
            must already be created. New capacity providers can be created with the <a>CreateCapacityProvider</a>
            API operation.</para><para>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code>
            capacity providers. The Fargate capacity providers are available to all accounts and
            only need to be associated with a cluster to be used.</para><para>The <a>PutClusterCapacityProviders</a> API operation is used to update the list of
            available capacity providers for a cluster after the cluster is created.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            to create the task set in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.ExternalId">
            <summary>
            <para>
            <para>An optional non-unique tag that identifies this task set in external systems. If the
            task set is associated with a service discovery registry, the tasks in this task set
            will have the <code>ECS_TASK_SET_EXTERNAL_ID</code> Cloud Map attribute set to the
            provided value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.LaunchType">
            <summary>
            <para>
            <para>The launch type that new tasks in the task set uses. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon
            ECS launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><para>If a <code>launchType</code> is specified, the <code>capacityProviderStrategy</code>
            parameter must be omitted.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.LoadBalancer">
            <summary>
            <para>
            <para>A load balancer object representing the load balancer to use with the task set. The
            supported load balancer types are either an Application Load Balancer or a Network
            Load Balancer.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.PlatformVersion">
            <summary>
            <para>
            <para>The platform version that the tasks in the task set uses. A platform version is specified
            only for tasks using the Fargate launch type. If one isn't specified, the <code>LATEST</code>
            platform version is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.AwsvpcConfiguration_SecurityGroup">
            <summary>
            <para>
            <para>The IDs of the security groups associated with the task or service. If you don't specify
            a security group, the default security group for the VPC is used. There's a limit
            of 5 security groups that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified security groups must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Service">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the service to create the task
            set in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.ServiceRegistry">
            <summary>
            <para>
            <para>The details of the service discovery registries to assign to this task set. For more
            information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
            discovery</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.AwsvpcConfiguration_Subnet">
            <summary>
            <para>
            <para>The IDs of the subnets associated with the task or service. There's a limit of 16
            subnets that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified subnets must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the task set to help you categorize and organize them.
            Each tag consists of a key and an optional value. You define both. When a service
            is deleted, the tags are deleted.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The task definition for the tasks in the task set to use.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Scale_Unit">
            <summary>
            <para>
            <para>The unit of measure for the scale value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Scale_Value">
            <summary>
            <para>
            <para>The value, specified as a percent total of a service's <code>desiredCount</code>,
            to scale the task set. Accepted values are numbers between 0 and 100.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.ClientToken">
            <summary>
            <para>
            <para>The identifier that you provide to ensure the idempotency of the request. It's case
            sensitive and must be unique. It can be up to 32 ASCII characters are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskSet'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.CreateTaskSetResponse).
            Specifying the name of a property of type Amazon.ECS.Model.CreateTaskSetResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.NewECSTaskSetCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet">
            <summary>
            Registers a new task definition from the supplied <code>family</code> and <code>containerDefinitions</code>.
            Optionally, you can add data volumes to your containers with the <code>volumes</code>
            parameter. For more information about task definition parameters and defaults, see
            <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html">Amazon
            ECS Task Definitions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            
             
            <para>
            You can specify an IAM role for your task with the <code>taskRoleArn</code> parameter.
            When you specify an IAM role for a task, its containers can then use the latest versions
            of the CLI or SDKs to make API requests to the Amazon Web Services services that are
            specified in the IAM policy that's associated with the role. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM
            Roles for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><para>
            You can specify a Docker networking mode for the containers in your task definition
            with the <code>networkMode</code> parameter. The available network modes correspond
            to those described in <a href="https://docs.docker.com/engine/reference/run/#/network-settings">Network
            settings</a> in the Docker run reference. If you specify the <code>awsvpc</code> network
            mode, the task is allocated an elastic network interface, and you must specify a <a>NetworkConfiguration</a>
            when you create a service or run a task with the task definition. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task
            Networking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.ContainerDefinition">
            <summary>
            <para>
            <para>A list of container definitions in JSON format that describe the different containers
            that make up your task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.ProxyConfiguration_ContainerName">
            <summary>
            <para>
            <para>The name of the container that will serve as the App Mesh proxy.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Cpu">
            <summary>
            <para>
            <para>The number of CPU units used by the task. It can be expressed as an integer using
            CPU units (for example, <code>1024</code>) or as a string using vCPUs (for example,
            <code>1 vCPU</code> or <code>1 vcpu</code>) in a task definition. String values are
            converted to an integer indicating the CPU units when the task definition is registered.</para><note><para>Task-level CPU and memory parameters are ignored for Windows containers. We recommend
            specifying container-level resources for Windows containers.</para></note><para>If you're using the EC2 launch type, this field is optional. Supported values are
            between <code>128</code> CPU units (<code>0.125</code> vCPUs) and <code>10240</code>
            CPU units (<code>10</code> vCPUs). If you do not specify a value, the parameter is
            ignored.</para><para>If you're using the Fargate launch type, this field is required and you must use one
            of the following values, which determines your range of supported values for the <code>memory</code>
            parameter:</para><para>The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.</para><ul><li><para>256 (.25 vCPU) - Available <code>memory</code> values: 512 (0.5 GB), 1024 (1 GB),
            2048 (2 GB)</para></li><li><para>512 (.5 vCPU) - Available <code>memory</code> values: 1024 (1 GB), 2048 (2 GB), 3072
            (3 GB), 4096 (4 GB)</para></li><li><para>1024 (1 vCPU) - Available <code>memory</code> values: 2048 (2 GB), 3072 (3 GB), 4096
            (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)</para></li><li><para>2048 (2 vCPU) - Available <code>memory</code> values: 4096 (4 GB) and 16384 (16 GB)
            in increments of 1024 (1 GB)</para></li><li><para>4096 (4 vCPU) - Available <code>memory</code> values: 8192 (8 GB) and 30720 (30 GB)
            in increments of 1024 (1 GB)</para></li><li><para>8192 (8 vCPU) - Available <code>memory</code> values: 16 GB and 60 GB in 4 GB increments</para><para>This option requires Linux platform <code>1.4.0</code> or later.</para></li><li><para>16384 (16vCPU) - Available <code>memory</code> values: 32GB and 120 GB in 8 GB increments</para><para>This option requires Linux platform <code>1.4.0</code> or later.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.RuntimePlatform_CpuArchitecture">
            <summary>
            <para>
            <para>The CPU architecture.</para><para>You can run your Linux tasks on an ARM-based platform by setting the value to <code>ARM64</code>.
            This option is avaiable for tasks that run on Linux Amazon EC2 instance or Linux containers
            on Fargate.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.ExecutionRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS
            container agent permission to make Amazon Web Services API calls on your behalf. The
            task execution IAM role is required depending on the requirements of your task. For
            more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html">Amazon
            ECS task execution IAM role</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Family">
            <summary>
            <para>
            <para>You must specify a <code>family</code> for a task definition. You can use it track
            multiple versions of the same task definition. The <code>family</code> is used as
            a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers,
            underscores, and hyphens are allowed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.InferenceAccelerator">
            <summary>
            <para>
            <para>The Elastic Inference accelerators to use for the containers in the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.IpcMode">
            <summary>
            <para>
            <para>The IPC resource namespace to use for the containers in the task. The valid values
            are <code>host</code>, <code>task</code>, or <code>none</code>. If <code>host</code>
            is specified, then all containers within the tasks that specified the <code>host</code>
            IPC mode on the same container instance share the same IPC resources with the host
            Amazon EC2 instance. If <code>task</code> is specified, all containers within the
            specified task share the same IPC resources. If <code>none</code> is specified, then
            IPC resources within the containers of a task are private and not shared with other
            containers in a task or on the container instance. If no value is specified, then
            the IPC resource namespace sharing depends on the Docker daemon setting on the container
            instance. For more information, see <a href="https://docs.docker.com/engine/reference/run/#ipc-settings---ipc">IPC
            settings</a> in the <i>Docker run reference</i>.</para><para>If the <code>host</code> IPC mode is used, be aware that there is a heightened risk
            of undesired IPC namespace expose. For more information, see <a href="https://docs.docker.com/engine/security/security/">Docker
            security</a>.</para><para>If you are setting namespaced kernel parameters using <code>systemControls</code>
            for the containers in the task, the following will apply to your IPC resource namespace.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html">System
            Controls</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><ul><li><para>For tasks that use the <code>host</code> IPC mode, IPC namespace related <code>systemControls</code>
            are not supported.</para></li><li><para>For tasks that use the <code>task</code> IPC mode, IPC namespace related <code>systemControls</code>
            will apply to all containers within a task.</para></li></ul><note><para>This parameter is not supported for Windows containers or tasks run on Fargate.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Memory">
            <summary>
            <para>
            <para>The amount of memory (in MiB) used by the task. It can be expressed as an integer
            using MiB (for example ,<code>1024</code>) or as a string using GB (for example, <code>1GB</code>
            or <code>1 GB</code>) in a task definition. String values are converted to an integer
            indicating the MiB when the task definition is registered.</para><note><para>Task-level CPU and memory parameters are ignored for Windows containers. We recommend
            specifying container-level resources for Windows containers.</para></note><para>If using the EC2 launch type, this field is optional.</para><para>If using the Fargate launch type, this field is required and you must use one of the
            following values. This determines your range of supported values for the <code>cpu</code>
            parameter.</para><para>The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.</para><ul><li><para>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <code>cpu</code> values: 256 (.25
            vCPU)</para></li><li><para>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available <code>cpu</code> values:
            512 (.5 vCPU)</para></li><li><para>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
            (8 GB) - Available <code>cpu</code> values: 1024 (1 vCPU)</para></li><li><para>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available <code>cpu</code>
            values: 2048 (2 vCPU)</para></li><li><para>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available <code>cpu</code>
            values: 4096 (4 vCPU)</para></li><li><para>Between 16 GB and 60 GB in 4 GB increments - Available <code>cpu</code> values: 8192
            (8 vCPU)</para><para>This option requires Linux platform <code>1.4.0</code> or later.</para></li><li><para>Between 32GB and 120 GB in 8 GB increments - Available <code>cpu</code> values: 16384
            (16 vCPU)</para><para>This option requires Linux platform <code>1.4.0</code> or later.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.NetworkMode">
            <summary>
            <para>
            <para>The Docker networking mode to use for the containers in the task. The valid values
            are <code>none</code>, <code>bridge</code>, <code>awsvpc</code>, and <code>host</code>.
            If no network mode is specified, the default is <code>bridge</code>.</para><para>For Amazon ECS tasks on Fargate, the <code>awsvpc</code> network mode is required.
            For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.
            For Amazon ECS tasks on Amazon EC2 Windows instances, <code>&lt;default&gt;</code>
            or <code>awsvpc</code> can be used. If the network mode is set to <code>none</code>,
            you cannot specify port mappings in your container definitions, and the tasks containers
            do not have external connectivity. The <code>host</code> and <code>awsvpc</code> network
            modes offer the highest networking performance for containers because they use the
            EC2 network stack instead of the virtualized network stack provided by the <code>bridge</code>
            mode.</para><para>With the <code>host</code> and <code>awsvpc</code> network modes, exposed container
            ports are mapped directly to the corresponding host port (for the <code>host</code>
            network mode) or the attached elastic network interface port (for the <code>awsvpc</code>
            network mode), so you cannot take advantage of dynamic host port mappings. </para><important><para>When using the <code>host</code> network mode, you should not run containers using
            the root user (UID 0). It is considered best practice to use a non-root user.</para></important><para>If the network mode is <code>awsvpc</code>, the task is allocated an elastic network
            interface, and you must specify a <a>NetworkConfiguration</a> value when you create
            a service or run a task with the task definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task
            Networking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para><para>If the network mode is <code>host</code>, you cannot run multiple instantiations of
            the same task on a single container instance when port mappings are used.</para><para>For more information, see <a href="https://docs.docker.com/engine/reference/run/#network-settings">Network
            settings</a> in the <i>Docker run reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.RuntimePlatform_OperatingSystemFamily">
            <summary>
            <para>
            <para>The operating system.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.PidMode">
            <summary>
            <para>
            <para>The process namespace to use for the containers in the task. The valid values are
            <code>host</code> or <code>task</code>. If <code>host</code> is specified, then all
            containers within the tasks that specified the <code>host</code> PID mode on the same
            container instance share the same process namespace with the host Amazon EC2 instance.
            If <code>task</code> is specified, all containers within the specified task share
            the same process namespace. If no value is specified, the default is a private namespace.
            For more information, see <a href="https://docs.docker.com/engine/reference/run/#pid-settings---pid">PID
            settings</a> in the <i>Docker run reference</i>.</para><para>If the <code>host</code> PID mode is used, be aware that there is a heightened risk
            of undesired process namespace expose. For more information, see <a href="https://docs.docker.com/engine/security/security/">Docker
            security</a>.</para><note><para>This parameter is not supported for Windows containers or tasks run on Fargate.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.PlacementConstraint">
            <summary>
            <para>
            <para>An array of placement constraint objects to use for the task. You can specify a maximum
            of 10 constraints for each task. This limit includes constraints in the task definition
            and those specified at runtime.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.ProxyConfiguration_Property">
            <summary>
            <para>
            <para>The set of network configuration parameters to provide the Container Network Interface
            (CNI) plugin, specified as key-value pairs.</para><ul><li><para><code>IgnoredUID</code> - (Required) The user ID (UID) of the proxy container as
            defined by the <code>user</code> parameter in a container definition. This is used
            to ensure the proxy ignores its own traffic. If <code>IgnoredGID</code> is specified,
            this field can be empty.</para></li><li><para><code>IgnoredGID</code> - (Required) The group ID (GID) of the proxy container as
            defined by the <code>user</code> parameter in a container definition. This is used
            to ensure the proxy ignores its own traffic. If <code>IgnoredUID</code> is specified,
            this field can be empty.</para></li><li><para><code>AppPorts</code> - (Required) The list of ports that the application uses. Network
            traffic to these ports is forwarded to the <code>ProxyIngressPort</code> and <code>ProxyEgressPort</code>.</para></li><li><para><code>ProxyIngressPort</code> - (Required) Specifies the port that incoming traffic
            to the <code>AppPorts</code> is directed to.</para></li><li><para><code>ProxyEgressPort</code> - (Required) Specifies the port that outgoing traffic
            from the <code>AppPorts</code> is directed to.</para></li><li><para><code>EgressIgnoredPorts</code> - (Required) The egress traffic going to the specified
            ports is ignored and not redirected to the <code>ProxyEgressPort</code>. It can be
            an empty list.</para></li><li><para><code>EgressIgnoredIPs</code> - (Required) The egress traffic going to the specified
            IP addresses is ignored and not redirected to the <code>ProxyEgressPort</code>. It
            can be an empty list.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.RequiresCompatibility">
            <summary>
            <para>
            <para>The task launch type that Amazon ECS validates the task definition against. A client
            exception is returned if the task definition doesn't validate against the compatibilities
            specified. If no value is specified, the parameter is omitted from the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.EphemeralStorage_SizeInGiB">
            <summary>
            <para>
            <para>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported
            value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the task definition to help you categorize and organize
            them. Each tag consists of a key and an optional value. You define both of them.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.TaskRoleArn">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the IAM role that containers
            in this task can assume. All containers in this task are granted the permissions that
            are specified in this role. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM
            Roles for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.ProxyConfiguration_Type">
            <summary>
            <para>
            <para>The proxy type. The only supported value is <code>APPMESH</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Volume">
            <summary>
            <para>
            <para>A list of volume definitions in JSON format that containers in your task might use.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.RegisterTaskDefinitionResponse).
            Specifying the name of a property of type Amazon.ECS.Model.RegisterTaskDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Family parameter.
            The -PassThru parameter is deprecated, use -Select '^Family' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RegisterECSTaskDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet">
            <summary>
            Disables an account setting for a specified IAM user, IAM role, or the root user for
            an account.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet.Name">
            <summary>
            <para>
            <para>The resource name to disable the account setting for. If <code>serviceLongArnFormat</code>
            is specified, the ARN for your Amazon ECS services is affected. If <code>taskLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If <code>containerInstanceLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS container instances is affected.
            If <code>awsvpcTrunking</code> is specified, the ENI limit for your Amazon ECS container
            instances is affected.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet.PrincipalArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the principal. It can be an IAM user, IAM role,
            or the root user. If you specify the root user, it disables the account setting for
            all IAM users, IAM roles, and the root user of the account unless an IAM user or role
            explicitly overrides these settings. If this field is omitted, the setting is changed
            only for the authenticated user.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Setting'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteAccountSettingResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteAccountSettingResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAccountSettingCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet">
            <summary>
            Deletes one or more custom attributes from an Amazon ECS resource.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet.Attribute">
            <summary>
            <para>
            <para>The attributes to delete from your resource. You can specify up to 10 attributes for
            each request. For custom attributes, specify the attribute name and target ID, but
            don't specify the value. If you specify the target ID using the short form, you must
            also specify the target type.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that contains the
            resource to delete attributes. If you do not specify a cluster, the default cluster
            is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Attributes'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteAttributesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteAttributesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSAttributeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSCapacityProviderCmdlet">
            <summary>
            Deletes the specified capacity provider.
            
             <note><para>
            The <code>FARGATE</code> and <code>FARGATE_SPOT</code> capacity providers are reserved
            and can't be deleted. You can disassociate them from a cluster using either the <a>PutClusterCapacityProviders</a>
            API or by deleting the cluster.
            </para></note><para>
            Prior to a capacity provider being deleted, the capacity provider must be removed
            from the capacity provider strategy from all services. The <a>UpdateService</a> API
            can be used to remove a capacity provider from a service's capacity provider strategy.
            When updating a service, the <code>forceNewDeployment</code> option can be used to
            ensure that any tasks using the Amazon EC2 instance capacity provided by the capacity
            provider are transitioned to use the capacity from the remaining capacity providers.
            Only capacity providers that aren't associated with a cluster can be deleted. To remove
            a capacity provider from a cluster, you can either use <a>PutClusterCapacityProviders</a>
            or delete the cluster.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSCapacityProviderCmdlet.CapacityProvider">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the capacity provider to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSCapacityProviderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CapacityProvider'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteCapacityProviderResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteCapacityProviderResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSCapacityProviderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the CapacityProvider parameter.
            The -PassThru parameter is deprecated, use -Select '^CapacityProvider' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSCapacityProviderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSClusterCmdlet">
            <summary>
            Deletes the specified cluster. The cluster transitions to the <code>INACTIVE</code>
            state. Clusters with an <code>INACTIVE</code> status might remain discoverable in
            your account for a period of time. However, this behavior is subject to change in
            the future. We don't recommend that you rely on <code>INACTIVE</code> clusters persisting.
            
             
            <para>
            You must deregister all container instances from this cluster before you may delete
            it. You can list the container instances in a cluster with <a>ListContainerInstances</a>
            and deregister them with <a>DeregisterContainerInstance</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSClusterCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSClusterCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Cluster'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteClusterResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteClusterResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSClusterCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSClusterCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet">
            <summary>
            Deletes specified tags from a resource.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the resource to delete tags from. Currently, the
            supported resources are Amazon ECS capacity providers, tasks, services, task definitions,
            clusters, and container instances.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>The keys of the tags to be removed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet">
            <summary>
            Deletes a specified service within a cluster. You can delete a service if you have
            no running tasks in it and the desired task count is zero. If the service is actively
            maintaining tasks, you can't delete it, and you must update the service to a desired
            task count of zero. For more information, see <a>UpdateService</a>.
            
             <note><para>
            When you delete a service, if there are still running tasks that require cleanup,
            the service status moves from <code>ACTIVE</code> to <code>DRAINING</code>, and the
            service is no longer visible in the console or in the <a>ListServices</a> API operation.
            After all tasks have transitioned to either <code>STOPPING</code> or <code>STOPPED</code>
            status, the service status moves from <code>DRAINING</code> to <code>INACTIVE</code>.
            Services in the <code>DRAINING</code> or <code>INACTIVE</code> status can still be
            viewed with the <a>DescribeServices</a> API operation. However, in the future, <code>INACTIVE</code>
            services may be cleaned up and purged from Amazon ECS record keeping, and <a>DescribeServices</a>
            calls on those services return a <code>ServiceNotFoundException</code> error.
            </para></note><important><para>
            If you attempt to create a new service with the same name as an existing service in
            either <code>ACTIVE</code> or <code>DRAINING</code> status, you receive an error.
            </para></important>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            to delete. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.Enforce">
            <summary>
            <para>
            <para>If <code>true</code>, allows you to delete a service even if it wasn't scaled down
            to zero tasks. It's only necessary to use this if the service uses the <code>REPLICA</code>
            scheduling strategy.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.Service">
            <summary>
            <para>
            <para>The name of the service to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Service'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteServiceResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteServiceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSServiceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet">
            <summary>
            Deletes a specified task set within a service. This is used when a service uses the
            <code>EXTERNAL</code> deployment controller type. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS deployment types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            that the task set found in to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.Enforce">
            <summary>
            <para>
            <para>If <code>true</code>, you can delete a task set even if it hasn't been scaled down
            to zero.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.Service">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the service that hosts the task
            set to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.TaskSet">
            <summary>
            <para>
            <para>The task set ID or full Amazon Resource Name (ARN) of the task set to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskSet'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeleteTaskSetResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeleteTaskSetResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.RemoveECSTaskSetCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet">
            <summary>
            Starts a new task from the specified task definition on the specified container instance
            or instances.
            
             
            <para>
            Alternatively, you can use <a>RunTask</a> to place tasks for you. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html">Scheduling
            Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.AwsvpcConfiguration_AssignPublicIp">
            <summary>
            <para>
            <para>Whether the task's elastic network interface receives a public IP address. The default
            value is <code>DISABLED</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster where to start your
            task. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>The container instance IDs or full ARN entries for the container instances where you
            would like to place your task. You can specify up to 10 container instances.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_ContainerOverride">
            <summary>
            <para>
            <para>One or more container overrides that are sent to a task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_Cpu">
            <summary>
            <para>
            <para>The cpu override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.EnableECSManagedTag">
            <summary>
            <para>
            <para>Specifies whether to use Amazon ECS managed tags for the task. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging
            Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.EnableExecuteCommand">
            <summary>
            <para>
            <para>Whether or not the execute command functionality is enabled for the task. If <code>true</code>,
            this enables execute command functionality on all containers in the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_ExecutionRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the task execution IAM role override for the task.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html">Amazon
            ECS task execution IAM role</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Group">
            <summary>
            <para>
            <para>The name of the task group to associate with the task. The default value is the family
            name of the task definition (for example, family:my-family-name).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_InferenceAcceleratorOverride">
            <summary>
            <para>
            <para>The Elastic Inference accelerator override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_Memory">
            <summary>
            <para>
            <para>The memory override for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.PropagateTag">
            <summary>
            <para>
            <para>Specifies whether to propagate the tags from the task definition or the service to
            the task. If no value is specified, the tags aren't propagated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.ReferenceId">
            <summary>
            <para>
            <para>The reference ID to use for the task.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.AwsvpcConfiguration_SecurityGroup">
            <summary>
            <para>
            <para>The IDs of the security groups associated with the task or service. If you don't specify
            a security group, the default security group for the VPC is used. There's a limit
            of 5 security groups that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified security groups must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.EphemeralStorage_SizeInGiB">
            <summary>
            <para>
            <para>The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported
            value is <code>21</code> GiB and the maximum supported value is <code>200</code> GiB.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.StartedBy">
            <summary>
            <para>
            <para>An optional tag specified when a task is started. For example, if you automatically
            trigger a task to run a batch process job, you could apply a unique identifier for
            that job to your task with the <code>startedBy</code> parameter. You can then identify
            which tasks belong to that job by filtering the results of a <a>ListTasks</a> call
            with the <code>startedBy</code> value. Up to 36 letters (uppercase and lowercase),
            numbers, hyphens (-), and underscores (_) are allowed.</para><para>If a task is started by an Amazon ECS service, the <code>startedBy</code> parameter
            contains the deployment ID of the service that starts it.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.AwsvpcConfiguration_Subnet">
            <summary>
            <para>
            <para>The IDs of the subnets associated with the task or service. There's a limit of 16
            subnets that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified subnets must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Tag">
            <summary>
            <para>
            <para>The metadata that you apply to the task to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.</para><para>The following basic restrictions apply to tags:</para><ul><li><para>Maximum number of tags per resource - 50</para></li><li><para>For each resource, each tag key must be unique, and each tag key can have only one
            value.</para></li><li><para>Maximum key length - 128 Unicode characters in UTF-8</para></li><li><para>Maximum value length - 256 Unicode characters in UTF-8</para></li><li><para>If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed characters
            are: letters, numbers, and spaces representable in UTF-8, and the following characters:
            + - = . _ : / @.</para></li><li><para>Tag keys and values are case-sensitive.</para></li><li><para>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
            of such as a prefix for either keys or values as it is reserved for Amazon Web Services
            use. You cannot edit or delete tag keys or values with this prefix. Tags with this
            prefix do not count against your tags per resource limit.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
            full ARN of the task definition to start. If a <code>revision</code> isn't specified,
            the latest <code>ACTIVE</code> revision is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Overrides_TaskRoleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
            All containers in this task are granted the permissions that are specified in this
            role. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM
            Role for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.StartTaskResponse).
            Specifying the name of a property of type Amazon.ECS.Model.StartTaskResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StartECSTaskCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet">
            <summary>
            Stops a running task. Any tags associated with the task will be deleted.
            
             
            <para>
            When <a>StopTask</a> is called on a task, the equivalent of <code>docker stop</code>
            is issued to the containers running in the task. This results in a <code>SIGTERM</code>
            value and a default 30-second timeout, after which the <code>SIGKILL</code> value
            is sent and the containers are forcibly stopped. If the container handles the <code>SIGTERM</code>
            value gracefully and exits within 30 seconds from receiving it, no <code>SIGKILL</code>
            value is sent.
            </para><note><para>
            The default 30-second timeout can be configured on the Amazon ECS container agent
            with the <code>ECS_CONTAINER_STOP_TIMEOUT</code> variable. For more information, see
            <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html">Amazon
            ECS Container Agent Configuration</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task
            to stop. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.Reason">
            <summary>
            <para>
            <para>An optional message specified when a task is stopped. For example, if you're using
            a custom scheduler, you can use this parameter to specify the reason for stopping
            the task here, and the message appears in subsequent <a>DescribeTasks</a> API operations
            on this task. Up to 255 characters are allowed in this message.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.Task">
            <summary>
            <para>
            <para>The task ID or full Amazon Resource Name (ARN) of the task to stop.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Task'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.StopTaskResponse).
            Specifying the name of a property of type Amazon.ECS.Model.StopTaskResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.StopECSTaskCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet">
            <summary>
            <note><para>
            This action is only used by the Amazon ECS agent, and it is not intended for use outside
            of the agent.
            </para></note><para>
            Sent to acknowledge that an attachment changed states.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet.Attachment">
            <summary>
            <para>
            <para>Any attachments associated with the state change request.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full ARN of the cluster that hosts the container instance the attachment
            belongs to.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Acknowledgment'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.SubmitAttachmentStateChangesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.SubmitAttachmentStateChangesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.SubmitECSAttachmentStateChangeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet">
            <summary>
            Deregisters an Amazon ECS container instance from the specified cluster. This instance
            is no longer available to run tasks.
            
             
            <para>
            If you intend to use the container instance for some other purpose after deregistration,
            we recommend that you stop all of the tasks running on the container instance before
            deregistration. That prevents any orphaned tasks from consuming resources.
            </para><para>
            Deregistering a container instance removes the instance from a cluster, but it doesn't
            terminate the EC2 instance. If you are finished using the instance, be sure to terminate
            it in the Amazon EC2 console to stop billing.
            </para><note><para>
            If you terminate a running container instance, Amazon ECS automatically deregisters
            the instance from your cluster (stopped container instances or instances with disconnected
            agents aren't automatically deregistered when terminated).
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container
            instance to deregister. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>The container instance ID or full ARN of the container instance to deregister. For
            more information about the ARN format, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids">Amazon
            Resource Name (ARN)</a> in the <i>Amazon ECS Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.ForceDeregistration">
            <summary>
            <para>
            <para>Forces the container instance to be deregistered. If you have tasks running on the
            container instance when you deregister it with the <code>force</code> option, these
            tasks remain running until you terminate the instance or the tasks stop through some
            other means, but they're orphaned (no longer monitored or accounted for by Amazon
            ECS). If an orphaned task on your container instance is part of an Amazon ECS service,
            then the service scheduler starts another copy of that task, on a different container
            instance if possible. </para><para>Any containers in orphaned service tasks that are registered with a Classic Load Balancer
            or an Application Load Balancer target group are deregistered. They begin connection
            draining according to the settings on the load balancer or target group.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ContainerInstance'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeregisterContainerInstanceResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeregisterContainerInstanceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSContainerInstanceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSTaskDefinitionCmdlet">
            <summary>
            Deregisters the specified task definition by family and revision. Upon deregistration,
            the task definition is marked as <code>INACTIVE</code>. Existing tasks and services
            that reference an <code>INACTIVE</code> task definition continue to run without disruption.
            Existing services that reference an <code>INACTIVE</code> task definition can still
            scale up or down by modifying the service's desired count.
            
             
            <para>
            You can't use an <code>INACTIVE</code> task definition to run new tasks or create
            new services, and you can't update an existing service to reference an <code>INACTIVE</code>
            task definition. However, there may be up to a 10-minute window following deregistration
            where these restrictions have not yet taken effect.
            </para><note><para>
            At this time, <code>INACTIVE</code> task definitions remain discoverable in your account
            indefinitely. However, this behavior is subject to change in the future. We don't
            recommend that you rely on <code>INACTIVE</code> task definitions persisting beyond
            the lifecycle of any associated tasks and services.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSTaskDefinitionCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
            full Amazon Resource Name (ARN) of the task definition to deregister. You must specify
            a <code>revision</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSTaskDefinitionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskDefinition'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.DeregisterTaskDefinitionResponse).
            Specifying the name of a property of type Amazon.ECS.Model.DeregisterTaskDefinitionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSTaskDefinitionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the TaskDefinition parameter.
            The -PassThru parameter is deprecated, use -Select '^TaskDefinition' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UnregisterECSTaskDefinitionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet">
            <summary>
            Modifies the parameters for a capacity provider.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.ManagedScaling_InstanceWarmupPeriod">
            <summary>
            <para>
            <para>The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute
            to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default
            value of <code>300</code> seconds is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.AutoScalingGroupProvider_ManagedTerminationProtection">
            <summary>
            <para>
            <para>The managed termination protection setting to use for the Auto Scaling group capacity
            provider. This determines whether the Auto Scaling group has managed termination protection.</para><important><para>When using managed termination protection, managed scaling must also be used otherwise
            managed termination protection doesn't work.</para></important><para>When managed termination protection is enabled, Amazon ECS prevents the Amazon EC2
            instances in an Auto Scaling group that contain tasks from being terminated during
            a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group
            must have instance protection from scale-in actions enabled. For more information,
            see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance
            Protection</a> in the <i>Auto Scaling User Guide</i>.</para><para>When managed termination protection is disabled, your Amazon EC2 instances aren't
            protected from termination when the Auto Scaling group scales in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.ManagedScaling_MaximumScalingStepSize">
            <summary>
            <para>
            <para>The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time.
            The scale in process is not affected by this parameter. If this parameter is omitted,
            the default value of <code>10000</code> is used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.ManagedScaling_MinimumScalingStepSize">
            <summary>
            <para>
            <para>The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time.
            The scale in process is not affected by this parameter If this parameter is omitted,
            the default value of <code>1</code> is used.</para><para>When additional capacity is required, Amazon ECS will scale up the minimum scaling
            step size even if the actual demand is less than the minimum scaling step size.</para><para>If you use a capacity provider with an Auto Scaling group configured with more than
            one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the
            exact minimum scaling step size value and will ignore both the maximum scaling step
            size as well as the capacity demand.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.Name">
            <summary>
            <para>
            <para>The name of the capacity provider to update.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.ManagedScaling_Status">
            <summary>
            <para>
            <para>Determines whether to use managed scaling for the capacity provider.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.ManagedScaling_TargetCapacity">
            <summary>
            <para>
            <para>The target capacity value for the capacity provider. The specified value must be greater
            than <code>0</code> and less than or equal to <code>100</code>. A value of <code>100</code>
            results in the Amazon EC2 instances in your Auto Scaling group being completely used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'CapacityProvider'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateCapacityProviderResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateCapacityProviderResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSCapacityProviderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet">
            <summary>
            Updates the cluster.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.LogConfiguration_CloudWatchEncryptionEnabled">
            <summary>
            <para>
            <para>Determines whether to use encryption on the CloudWatch logs. If not specified, encryption
            will be disabled.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.LogConfiguration_CloudWatchLogGroupName">
            <summary>
            <para>
            <para>The name of the CloudWatch log group to send logs to.</para><note><para>The CloudWatch log group must already be created.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.Cluster">
            <summary>
            <para>
            <para>The name of the cluster to modify the settings for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.ExecuteCommandConfiguration_KmsKeyId">
            <summary>
            <para>
            <para>Specify an Key Management Service key ID to encrypt the data between the local client
            and the container.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.ExecuteCommandConfiguration_Logging">
            <summary>
            <para>
            <para>The log setting to use for redirecting logs for your execute command results. The
            following log settings are available.</para><ul><li><para><code>NONE</code>: The execute command session is not logged.</para></li><li><para><code>DEFAULT</code>: The <code>awslogs</code> configuration in the task definition
            is used. If no logging parameter is specified, it defaults to this value. If no <code>awslogs</code>
            log driver is configured in the task definition, the output won't be logged.</para></li><li><para><code>OVERRIDE</code>: Specify the logging details as a part of <code>logConfiguration</code>.
            If the <code>OVERRIDE</code> logging option is specified, the <code>logConfiguration</code>
            is required.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.LogConfiguration_S3BucketName">
            <summary>
            <para>
            <para>The name of the S3 bucket to send logs to.</para><note><para>The S3 bucket must already be created.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.LogConfiguration_S3EncryptionEnabled">
            <summary>
            <para>
            <para>Determines whether to use encryption on the S3 logs. If not specified, encryption
            is not used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.LogConfiguration_S3KeyPrefix">
            <summary>
            <para>
            <para>An optional folder in the S3 bucket to place logs in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.Setting">
            <summary>
            <para>
            <para>The cluster settings for your cluster.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Cluster'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateClusterResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateClusterResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet">
            <summary>
            Modifies the settings to use for a cluster.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet.Cluster">
            <summary>
            <para>
            <para>The name of the cluster to modify the settings for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet.Setting">
            <summary>
            <para>
            <para>The setting to use by default for a cluster. This parameter is used to turn on CloudWatch
            Container Insights for a cluster. If this value is specified, it overrides the <code>containerInsights</code>
            value set with <a>PutAccountSetting</a> or <a>PutAccountSettingDefault</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Cluster'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateClusterSettingsResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateClusterSettingsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSClusterSettingCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet">
            <summary>
            Updates the Amazon ECS container agent on a specified container instance. Updating
            the Amazon ECS container agent doesn't interrupt running tasks or services on the
            container instance. The process for updating the agent differs depending on whether
            your container instance was launched with the Amazon ECS-optimized AMI or another
            operating system.
            
             <note><para>
            The <code>UpdateContainerAgent</code> API isn't supported for container instances
            using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI. To update the container
            agent, you can update the <code>ecs-init</code> package. This updates the agent. For
            more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/agent-update-ecs-ami.html">Updating
            the Amazon ECS container agent</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.
            </para></note><para>
            The <code>UpdateContainerAgent</code> API requires an Amazon ECS-optimized AMI or
            Amazon Linux AMI with the <code>ecs-init</code> service installed and running. For
            help updating the Amazon ECS container agent on other operating systems, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent">Manually
            updating the Amazon ECS container agent</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that your container
            instance is running on. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>The container instance ID or full ARN entries for the container instance where you
            would like to update the Amazon ECS container agent.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ContainerInstance'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateContainerAgentResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateContainerAgentResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerAgentCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet">
            <summary>
            Modifies the status of an Amazon ECS container instance.
            
             
            <para>
            Once a container instance has reached an <code>ACTIVE</code> state, you can change
            the status of a container instance to <code>DRAINING</code> to manually remove an
            instance from a cluster, for example to perform system updates, update the Docker
            daemon, or scale down the cluster size.
            </para><important><para>
            A container instance can't be changed to <code>DRAINING</code> until it has reached
            an <code>ACTIVE</code> status. If the instance is in any other status, an error will
            be received.
            </para></important><para>
            When you set a container instance to <code>DRAINING</code>, Amazon ECS prevents new
            tasks from being scheduled for placement on the container instance and replacement
            service tasks are started on other container instances in the cluster if the resources
            are available. Service tasks on the container instance that are in the <code>PENDING</code>
            state are stopped immediately.
            </para><para>
            Service tasks on the container instance that are in the <code>RUNNING</code> state
            are stopped and replaced according to the service's deployment configuration parameters,
            <code>minimumHealthyPercent</code> and <code>maximumPercent</code>. You can change
            the deployment configuration of your service using <a>UpdateService</a>.
            </para><ul><li><para>
            If <code>minimumHealthyPercent</code> is below 100%, the scheduler can ignore <code>desiredCount</code>
            temporarily during task replacement. For example, <code>desiredCount</code> is four
            tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting
            two new tasks. If the minimum is 100%, the service scheduler can't remove existing
            tasks until the replacement tasks are considered healthy. Tasks for services that
            do not use a load balancer are considered healthy if they're in the <code>RUNNING</code>
            state. Tasks for services that use a load balancer are considered healthy if they're
            in the <code>RUNNING</code> state and are reported as healthy by the load balancer.
            </para></li><li><para>
            The <code>maximumPercent</code> parameter represents an upper limit on the number
            of running tasks during task replacement. You can use this to define the replacement
            batch size. For example, if <code>desiredCount</code> is four tasks, a maximum of
            200% starts four new tasks before stopping the four tasks to be drained, provided
            that the cluster resources required to do this are available. If the maximum is 100%,
            then replacement tasks can't start until the draining tasks have stopped.
            </para></li></ul><para>
            Any <code>PENDING</code> or <code>RUNNING</code> tasks that do not belong to a service
            aren't affected. You must wait for them to finish or stop them manually.
            </para><para>
            A container instance has completed draining when it has no more <code>RUNNING</code>
            tasks. You can verify this using <a>ListTasks</a>.
            </para><para>
            When a container instance has been drained, you can set a container instance to <code>ACTIVE</code>
            status and once it has reached that status the Amazon ECS scheduler can begin scheduling
            tasks on the instance again.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container
            instance to update. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.ContainerInstance">
            <summary>
            <para>
            <para>A list of up to 10 container instance IDs or full ARN entries.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.Status">
            <summary>
            <para>
            <para>The container instance state to update the container instance with. The only valid
            values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container
            instance can only be updated to <code>DRAINING</code> status once it has reached an
            <code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>,
            <code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can describe
            the container instance but can't update the container instance state.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateContainerInstancesStateResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateContainerInstancesStateResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSContainerInstancesStateCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet">
            <summary>
            Modifies the parameters of a service.
            
             
            <para>
            For services using the rolling update (<code>ECS</code>) you can update the desired
            count, deployment configuration, network configuration, load balancers, service registries,
            enable ECS managed tags option, propagate tags option, task placement constraints
            and strategies, and task definition. When you update any of these parameters, Amazon
            ECS starts new tasks with the new configuration. 
            </para><para>
            For services using the blue/green (<code>CODE_DEPLOY</code>) deployment controller,
            only the desired count, deployment configuration, health check grace period, task
            placement constraints and strategies, enable ECS managed tags option, and propagate
            tags can be updated using this API. If the network configuration, platform version,
            task definition, or load balancer need to be updated, create a new CodeDeploy deployment.
            For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html">CreateDeployment</a>
            in the <i>CodeDeploy API Reference</i>.
            </para><para>
            For services using an external deployment controller, you can update only the desired
            count, task placement constraints and strategies, health check grace period, enable
            ECS managed tags option, and propagate tags option, using this API. If the launch
            type, load balancer, network configuration, platform version, or task definition need
            to be updated, create a new task set For more information, see <a>CreateTaskSet</a>.
            </para><para>
            You can add to or subtract from the number of instantiations of a task definition
            in a service by specifying the cluster that the service is running in and a new <code>desiredCount</code>
            parameter.
            </para><para>
            If you have updated the Docker image of your application, you can create a new task
            definition with that image and deploy it to your service. The service scheduler uses
            the minimum healthy percent and maximum percent parameters (in the service's deployment
            configuration) to determine the deployment strategy.
            </para><note><para>
            If your updated Docker image uses the same tag as what is in the existing task definition
            for your service (for example, <code>my_image:latest</code>), you don't need to create
            a new revision of your task definition. You can update the service using the <code>forceNewDeployment</code>
            option. The new tasks launched by the deployment pull the current image/tag combination
            from your repository when they start.
            </para></note><para>
            You can also update the deployment configuration of a service. When a deployment is
            triggered by updating the task definition of a service, the service scheduler uses
            the deployment configuration parameters, <code>minimumHealthyPercent</code> and <code>maximumPercent</code>,
            to determine the deployment strategy.
            </para><ul><li><para>
            If <code>minimumHealthyPercent</code> is below 100%, the scheduler can ignore <code>desiredCount</code>
            temporarily during a deployment. For example, if <code>desiredCount</code> is four
            tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting
            two new tasks. Tasks for services that don't use a load balancer are considered healthy
            if they're in the <code>RUNNING</code> state. Tasks for services that use a load balancer
            are considered healthy if they're in the <code>RUNNING</code> state and are reported
            as healthy by the load balancer.
            </para></li><li><para>
            The <code>maximumPercent</code> parameter represents an upper limit on the number
            of running tasks during a deployment. You can use it to define the deployment batch
            size. For example, if <code>desiredCount</code> is four tasks, a maximum of 200% starts
            four new tasks before stopping the four older tasks (provided that the cluster resources
            required to do this are available).
            </para></li></ul><para>
            When <a>UpdateService</a> stops a task during a deployment, the equivalent of <code>docker
            stop</code> is issued to the containers running in the task. This results in a <code>SIGTERM</code>
            and a 30-second timeout. After this, <code>SIGKILL</code> is sent and the containers
            are forcibly stopped. If the container handles the <code>SIGTERM</code> gracefully
            and exits within 30 seconds from receiving it, no <code>SIGKILL</code> is sent.
            </para><para>
            When the service scheduler launches new tasks, it determines task placement in your
            cluster with the following logic.
            </para><ul><li><para>
            Determine which of the container instances in your cluster can support your service's
            task definition. For example, they have the required CPU, memory, ports, and container
            instance attributes.
            </para></li><li><para>
            By default, the service scheduler attempts to balance tasks across Availability Zones
            in this manner even though you can choose a different placement strategy.
            </para><ul><li><para>
            Sort the valid container instances by the fewest number of running tasks for this
            service in the same Availability Zone as the instance. For example, if zone A has
            one running service task and zones B and C each have zero, valid container instances
            in either zone B or C are considered optimal for placement.
            </para></li><li><para>
            Place the new service task on a valid container instance in an optimal Availability
            Zone (based on the previous steps), favoring container instances with the fewest number
            of running tasks for this service.
            </para></li></ul></li></ul><para>
            When the service scheduler stops running tasks, it attempts to maintain balance across
            the Availability Zones in your cluster using the following logic: 
            </para><ul><li><para>
            Sort the container instances by the largest number of running tasks for this service
            in the same Availability Zone as the instance. For example, if zone A has one running
            service task and zones B and C each have two, container instances in either zone B
            or C are considered optimal for termination.
            </para></li><li><para>
            Stop the task on a container instance in an optimal Availability Zone (based on the
            previous steps), favoring container instances with the largest number of running tasks
            for this service.
            </para></li></ul><note><para>
            You must have a service-linked role when you update any of the following service properties.
            If you specified a custom IAM role when you created the service, Amazon ECS automatically
            replaces the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Service.html#ECS-Type-Service-roleArn">roleARN</a>
            associated with the service with the ARN of your service-linked role. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Service-linked
            roles</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><ul><li><para><code>loadBalancers,</code></para></li><li><para><code>serviceRegistries</code></para></li></ul></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.AwsvpcConfiguration_AssignPublicIp">
            <summary>
            <para>
            <para>Whether the task's elastic network interface receives a public IP address. The default
            value is <code>DISABLED</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.CapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to update the service to use.</para><para>if the service uses the default capacity provider strategy for the cluster, the service
            can be updated to use one or more capacity providers as opposed to the default capacity
            provider strategy. However, when a service is using a capacity provider strategy that's
            not the default capacity provider strategy, the service can't be updated to use the
            cluster's default capacity provider strategy.</para><para>A capacity provider strategy consists of one or more capacity providers along with
            the <code>base</code> and <code>weight</code> to assign to them. A capacity provider
            must be associated with the cluster to be used in a capacity provider strategy. The
            <a>PutClusterCapacityProviders</a> API is used to associate a capacity provider with
            a cluster. Only capacity providers with an <code>ACTIVE</code> or <code>UPDATING</code>
            status can be used.</para><para>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider
            must already be created. New capacity providers can be created with the <a>CreateCapacityProvider</a>
            API operation.</para><para>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code>
            capacity providers. The Fargate capacity providers are available to all accounts and
            only need to be associated with a cluster to be used.</para><para>The <a>PutClusterCapacityProviders</a> API operation is used to update the list of
            available capacity providers for a cluster after the cluster is created.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that your service
            runs on. If you do not specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.DesiredCount">
            <summary>
            <para>
            <para>The number of instantiations of the task to place and keep running in your service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.DeploymentCircuitBreaker_Enable">
            <summary>
            <para>
            <para>Determines whether to use the deployment circuit breaker logic for the service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.EnableECSManagedTag">
            <summary>
            <para>
            <para>Determines whether to turn on Amazon ECS managed tags for the tasks in the service.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging
            Your Amazon ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.</para><para>Only tasks launched after the update will reflect the update. To update the tags on
            all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon
            ECS starts new tasks with the updated tags.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.EnableExecuteCommand">
            <summary>
            <para>
            <para>If <code>true</code>, this enables execute command functionality on all task containers.</para><para>If you do not want to override the value that was set when the service was created,
            you can set this to <code>null</code> when performing this action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.ForceNewDeployment">
            <summary>
            <para>
            <para>Determines whether to force a new deployment of the service. By default, deployments
            aren't forced. You can use this option to start a new deployment with no service definition
            changes. For example, you can update a service's tasks to use a newer Docker image
            with the same image/tag combination (<code>my_image:latest</code>) or to roll Fargate
            tasks onto a newer platform version.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.HealthCheckGracePeriodSecond">
            <summary>
            <para>
            <para>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
            Elastic Load Balancing target health checks after a task has first started. This is
            only valid if your service is configured to use a load balancer. If your service's
            tasks take a while to start and respond to Elastic Load Balancing health checks, you
            can specify a health check grace period of up to 2,147,483,647 seconds. During that
            time, the Amazon ECS service scheduler ignores the Elastic Load Balancing health check
            status. This grace period can prevent the ECS service scheduler from marking tasks
            as unhealthy and stopping them before they have time to come up.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.LoadBalancer">
            <summary>
            <para>
            <para>A list of Elastic Load Balancing load balancer objects. It contains the load balancer
            name, the container name, and the container port to access from the load balancer.
            The container name is as it appears in a container definition.</para><para>When you add, update, or remove a load balancer configuration, Amazon ECS starts new
            tasks with the updated Elastic Load Balancing configuration, and then stops the old
            tasks when the new tasks are running.</para><para>For services that use rolling updates, you can add, update, or remove Elastic Load
            Balancing target groups. You can update from a single target group to multiple target
            groups and from multiple target groups to a single target group.</para><para>For services that use blue/green deployments, you can update Elastic Load Balancing
            target groups by using <code><a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html">CreateDeployment</a></code> through CodeDeploy. Note that multiple target groups are not supported for
            blue/green deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register
            multiple target groups with a service</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>. </para><para>For services that use the external deployment controller, you can add, update, or
            remove load balancers by using <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateTaskSet.html">CreateTaskSet</a>.
            Note that multiple target groups are not supported for external deployments. For more
            information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register
            multiple target groups with a service</a> in the <i>Amazon Elastic Container Service
            Developer Guide</i>. </para><para>You can remove existing <code>loadBalancers</code> by passing an empty list.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.DeploymentConfiguration_MaximumPercent">
            <summary>
            <para>
            <para>If a service is using the rolling update (<code>ECS</code>) deployment type, the <code>maximumPercent</code>
            parameter represents an upper limit on the number of your service's tasks that are
            allowed in the <code>RUNNING</code> or <code>PENDING</code> state during a deployment,
            as a percentage of the <code>desiredCount</code> (rounded down to the nearest integer).
            This parameter enables you to define the deployment batch size. For example, if your
            service is using the <code>REPLICA</code> service scheduler and has a <code>desiredCount</code>
            of four tasks and a <code>maximumPercent</code> value of 200%, the scheduler may start
            four new tasks before stopping the four older tasks (provided that the cluster resources
            required to do this are available). The default <code>maximumPercent</code> value
            for a service using the <code>REPLICA</code> service scheduler is 200%.</para><para>If a service is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and tasks that use the EC2 launch type, the <b>maximum percent</b>
            value is set to the default value and is used to define the upper limit on the number
            of the tasks in the service that remain in the <code>RUNNING</code> state while the
            container instances are in the <code>DRAINING</code> state. If the tasks in the service
            use the Fargate launch type, the maximum percent value is not used, although it is
            returned when describing your service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.DeploymentConfiguration_MinimumHealthyPercent">
            <summary>
            <para>
            <para>If a service is using the rolling update (<code>ECS</code>) deployment type, the <code>minimumHealthyPercent</code>
            represents a lower limit on the number of your service's tasks that must remain in
            the <code>RUNNING</code> state during a deployment, as a percentage of the <code>desiredCount</code>
            (rounded up to the nearest integer). This parameter enables you to deploy without
            using additional cluster capacity. For example, if your service has a <code>desiredCount</code>
            of four tasks and a <code>minimumHealthyPercent</code> of 50%, the service scheduler
            may stop two existing tasks to free up cluster capacity before starting two new tasks.
            </para><para>For services that <i>do not</i> use a load balancer, the following should be noted:</para><ul><li><para>A service is considered healthy if all essential containers within the tasks in the
            service pass their health checks.</para></li><li><para>If a task has no essential containers with a health check defined, the service scheduler
            will wait for 40 seconds after a task reaches a <code>RUNNING</code> state before
            the task is counted towards the minimum healthy percent total.</para></li><li><para>If a task has one or more essential containers with a health check defined, the service
            scheduler will wait for the task to reach a healthy status before counting it towards
            the minimum healthy percent total. A task is considered healthy when all essential
            containers within the task have passed their health checks. The amount of time the
            service scheduler can wait for is determined by the container health check settings.
            </para></li></ul><para>For services are that <i>do</i> use a load balancer, the following should be noted:</para><ul><li><para>If a task has no essential containers with a health check defined, the service scheduler
            will wait for the load balancer target group health check to return a healthy status
            before counting the task towards the minimum healthy percent total.</para></li><li><para>If a task has an essential container with a health check defined, the service scheduler
            will wait for both the task to reach a healthy status and the load balancer target
            group health check to return a healthy status before counting the task towards the
            minimum healthy percent total.</para></li></ul><para>If a service is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and is running tasks that use the EC2 launch type, the <b>minimum
            healthy percent</b> value is set to the default value and is used to define the lower
            limit on the number of the tasks in the service that remain in the <code>RUNNING</code>
            state while the container instances are in the <code>DRAINING</code> state. If a service
            is using either the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code>
            deployment types and is running tasks that use the Fargate launch type, the minimum
            healthy percent value is not used, although it is returned when describing your service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.PlacementConstraint">
            <summary>
            <para>
            <para>An array of task placement constraint objects to update the service to use. If no
            value is specified, the existing placement constraints for the service will remain
            unchanged. If this value is specified, it will override any existing placement constraints
            defined for the service. To remove all existing placement constraints, specify an
            empty array.</para><para>You can specify a maximum of 10 constraints for each task. This limit includes constraints
            in the task definition and those specified at runtime.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.PlacementStrategy">
            <summary>
            <para>
            <para>The task placement strategy objects to update the service to use. If no value is specified,
            the existing placement strategy for the service will remain unchanged. If this value
            is specified, it will override the existing placement strategy defined for the service.
            To remove an existing placement strategy, specify an empty object.</para><para>You can specify a maximum of five strategy rules for each service.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.PlatformVersion">
            <summary>
            <para>
            <para>The platform version that your tasks in the service run on. A platform version is
            only specified for tasks using the Fargate launch type. If a platform version is not
            specified, the <code>LATEST</code> platform version is used. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate
            Platform Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.PropagateTag">
            <summary>
            <para>
            <para>Determines whether to propagate the tags from the task definition or the service to
            the task. If no value is specified, the tags aren't propagated.</para><para>Only tasks launched after the update will reflect the update. To update the tags on
            all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon
            ECS starts new tasks with the updated tags.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.DeploymentCircuitBreaker_Rollback">
            <summary>
            <para>
            <para>Determines whether to configure Amazon ECS to roll back the service if a service deployment
            fails. If rollback is enabled, when a service deployment fails, the service is rolled
            back to the last deployment that completed successfully.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.AwsvpcConfiguration_SecurityGroup">
            <summary>
            <para>
            <para>The IDs of the security groups associated with the task or service. If you don't specify
            a security group, the default security group for the VPC is used. There's a limit
            of 5 security groups that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified security groups must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.Service">
            <summary>
            <para>
            <para>The name of the service to update.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.ServiceRegistry">
            <summary>
            <para>
            <para>The details for the service discovery registries to assign to this service. For more
            information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
            Discovery</a>.</para><para>When you add, update, or remove the service registries configuration, Amazon ECS starts
            new tasks with the updated service registries configuration, and then stops the old
            tasks when the new tasks are running.</para><para>You can remove existing <code>serviceRegistries</code> by passing an empty list.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.AwsvpcConfiguration_Subnet">
            <summary>
            <para>
            <para>The IDs of the subnets associated with the task or service. There's a limit of 16
            subnets that can be specified per <code>AwsVpcConfiguration</code>.</para><note><para>All specified subnets must be from the same VPC.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.TaskDefinition">
            <summary>
            <para>
            <para>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
            full ARN of the task definition to run in your service. If a <code>revision</code>
            is not specified, the latest <code>ACTIVE</code> revision is used. If you modify the
            task definition with <code>UpdateService</code>, Amazon ECS spawns a task with the
            new version of the task definition and then stops an old task after the new version
            is running.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Service'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateServiceResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateServiceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServiceCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet">
            <summary>
            Modifies which task set in a service is the primary task set. Any parameters that
            are updated on the primary task set in a service will transition to the service. This
            is used when a service uses the <code>EXTERNAL</code> deployment controller type.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            that the task set exists in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.PrimaryTaskSet">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the task set to set as the primary
            task set in the deployment.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.Service">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the service that the task set
            exists in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskSet'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateServicePrimaryTaskSetResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateServicePrimaryTaskSetResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSServicePrimaryTaskSetCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet">
            <summary>
            Modifies a task set. This is used when a service uses the <code>EXTERNAL</code> deployment
            controller type. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
            ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service
            that the task set is found in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Service">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the service that the task set
            is found in.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.TaskSet">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the task set to update.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Scale_Unit">
            <summary>
            <para>
            <para>The unit of measure for the scale value.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Scale_Value">
            <summary>
            <para>
            <para>The value, specified as a percent total of a service's <code>desiredCount</code>,
            to scale the task set. Accepted values are numbers between 0 and 100.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TaskSet'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.UpdateTaskSetResponse).
            Specifying the name of a property of type Amazon.ECS.Model.UpdateTaskSetResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.UpdateECSTaskSetCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet">
            <summary>
            Modifies an account setting. Account settings are set on a per-Region basis.
            
             
            <para>
            If you change the account setting for the root user, the default settings for all
            of the IAM users and roles that no individual account setting was specified are reset
            for. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html">Account
            Settings</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para><para>
            When <code>serviceLongArnFormat</code>, <code>taskLongArnFormat</code>, or <code>containerInstanceLongArnFormat</code>
            are specified, the Amazon Resource Name (ARN) and resource ID format of the resource
            type for a specified IAM user, IAM role, or the root user for an account is affected.
            The opt-in and opt-out account setting must be set for each Amazon ECS resource separately.
            The ARN and resource ID format of a resource is defined by the opt-in status of the
            IAM user or role that created the resource. You must turn on this setting to use Amazon
            ECS features such as resource tagging.
            </para><para>
            When <code>awsvpcTrunking</code> is specified, the elastic network interface (ENI)
            limit for any new container instances that support the feature is changed. If <code>awsvpcTrunking</code>
            is enabled, any new container instances that support the feature are launched have
            the increased ENI limits available to them. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html">Elastic
            Network Interface Trunking</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.
            </para><para>
            When <code>containerInsights</code> is specified, the default setting indicating whether
            CloudWatch Container Insights is enabled for your clusters is changed. If <code>containerInsights</code>
            is enabled, any new clusters that are created will have Container Insights enabled
            unless you disable it during cluster creation. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html">CloudWatch
            Container Insights</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.Name">
            <summary>
            <para>
            <para>The Amazon ECS resource name for which to modify the account setting. If <code>serviceLongArnFormat</code>
            is specified, the ARN for your Amazon ECS services is affected. If <code>taskLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If <code>containerInstanceLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS container instances is affected.
            If <code>awsvpcTrunking</code> is specified, the elastic network interface (ENI) limit
            for your Amazon ECS container instances is affected. If <code>containerInsights</code>
            is specified, the default setting for CloudWatch Container Insights for your clusters
            is affected.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.PrincipalArn">
            <summary>
            <para>
            <para>The ARN of the principal, which can be an IAM user, IAM role, or the root user. If
            you specify the root user, it modifies the account setting for all IAM users, IAM
            roles, and the root user of the account unless an IAM user or role explicitly overrides
            these settings. If this field is omitted, the setting is changed only for the authenticated
            user.</para><note><para>Federated users assume the account setting of the root user and can't have explicit
            account settings set for them.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.Value">
            <summary>
            <para>
            <para>The account setting value for the specified principal ARN. Accepted values are <code>enabled</code>
            and <code>disabled</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Setting'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.PutAccountSettingResponse).
            Specifying the name of a property of type Amazon.ECS.Model.PutAccountSettingResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Value parameter.
            The -PassThru parameter is deprecated, use -Select '^Value' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet">
            <summary>
            Modifies an account setting for all IAM users on an account for whom no individual
            account setting has been specified. Account settings are set on a per-Region basis.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet.Name">
            <summary>
            <para>
            <para>The resource name for which to modify the account setting. If <code>serviceLongArnFormat</code>
            is specified, the ARN for your Amazon ECS services is affected. If <code>taskLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If <code>containerInstanceLongArnFormat</code>
            is specified, the ARN and resource ID for your Amazon ECS container instances is affected.
            If <code>awsvpcTrunking</code> is specified, the ENI limit for your Amazon ECS container
            instances is affected. If <code>containerInsights</code> is specified, the default
            setting for CloudWatch Container Insights for your clusters is affected.</para><para>Fargate is transitioning from task count-based quotas to vCPU-based quotas. You can
            set the name to <code>fargateVCPULimit</code> to opt in or opt out of the vCPU-based
            quotas. For information about the opt in timeline, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#fargate-quota-timeline">Fargate
            vCPU-based quotas timeline</a> in the <i>Amazon ECS Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet.Value">
            <summary>
            <para>
            <para>The account setting value for the specified principal ARN. Accepted values are <code>enabled</code>
            and <code>disabled</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Setting'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.PutAccountSettingDefaultResponse).
            Specifying the name of a property of type Amazon.ECS.Model.PutAccountSettingDefaultResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Name parameter.
            The -PassThru parameter is deprecated, use -Select '^Name' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAccountSettingDefaultCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet">
            <summary>
            Create or update an attribute on an Amazon ECS resource. If the attribute doesn't
            exist, it's created. If the attribute exists, its value is replaced with the specified
            value. To delete an attribute, use <a>DeleteAttributes</a>. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes">Attributes</a>
            in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet.Attribute">
            <summary>
            <para>
            <para>The attributes to apply to your resource. You can specify up to 10 custom attributes
            for each resource. You can specify up to 10 attributes in a single call.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster that contains the
            resource to apply attributes. If you do not specify a cluster, the default cluster
            is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Attributes'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.PutAttributesResponse).
            Specifying the name of a property of type Amazon.ECS.Model.PutAttributesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSAttributeCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet">
            <summary>
            Modifies the available capacity providers and the default capacity provider strategy
            for a cluster.
            
             
            <para>
            You must specify both the available capacity providers and a default capacity provider
            strategy for the cluster. If the specified cluster has existing capacity providers
            associated with it, you must specify all existing capacity providers in addition to
            any new ones you want to add. Any existing capacity providers that are associated
            with a cluster that are omitted from a <a>PutClusterCapacityProviders</a> API call
            will be disassociated with the cluster. You can only disassociate an existing capacity
            provider from a cluster if it's not being used by any existing tasks.
            </para><para>
            When creating a service or running a task on a cluster, if no capacity provider or
            launch type is specified, then the cluster's default capacity provider strategy is
            used. We recommend that you define a default capacity provider strategy for your cluster.
            However, you must specify an empty array (<code>[]</code>) to bypass defining a default
            strategy.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.CapacityProvider">
            <summary>
            <para>
            <para>The name of one or more capacity providers to associate with the cluster.</para><para>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider
            must already be created. New capacity providers can be created with the <a>CreateCapacityProvider</a>
            API operation.</para><para>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code>
            capacity providers. The Fargate capacity providers are available to all accounts and
            only need to be associated with a cluster to be used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.Cluster">
            <summary>
            <para>
            <para>The short name or full Amazon Resource Name (ARN) of the cluster to modify the capacity
            provider settings for. If you don't specify a cluster, the default cluster is assumed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.DefaultCapacityProviderStrategy">
            <summary>
            <para>
            <para>The capacity provider strategy to use by default for the cluster.</para><para>When creating a service or running a task on a cluster, if no capacity provider or
            launch type is specified then the default capacity provider strategy for the cluster
            is used.</para><para>A capacity provider strategy consists of one or more capacity providers along with
            the <code>base</code> and <code>weight</code> to assign to them. A capacity provider
            must be associated with the cluster to be used in a capacity provider strategy. The
            <a>PutClusterCapacityProviders</a> API is used to associate a capacity provider with
            a cluster. Only capacity providers with an <code>ACTIVE</code> or <code>UPDATING</code>
            status can be used.</para><para>If specifying a capacity provider that uses an Auto Scaling group, the capacity provider
            must already be created. New capacity providers can be created with the <a>CreateCapacityProvider</a>
            API operation.</para><para>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or <code>FARGATE_SPOT</code>
            capacity providers. The Fargate capacity providers are available to all accounts and
            only need to be associated with a cluster to be used.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Cluster'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ECS.Model.PutClusterCapacityProvidersResponse).
            Specifying the name of a property of type Amazon.ECS.Model.PutClusterCapacityProvidersResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Cluster parameter.
            The -PassThru parameter is deprecated, use -Select '^Cluster' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.ECS.WriteECSClusterCapacityProviderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
