<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.AWSMarketplaceMetering</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.MM.GetMMCustomerMetadataCmdlet">
            <summary>
            <code>ResolveCustomer</code> is called by a SaaS application during the registration
            process. When a buyer visits your website during the registration process, the buyer
            submits a registration token through their browser. The registration token is resolved
            through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code>
            and <code>ProductCode</code>.
            
             <note><para>
            The API needs to called from the seller account id used to publish the SaaS application
            to successfully resolve the token.
            </para><para>
            For an example of using <code>ResolveCustomer</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example">
            ResolveCustomer code example</a> in the <i>AWS Marketplace Seller Guide</i>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.GetMMCustomerMetadataCmdlet.RegistrationToken">
            <summary>
            <para>
            <para>When a buyer visits your website during the registration process, the buyer submits
            a registration token through the browser. The registration token is resolved to obtain
            a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code>
            and <code>ProductCode</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.GetMMCustomerMetadataCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.AWSMarketplaceMetering.Model.ResolveCustomerResponse).
            Specifying the name of a property of type Amazon.AWSMarketplaceMetering.Model.ResolveCustomerResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.GetMMCustomerMetadataCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RegistrationToken parameter.
            The -PassThru parameter is deprecated, use -Select '^RegistrationToken' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet">
            <summary>
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation
            for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon
            EKS aren't required to call <code>RegisterUsage</code>, but you may choose to do so
            if you would like to receive usage data in your seller reports. The sections below
            explain the behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs
            two primary functions: metering and entitlement.
            
             <ul><li><para><i>Entitlement</i>: <code>RegisterUsage</code> allows you to verify that the customer
            running your paid software is subscribed to your product on AWS Marketplace, enabling
            you to guard against unauthorized use. Your container image that integrates with <code>RegisterUsage</code>
            is only required to guard against unauthorized use at container startup, as such a
            <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code>
            will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent
            calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will
            not throw a <code>CustomerNotSubscribedException</code>, even if the customer unsubscribes
            while the Amazon ECS task or Amazon EKS pod is still running.
            </para></li><li><para><i>Metering</i>: <code>RegisterUsage</code> meters software use per ECS task, per
            hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1
            minute of usage applies to tasks that are short lived. For example, if a customer
            has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon
            Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and
            the customer will be charged: (10 * hourly_rate). Metering for software use is automatically
            handled by the AWS Marketplace Metering Control Plane -- your software is not required
            to perform any metering specific actions, other than call <code>RegisterUsage</code>
            once for metering of software use to commence. The AWS Marketplace Metering Control
            Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods,
            regardless of the customers subscription state, removing the need for your software
            to perform entitlement checks at runtime.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.Nonce">
            <summary>
            <para>
            <para>(Optional) To scope down the registration to a specific running software instance
            and guard against replay attacks.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.ProductCode">
            <summary>
            <para>
            <para>Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.PublicKeyVersion">
            <summary>
            <para>
            <para>Public Key Version provided by AWS Marketplace</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.AWSMarketplaceMetering.Model.RegisterUsageResponse).
            Specifying the name of a property of type Amazon.AWSMarketplaceMetering.Model.RegisterUsageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProductCode parameter.
            The -PassThru parameter is deprecated, use -Select '^ProductCode' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.RegisterMMUsageCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet">
            <summary>
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para><code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials
            from the EC2 instance, ECS task, or EKS pod.
            </para><para><code>MeterUsage</code> can optionally include multiple usage allocations, to provide
            customers with usage data split into buckets by tags that you define (or allow the
            customer to define).
            </para><para>
            Usage records are expected to be submitted as quickly as possible after the event
            that is being recorded, and are not accepted more than 6 hours after the event.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.DryRun">
            <summary>
            <para>
            <para>Checks whether you have the permissions required for the action, but does not make
            the request. If you have the permissions, the request returns <code>DryRunOperation</code>;
            otherwise, it returns <code>UnauthorizedException</code>. Defaults to <code>false</code>
            if not specified.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.ProductCode">
            <summary>
            <para>
            <para>Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.Timestamp">
            <summary>
            <para>
            <para>Timestamp, in UTC, for which the usage is being reported. Your application can meter
            usage for up to one hour in the past. Make sure the <code>timestamp</code> value is
            not before the start of the software usage.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.UsageAllocation">
            <summary>
            <para>
            <para>The set of <code>UsageAllocations</code> to submit.</para><para>The sum of all <code>UsageAllocation</code> quantities must equal the <code>UsageQuantity</code>
            of the <code>MeterUsage</code> request, and each <code>UsageAllocation</code> must
            have a unique set of tags (include no tags).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.UsageDimension">
            <summary>
            <para>
            <para>It will be one of the fcp dimension name provided during the publishing of the product.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.UsageQuantity">
            <summary>
            <para>
            <para>Consumption value for the hour. Defaults to <code>0</code> if not specified.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'MeteringRecordId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.AWSMarketplaceMetering.Model.MeterUsageResponse).
            Specifying the name of a property of type Amazon.AWSMarketplaceMetering.Model.MeterUsageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProductCode parameter.
            The -PassThru parameter is deprecated, use -Select '^ProductCode' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet">
            <summary>
            <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS Marketplace
            to post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para><para>
            Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter
            usage for multiple products, you must make multiple calls to <code>BatchMeterUsage</code>.
            </para><para>
            Usage records are expected to be submitted as quickly as possible after the event
            that is being recorded, and are not accepted more than 6 hours after the event.
            </para><para><code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a
            time.
            </para><para>
            A <code>UsageRecord</code> can optionally include multiple usage allocations, to provide
            customers with usage data split into buckets by tags that you define (or allow the
            customer to define).
            </para><para><code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects,
            showing the result for each <code>UsageRecord</code>, as well as a list of <code>UnprocessedRecords</code>,
            indicating errors in the service side that you should retry.
            </para><para><code>BatchMeterUsage</code> requests must be less than 1MB in size.
            </para><note><para>
            For an example of using <code>BatchMeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example">
            BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller Guide</i>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet.ProductCode">
            <summary>
            <para>
            <para>Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet.UsageRecord">
            <summary>
            <para>
            <para>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts
            up to 25 <code>UsageRecords</code> at a time.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageResponse).
            Specifying the name of a property of type Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ProductCode parameter.
            The -PassThru parameter is deprecated, use -Select '^ProductCode' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.MM.SendMMMeteringDataBatchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
