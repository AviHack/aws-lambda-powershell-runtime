<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.ConfigService</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet">
            <summary>
            Associates the specified tags to a resource with the specified resourceArn. If existing
            tags on a resource are not specified in the request parameters, they are not changed.
            When a resource is deleted, the tags associated with that resource are deleted as
            well.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) that identifies the resource for which to list the
            tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code>
            and <code>AggregatorAuthorization</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>An array of tag object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.AddCFGResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet">
            <summary>
            Returns a list of compliant and noncompliant rules with the number of resources for
            compliant and noncompliant rules. Does not display rules that do not have compliance
            results. 
            
             <note><para>
            The results can return an empty result page, but if you have a <code>nextToken</code>,
            the results are displayed on the next page.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the source account. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Filters_AwsRegion">
            <summary>
            <para>
            <para>The source region where the data is aggregated. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Filters_ComplianceType">
            <summary>
            <para>
            <para>The rule compliance status.</para><para>For the <code>ConfigRuleComplianceFilters</code> data type, Config supports only <code>COMPLIANT</code>
            and <code>NON_COMPLIANT</code>. Config does not support the <code>NOT_APPLICABLE</code>
            and the <code>INSUFFICIENT_DATA</code> values.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Filters_ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is maximum.
            If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregateComplianceByConfigRules'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeAggregateComplianceByConfigRulesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeAggregateComplianceByConfigRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConfigRuleListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet">
            <summary>
            Returns a list of the conformance packs and their associated compliance status with
            the count of compliant and noncompliant Config rules within each conformance pack.
            Also returns the total rule count which includes compliant rules, noncompliant rules,
            and rules that cannot be evaluated due to insufficient data.
            
             <note><para>
            The results can return an empty result page, but if you have a <code>nextToken</code>,
            the results are displayed on the next page.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit Amazon Web Services account ID of the source account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Filters_AwsRegion">
            <summary>
            <para>
            <para>The source Amazon Web Services Region from where the data is aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Filters_ComplianceType">
            <summary>
            <para>
            <para>The compliance status of the conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Filters_ConformancePackName">
            <summary>
            <para>
            <para>The name of the conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of conformance packs compliance details returned on each page.
            The default is maximum. If you specify 0, Config uses the default. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregateComplianceByConformancePacks'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeAggregateComplianceByConformancePacksResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeAggregateComplianceByConformancePacksResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationAggregatorName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationAggregatorName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceByConformancePackCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet">
            <summary>
            Returns the evaluation results for the specified Config rule for a specific resource
            in a rule. The results indicate which Amazon Web Services resources were evaluated
            by the rule, when each resource was last evaluated, and whether each resource complies
            with the rule. 
            
             <note><para>
            The results can return an empty result page. But if you have a <code>nextToken</code>,
            the results are displayed on the next page.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.AccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the source account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.AwsRegion">
            <summary>
            <para>
            <para>The source region from where the data is aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.ComplianceType">
            <summary>
            <para>
            <para>The resource compliance status.</para><note><para>For the <code>GetAggregateComplianceDetailsByConfigRuleRequest</code> data type, Config
            supports only the <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. Config does
            not support the <code>NOT_APPLICABLE</code> and <code>INSUFFICIENT_DATA</code> values.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want compliance information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is 50.
            You cannot specify a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregateEvaluationResults'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetAggregateComplianceDetailsByConfigRuleResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetAggregateComplianceDetailsByConfigRuleResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateComplianceDetailsByConfigRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet">
            <summary>
            Returns the number of compliant and noncompliant rules for one or more accounts and
            regions in an aggregator.
            
             <note><para>
            The results can return an empty result page, but if you have a nextToken, the results
            are displayed on the next page.
            </para></note><br/><br/>In the AWS.Tools.ConfigService module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the source account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.Filters_AwsRegion">
            <summary>
            <para>
            <para>The source region where the data is aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.GroupByKey">
            <summary>
            <para>
            <para>Groups the result based on ACCOUNT_ID or AWS_REGION.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is 1000.
            You cannot specify a number greater than 1000. If you specify 0, Config uses the default.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.ConfigService module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetAggregateConfigRuleComplianceSummaryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetAggregateConfigRuleComplianceSummaryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConfigRuleComplianceSummaryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet">
            <summary>
            Returns the count of compliant and noncompliant conformance packs across all Amazon
            Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter
            based on Amazon Web Services account ID or Amazon Web Services Region.
            
             <note><para>
            The results can return an empty result page, but if you have a nextToken, the results
            are displayed on the next page.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit Amazon Web Services account ID of the source account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.Filters_AwsRegion">
            <summary>
            <para>
            <para>The source Amazon Web Services Region from where the data is aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.GroupByKey">
            <summary>
            <para>
            <para>Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of results returned on each page. The default is maximum. If you
            specify 0, Config uses the default.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetAggregateConformancePackComplianceSummaryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetAggregateConformancePackComplianceSummaryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationAggregatorName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationAggregatorName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateConformancePackComplianceSummaryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet">
            <summary>
            Returns the resource counts across accounts and regions that are present in your Config
            aggregator. You can request the resource counts by providing filters and GroupByKey.
            
             
            <para>
            For example, if the input contains accountID 12345678910 and region us-east-1 in filters,
            the API returns the count of resources in account ID 12345678910 and region us-east-1.
            If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts
            for all source accounts that are present in your aggregator.
            </para><br/><br/>In the AWS.Tools.ConfigService module, this cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit ID of the account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.GroupByKey">
            <summary>
            <para>
            <para>The key to group the resource counts.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.Filters_Region">
            <summary>
            <para>
            <para>The region where the account is located.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.Filters_ResourceType">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of <a>GroupedResourceCount</a> objects returned on each page. The
            default is 1000. You cannot specify a number greater than 1000. If you specify 0,
            Config uses the default.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> In the AWS.Tools.ConfigService module, this parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetAggregateDiscoveredResourceCountsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetAggregateDiscoveredResourceCountsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceCountCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet">
            <summary>
            Accepts a resource type and returns a list of resource identifiers that are aggregated
            for a specific resource type across accounts and regions. A resource identifier includes
            the resource type, ID, (if available) the custom resource name, source account, and
            source region. You can narrow the results to include only resources that have specific
            resource IDs, or a resource name, or source account ID, or source region.
            
             
            <para>
            For example, if the input consists of accountID 12345678910 and the region is us-east-1
            for resource type <code>AWS::EC2::Instance</code> then the API returns all the EC2
            instance identifiers of accountID 12345678910 and region us-east-1.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit source account ID.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Filters_Region">
            <summary>
            <para>
            <para>The source region.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Filters_ResourceId">
            <summary>
            <para>
            <para>The ID of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Filters_ResourceName">
            <summary>
            <para>
            <para>The name of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of resources that you want Config to list in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of resource identifiers returned on each page. You cannot specify
            a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ResourceIdentifiers'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.ListAggregateDiscoveredResourcesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.ListAggregateDiscoveredResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateDiscoveredResourceListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet">
            <summary>
            Returns configuration item that is aggregated for your specific resource in a specific
            source account and region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ResourceIdentifier_ResourceId">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ResourceIdentifier_ResourceName">
            <summary>
            <para>
            <para>The name of the Amazon Web Services resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ResourceIdentifier_ResourceType">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ResourceIdentifier_SourceAccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the source account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.ResourceIdentifier_SourceRegion">
            <summary>
            <para>
            <para>The source region where data is aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationItem'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetAggregateResourceConfigResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetAggregateResourceConfigResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigBatchCmdlet">
            <summary>
            Returns the current configuration items for resources that are present in your Config
            aggregator. The operation also returns a list of resources that are not processed
            in the current request. If there are no unprocessed resources, the operation returns
            an empty <code>unprocessedResourceIdentifiers</code> list. 
            
             <note><ul><li><para>
            The API does not return results for deleted resources.
            </para></li><li><para>
             The API does not return tags and relationships.
            </para></li></ul></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigBatchCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigBatchCmdlet.ResourceIdentifier">
            <summary>
            <para>
            <para>A list of aggregate ResourceIdentifiers objects. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregateResourceConfigBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.BatchGetAggregateResourceConfigResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.BatchGetAggregateResourceConfigResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregationAuthorizationListCmdlet">
            <summary>
            Returns a list of authorizations granted to various aggregator accounts and regions.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregationAuthorizationListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of AggregationAuthorizations returned on each page. The default
            is maximum. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregationAuthorizationListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregationAuthorizationListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregationAuthorizations'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeAggregationAuthorizationsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeAggregationAuthorizationsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGAggregationAuthorizationListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet">
            <summary>
            Indicates whether the specified Config rules are compliant. If a rule is noncompliant,
            this action returns the number of Amazon Web Services resources that do not comply
            with the rule.
            
             
            <para>
            A rule is compliant if all of the evaluated resources comply with it. It is noncompliant
            if any of these resources do not comply.
            </para><para>
            If Config has no current evaluation results for the rule, it returns <code>INSUFFICIENT_DATA</code>.
            This result might indicate one of the following conditions:
            </para><ul><li><para>
            Config has never invoked an evaluation for the rule. To check whether it has, use
            the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code>
            and <code>LastFailedInvocationTime</code>.
            </para></li><li><para>
            The rule's Lambda function is failing to send evaluation results to Config. Verify
            that the role you assigned to your configuration recorder includes the <code>config:PutEvaluations</code>
            permission. If the rule is a custom rule, verify that the Lambda execution role includes
            the <code>config:PutEvaluations</code> permission.
            </para></li><li><para>
            The rule's Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation
            results. This can occur if the resources were deleted or removed from the rule's scope.
            </para></li></ul><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet.ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>Specify one or more Config rule names to filter the results by rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ComplianceByConfigRules'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeComplianceByConfigRuleResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeComplianceByConfigRuleResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByConfigRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet">
            <summary>
            Indicates whether the specified Amazon Web Services resources are compliant. If a
            resource is noncompliant, this action returns the number of Config rules that the
            resource does not comply with.
            
             
            <para>
            A resource is compliant if it complies with all the Config rules that evaluate it.
            It is noncompliant if it does not comply with one or more of these rules.
            </para><para>
            If Config has no current evaluation results for the resource, it returns <code>INSUFFICIENT_DATA</code>.
            This result might indicate one of the following conditions about the rules that evaluate
            the resource:
            </para><ul><li><para>
            Config has never invoked an evaluation for the rule. To check whether it has, use
            the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code>
            and <code>LastFailedInvocationTime</code>.
            </para></li><li><para>
            The rule's Lambda function is failing to send evaluation results to Config. Verify
            that the role that you assigned to your configuration recorder includes the <code>config:PutEvaluations</code>
            permission. If the rule is a custom rule, verify that the Lambda execution role includes
            the <code>config:PutEvaluations</code> permission.
            </para></li><li><para>
            The rule's Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation
            results. This can occur if the resources were deleted or removed from the rule's scope.
            </para></li></ul><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>INSUFFICIENT_DATA</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource for which you want compliance information.
            You can specify only one resource ID. If you specify a resource ID, you must also
            specify a type for <code>ResourceType</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.ResourceType">
            <summary>
            <para>
            <para>The types of Amazon Web Services resources for which you want compliance information
            (for example, <code>AWS::EC2::Instance</code>). For this action, you can specify that
            the resource type is an Amazon Web Services account by specifying <code>AWS::::Account</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is 10.
            You cannot specify a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ComplianceByResources'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeComplianceByResourceResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeComplianceByResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceByResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet">
            <summary>
            Returns the evaluation results for the specified Config rule. The results indicate
            which Amazon Web Services resources were evaluated by the rule, when each resource
            was last evaluated, and whether each resource complies with the rule.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want compliance information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is 10.
            You cannot specify a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'EvaluationResults'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetComplianceDetailsByConfigRuleResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetComplianceDetailsByConfigRuleResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByConfigRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet">
            <summary>
            Returns the evaluation results for the specified Amazon Web Services resource. The
            results indicate which Config rules were used to evaluate the resource, when each
            rule was last used, and whether the resource complies with each rule.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code>, <code>NON_COMPLIANT</code>, and <code>NOT_APPLICABLE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource for which you want compliance information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource for which you want compliance information.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'EvaluationResults'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetComplianceDetailsByResourceResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetComplianceDetailsByResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceDetailsByResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByConfigRuleCmdlet">
            <summary>
            Returns the number of Config rules that are compliant and noncompliant, up to a maximum
            of 25 for each.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ComplianceSummary'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetComplianceSummaryByConfigRuleResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetComplianceSummaryByConfigRuleResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByResourceTypeCmdlet">
            <summary>
            Returns the number of resources that are compliant and the number that are noncompliant.
            You can specify one or more resource types to get these numbers for each resource
            type. The maximum number returned is 100.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByResourceTypeCmdlet.ResourceType">
            <summary>
            <para>
            <para>Specify one or more resource types to get the number of resources that are compliant
            and the number that are noncompliant for each resource type.</para><para>For this request, you can specify an Amazon Web Services resource type such as <code>AWS::EC2::Instance</code>.
            You can specify that the resource type is an Amazon Web Services account by specifying
            <code>AWS::::Account</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByResourceTypeCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ComplianceSummariesByResourceType'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetComplianceSummaryByResourceTypeResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetComplianceSummaryByResourceTypeResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGComplianceSummaryByResourceTypeCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceType parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceType' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleCmdlet">
            <summary>
            Returns details about your Config rules.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The names of the Config rules for which you want details. If you do not specify any
            names, Config returns details for all your rules.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigRules'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigRulesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet">
            <summary>
            Returns status information for each of your Config managed rules. The status includes
            information such as the last time Config invoked the rule, the last time Config failed
            to invoke the rule, and the related error for the last failure.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config managed rules for which you want status information. If you
            do not specify any names, Config returns status information for all Config managed
            rules that you use.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The number of rule evaluation results that you want returned.</para><para>This parameter is required if the rule limit for your account is more than the default
            of 150 rules.</para><para>For information about requesting a rule limit increase, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">Config
            Limits</a> in the <i>Amazon Web Services General Reference Guide</i>.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigRulesEvaluationStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigRuleEvaluationStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigRuleEvaluationStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigRuleEvaluationStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet">
            <summary>
            Returns the details of one or more configuration aggregators. If the configuration
            aggregator is not specified, this action returns the details for all the configuration
            aggregators associated with the account.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregators.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of configuration aggregators returned on each page. The default
            is maximum. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationAggregators'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigurationAggregatorsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigurationAggregatorsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet">
            <summary>
            Returns status information for sources within an aggregator. The status includes information
            about the last time Config verified authorization between the source account and an
            aggregator account. In case of a failure, the status contains the related error code
            or message.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.UpdateStatus">
            <summary>
            <para>
            <para>Filters the status type.</para><ul><li><para>Valid value FAILED indicates errors while moving data.</para></li><li><para>Valid value SUCCEEDED indicates the data was successfully moved.</para></li><li><para>Valid value OUTDATED indicates the data is not the most recent.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of AggregatorSourceStatus returned on each page. The default is
            maximum. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregatedSourceStatusList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigurationAggregatorSourcesStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigurationAggregatorSourcesStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationAggregatorSourcesStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderCmdlet">
            <summary>
            Returns the details for the specified configuration recorders. If the configuration
            recorder is not specified, this action returns the details for all configuration recorders
            associated with the account.
            
             <note><para>
            Currently, you can specify only one configuration recorder per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>A list of configuration recorder names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationRecorders'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigurationRecordersResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigurationRecordersResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderStatusCmdlet">
            <summary>
            Returns the current status of the specified configuration recorder. If a configuration
            recorder is not specified, this action returns the status of all configuration recorders
            associated with the account.
            
             <note><para>
            Currently, you can specify only one configuration recorder per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderStatusCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>The name(s) of the configuration recorder. If the name is not specified, the action
            returns the current status of all the configuration recorders associated with the
            account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationRecordersStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConfigurationRecorderStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConfigurationRecorderStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConfigurationRecorderStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet">
            <summary>
            Returns a list of one or more conformance packs.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Comma-separated list of conformance pack names for which you want details. If you
            do not specify any names, Config returns details for all your conformance packs. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of conformance packs returned on each page.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackDetails'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConformancePacksResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConformancePacksResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet">
            <summary>
            Returns compliance details for each rule in that conformance pack.
            
             <note><para>
            You must provide exact rule names.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.Filters_ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. <code>INSUFFICIENT_DATA</code>
            is not supported.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.Filters_ConfigRuleName">
            <summary>
            <para>
            <para>Filters the results by Config rule names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Name of the conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of Config rules within a conformance pack are returned on each
            page.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackRuleComplianceList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConformancePackComplianceResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConformancePackComplianceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet">
            <summary>
            Returns compliance details of a conformance pack for all Amazon Web Services resources
            that are monitered by conformance pack.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Filters_ComplianceType">
            <summary>
            <para>
            <para>Filters the results by compliance.</para><para>The allowed values are <code>COMPLIANT</code> and <code>NON_COMPLIANT</code>. <code>INSUFFICIENT_DATA</code>
            is not supported.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Filters_ConfigRuleName">
            <summary>
            <para>
            <para>Filters the results by Config rule names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Name of the conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Filters_ResourceId">
            <summary>
            <para>
            <para>Filters the results by resource IDs.</para><note><para>This is valid only when you provide resource type. If there is no resource type, you
            will see an error.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Filters_ResourceType">
            <summary>
            <para>
            <para>Filters the results by the resource type (for example, <code>"AWS::EC2::Instance"</code>).
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. If you do no specify
            a number, Config uses the default. The default is 100.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackRuleEvaluationResults'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetConformancePackComplianceDetailsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetConformancePackComplianceDetailsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceDetailCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet">
            <summary>
            Returns a list of conformance pack compliance scores. A compliance score is the percentage
            of the number of compliant rule-resource combinations in a conformance pack compared
            to the number of total possible rule-resource combinations in the conformance pack.
            This metric provides you with a high-level view of the compliance state of your conformance
            packs. You can use it to identify, investigate, and understand the level of compliance
            in your conformance packs.
            
             <note><para>
            Conformance packs with no evaluation results will have a compliance score of <code>INSUFFICIENT_DATA</code>.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.Filters_ConformancePackName">
            <summary>
            <para>
            <para>The names of the conformance packs whose compliance scores you want to include in
            the conformance pack compliance score result set. You can include up to 25 conformance
            packs in the <code>ConformancePackNames</code> array of strings, each with a character
            limit of 256 characters for the conformance pack name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.SortBy">
            <summary>
            <para>
            <para>Sorts your conformance pack compliance scores in either ascending or descending order,
            depending on <code>SortOrder</code>.</para><para>By default, conformance pack compliance scores are sorted in alphabetical order by
            name of the conformance pack. Enter <code>SCORE</code>, to sort conformance pack compliance
            scores by the numerical value of the compliance score.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.SortOrder">
            <summary>
            <para>
            <para>Determines the order in which conformance pack compliance scores are sorted. Either
            in ascending or descending order.</para><para>By default, conformance pack compliance scores are sorted in alphabetical order by
            name of the conformance pack. Conformance pack compliance scores are sorted in reverse
            alphabetical order if you enter <code>DESCENDING</code>.</para><para>You can sort conformance pack compliance scores by the numerical value of the compliance
            score by entering <code>SCORE</code> in the <code>SortBy</code> action. When compliance
            scores are sorted by <code>SCORE</code>, conformance packs with a compliance score
            of <code>INSUFFICIENT_DATA</code> will be last when sorting by ascending order and
            first when sorting by descending order.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of conformance pack compliance scores returned on each page.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string in a prior request that you can use to get the paginated
            response for next set of conformance pack compliance scores.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackComplianceScores'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.ListConformancePackComplianceScoresResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.ListConformancePackComplianceScoresResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceScoreListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet">
            <summary>
            Returns compliance details for the conformance pack based on the cumulative compliance
            results of all the rules in that conformance pack.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Names of conformance packs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of conformance packs returned on each page.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned on a previous page that you use to get the next page
            of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackComplianceSummaryList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetConformancePackComplianceSummaryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetConformancePackComplianceSummaryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackComplianceSummaryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet">
            <summary>
            Provides one or more conformance packs deployment status.
            
             <note><para>
            If there are no conformance packs then you will see an empty result.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Comma-separated list of conformance pack names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of conformance packs status returned on each page.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackStatusDetails'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeConformancePackStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeConformancePackStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGConformancePackStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGCustomRulePolicyCmdlet">
            <summary>
            Returns the policy definition containing the logic for your Config Custom Policy rule.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGCustomRulePolicyCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of your Config Custom Policy rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGCustomRulePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'PolicyText'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetCustomRulePolicyResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetCustomRulePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGCustomRulePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelCmdlet">
            <summary>
            Returns details about the specified delivery channel. If a delivery channel is not
            specified, this action returns the details of all delivery channels associated with
            the account.
            
             <note><para>
            Currently, you can specify only one delivery channel per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelCmdlet.DeliveryChannelName">
            <summary>
            <para>
            <para>A list of delivery channel names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DeliveryChannels'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeDeliveryChannelsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeDeliveryChannelsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DeliveryChannelName parameter.
            The -PassThru parameter is deprecated, use -Select '^DeliveryChannelName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelStatusCmdlet">
            <summary>
            Returns the current status of the specified delivery channel. If a delivery channel
            is not specified, this action returns the current status of all delivery channels
            associated with the account.
            
             <note><para>
            Currently, you can specify only one delivery channel per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelStatusCmdlet.DeliveryChannelName">
            <summary>
            <para>
            <para>A list of delivery channel names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'DeliveryChannelsStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeDeliveryChannelStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeDeliveryChannelStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDeliveryChannelStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DeliveryChannelName parameter.
            The -PassThru parameter is deprecated, use -Select '^DeliveryChannelName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet">
            <summary>
            Accepts a resource type and returns a list of resource identifiers for the resources
            of that type. A resource identifier includes the resource type, ID, and (if available)
            the custom resource name. The results consist of resources that Config has discovered,
            including those that Config is not currently recording. You can narrow the results
            to include only resources that have specific resource IDs or a resource name.
            
             <note><para>
            You can specify either resource IDs or a resource name, but not both, in the same
            request.
            </para></note><para>
            The response is paginated. By default, Config lists 100 resource identifiers on each
            page. You can customize this number with the <code>limit</code> parameter. The response
            includes a <code>nextToken</code> string. To get the next page of results, run the
            request again and specify the string for the <code>nextToken</code> parameter.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.IncludeDeletedResource">
            <summary>
            <para>
            <para>Specifies whether Config includes deleted resources in the results. By default, deleted
            resources are not included.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.ResourceId">
            <summary>
            <para>
            <para>The IDs of only those resources that you want Config to list in the response. If you
            do not specify this parameter, Config lists all resources of the specified type that
            it has discovered.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.ResourceName">
            <summary>
            <para>
            <para>The custom name of only those resources that you want Config to list in the response.
            If you do not specify this parameter, Config lists all resources of the specified
            type that it has discovered.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of resources that you want Config to list in the response.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of resource identifiers returned on each page. The default is 100.
            You cannot specify a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ResourceIdentifiers'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.ListDiscoveredResourcesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.ListDiscoveredResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceName parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet">
            <summary>
            Amazon.ConfigService.IAmazonConfigService.GetDiscoveredResourceCounts<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet.ResourceType">
            <summary>
            <para>
            <para>The comma-separated list that specifies the resource types that you want Config to
            return (for example, <code>"AWS::EC2::Instance"</code>, <code>"AWS::IAM::User"</code>).</para><para>If a value for <code>resourceTypes</code> is not specified, Config returns all resource
            types that Config is recording in the region for your account.</para><note><para>If the configuration recorder is turned off, Config returns an empty list of <a>ResourceCount</a>
            objects. If the configuration recorder is not recording a specific resource type (for
            example, S3 buckets), that resource type is not returned in the list of <a>ResourceCount</a>
            objects.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of <a>ResourceCount</a> objects returned on each page. The default
            is 100. You cannot specify a number greater than 100. If you specify 0, Config uses
            the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ResourceCounts'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetDiscoveredResourceCountsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetDiscoveredResourceCountsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGDiscoveredResourceCountCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGGetResourceConfigBatchCmdlet">
            <summary>
            Returns the <code>BaseConfigurationItem</code> for one or more requested resources.
            The operation also returns a list of resources that are not processed in the current
            request. If there are no unprocessed resources, the operation returns an empty unprocessedResourceKeys
            list. 
            
             <note><ul><li><para>
            The API does not return results for deleted resources.
            </para></li><li><para>
             The API does not return any tags for the requested resources. This information is
            filtered out of the supplementaryConfiguration section of the API response.
            </para></li></ul></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGGetResourceConfigBatchCmdlet.ResourceKey">
            <summary>
            <para>
            <para>A list of resource keys to be processed with the current request. Each element in
            the list consists of the resource type and resource ID.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGGetResourceConfigBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.BatchGetResourceConfigResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.BatchGetResourceConfigResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGGetResourceConfigBatchCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceKey parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceKey' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet">
            <summary>
            Returns a list of organization Config rules. 
            
             <note><para>
            When you specify the limit and the next token, you receive a paginated response.
            </para><para>
            Limit and next token are not applicable if you specify organization Config rule names.
            It is only applicable, when you request all the organization Config rules.
            </para><para><i>For accounts within an organzation</i></para><para>
            If you deploy an organizational rule or conformance pack in an organization administrator
            account, and then establish a delegated administrator and deploy an organizational
            rule or conformance pack in the delegated administrator account, you won't be able
            to see the organizational rule or conformance pack in the organization administrator
            account from the delegated administrator account or see the organizational rule or
            conformance pack in the delegated administrator account from organization administrator
            account. The <code>DescribeOrganizationConfigRules</code> and <code>DescribeOrganizationConformancePacks</code>
            APIs can only see and interact with the organization-related resource that were deployed
            from within the account calling those APIs.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The names of organization Config rules for which you want details. If you do not specify
            any names, Config returns details for all your organization Config rules.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of organization Config rules returned on each page. If you do no
            specify a number, Config uses the default. The default is 100.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConfigRules'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeOrganizationConfigRulesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeOrganizationConfigRulesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet">
            <summary>
            Returns detailed status for each member account within an organization for a given
            organization Config rule.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the member account within an organization.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.Filters_MemberAccountRuleStatus">
            <summary>
            <para>
            <para>Indicates deployment status for Config rule in the member account. When management
            account calls <code>PutOrganizationConfigRule</code> action for the first time, Config
            rule status is created in the member account. When management account calls <code>PutOrganizationConfigRule</code>
            action for the second time, Config rule status is updated in the member account. Config
            rule status is deleted when the management account deletes <code>OrganizationConfigRule</code>
            and disables service access for <code>config-multiaccountsetup.amazonaws.com</code>.
            </para><para>Config sets the state of the rule to:</para><ul><li><para><code>CREATE_SUCCESSFUL</code> when Config rule has been created in the member account.</para></li><li><para><code>CREATE_IN_PROGRESS</code> when Config rule is being created in the member account.</para></li><li><para><code>CREATE_FAILED</code> when Config rule creation has failed in the member account.</para></li><li><para><code>DELETE_FAILED</code> when Config rule deletion has failed in the member account.</para></li><li><para><code>DELETE_IN_PROGRESS</code> when Config rule is being deleted in the member account.</para></li><li><para><code>DELETE_SUCCESSFUL</code> when Config rule has been deleted in the member account.</para></li><li><para><code>UPDATE_SUCCESSFUL</code> when Config rule has been updated in the member account.</para></li><li><para><code>UPDATE_IN_PROGRESS</code> when Config rule is being updated in the member account.</para></li><li><para><code>UPDATE_FAILED</code> when Config rule deletion has failed in the member account.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The name of your organization Config rule for which you want status details for member
            accounts.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of <code>OrganizationConfigRuleDetailedStatus</code> returned on
            each page. If you do not specify a number, Config uses the default. The default is
            100.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConfigRuleDetailedStatus'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetOrganizationConfigRuleDetailedStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetOrganizationConfigRuleDetailedStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleDetailedStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet">
            <summary>
            Provides organization Config rule deployment status for an organization.
            
             <note><para>
            The status is not considered successful until organization Config rule is successfully
            deployed in all the member accounts with an exception of excluded accounts.
            </para><para>
            When you specify the limit and the next token, you receive a paginated response. Limit
            and next token are not applicable if you specify organization Config rule names. It
            is only applicable, when you request all the organization Config rules.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The names of organization Config rules for which you want status details. If you do
            not specify any names, Config returns details for all your organization Config rules.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of <code>OrganizationConfigRuleStatuses</code> returned on each
            page. If you do no specify a number, Config uses the default. The default is 100.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConfigRuleStatuses'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeOrganizationConfigRuleStatusesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeOrganizationConfigRuleStatusesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConfigRuleStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet">
            <summary>
            Returns a list of organization conformance packs. 
            
             <note><para>
            When you specify the limit and the next token, you receive a paginated response. 
            </para><para>
            Limit and next token are not applicable if you specify organization conformance packs
            names. They are only applicable, when you request all the organization conformance
            packs. 
            </para><para><i>For accounts within an organzation</i></para><para>
            If you deploy an organizational rule or conformance pack in an organization administrator
            account, and then establish a delegated administrator and deploy an organizational
            rule or conformance pack in the delegated administrator account, you won't be able
            to see the organizational rule or conformance pack in the organization administrator
            account from the delegated administrator account or see the organizational rule or
            conformance pack in the delegated administrator account from organization administrator
            account. The <code>DescribeOrganizationConfigRules</code> and <code>DescribeOrganizationConformancePacks</code>
            APIs can only see and interact with the organization-related resource that were deployed
            from within the account calling those APIs.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.OrganizationConformancePackName">
            <summary>
            <para>
            <para>The name that you assign to an organization conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of organization config packs returned on each page. If you do no
            specify a number, Config uses the default. The default is 100.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned on a previous page that you use to get the next page
            of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConformancePacks'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeOrganizationConformancePacksResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeOrganizationConformancePacksResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet">
            <summary>
            Returns detailed status for each member account within an organization for a given
            organization conformance pack.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.Filters_AccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the member account within an organization.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.OrganizationConformancePackName">
            <summary>
            <para>
            <para>The name of organization conformance pack for which you want status details for member
            accounts.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.Filters_Status">
            <summary>
            <para>
            <para>Indicates deployment status for conformance pack in a member account. When management
            account calls <code>PutOrganizationConformancePack</code> action for the first time,
            conformance pack status is created in the member account. When management account
            calls <code>PutOrganizationConformancePack</code> action for the second time, conformance
            pack status is updated in the member account. Conformance pack status is deleted when
            the management account deletes <code>OrganizationConformancePack</code> and disables
            service access for <code>config-multiaccountsetup.amazonaws.com</code>. </para><para> Config sets the state of the conformance pack to:</para><ul><li><para><code>CREATE_SUCCESSFUL</code> when conformance pack has been created in the member
            account. </para></li><li><para><code>CREATE_IN_PROGRESS</code> when conformance pack is being created in the member
            account.</para></li><li><para><code>CREATE_FAILED</code> when conformance pack creation has failed in the member
            account.</para></li><li><para><code>DELETE_FAILED</code> when conformance pack deletion has failed in the member
            account.</para></li><li><para><code>DELETE_IN_PROGRESS</code> when conformance pack is being deleted in the member
            account.</para></li><li><para><code>DELETE_SUCCESSFUL</code> when conformance pack has been deleted in the member
            account. </para></li><li><para><code>UPDATE_SUCCESSFUL</code> when conformance pack has been updated in the member
            account.</para></li><li><para><code>UPDATE_IN_PROGRESS</code> when conformance pack is being updated in the member
            account.</para></li><li><para><code>UPDATE_FAILED</code> when conformance pack deletion has failed in the member
            account.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of <code>OrganizationConformancePackDetailedStatuses</code> returned
            on each page. If you do not specify a number, Config uses the default. The default
            is 100. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned on a previous page that you use to get the next page
            of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConformancePackDetailedStatuses'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetOrganizationConformancePackDetailedStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetOrganizationConformancePackDetailedStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackDetailedStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet">
            <summary>
            Provides organization conformance pack deployment status for an organization. 
            
             <note><para>
            The status is not considered successful until organization conformance pack is successfully
            deployed in all the member accounts with an exception of excluded accounts.
            </para><para>
            When you specify the limit and the next token, you receive a paginated response. Limit
            and next token are not applicable if you specify organization conformance pack names.
            They are only applicable, when you request all the organization conformance packs.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.OrganizationConformancePackName">
            <summary>
            <para>
            <para>The names of organization conformance packs for which you want status details. If
            you do not specify any names, Config returns details for all your organization conformance
            packs. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of OrganizationConformancePackStatuses returned on each page. If
            you do no specify a number, Config uses the default. The default is 100. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned on a previous page that you use to get the next page
            of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConformancePackStatuses'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeOrganizationConformancePackStatusesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeOrganizationConformancePackStatusesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationConformancePackStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationCustomRulePolicyCmdlet">
            <summary>
            Returns the policy definition containing the logic for your organization Config Custom
            Policy rule.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationCustomRulePolicyCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The name of your organization Config Custom Policy rule. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationCustomRulePolicyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'PolicyText'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetOrganizationCustomRulePolicyResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetOrganizationCustomRulePolicyResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGOrganizationCustomRulePolicyCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGPendingAggregationRequestListCmdlet">
            <summary>
            Returns a list of all pending aggregation requests.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGPendingAggregationRequestListCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of evaluation results returned on each page. The default is maximum.
            If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGPendingAggregationRequestListCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGPendingAggregationRequestListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'PendingAggregationRequests'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribePendingAggregationRequestsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribePendingAggregationRequestsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGPendingAggregationRequestListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationConfigurationCmdlet">
            <summary>
            Returns the details of one or more remediation configurations.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationConfigurationCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>A list of Config rule names of remediation configurations for which you want details.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RemediationConfigurations'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeRemediationConfigurationsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeRemediationConfigurationsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationConfigurationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet">
            <summary>
            Returns the details of one or more remediation exceptions. A detailed view of a remediation
            exception for a set of resources that includes an explanation of an exception and
            the time when the exception will be deleted. When you specify the limit and the next
            token, you receive a paginated response. 
            
             <note><para>
            Config generates a remediation exception when a problem occurs executing a remediation
            action to a specific resource. Remediation exceptions blocks auto-remediation until
            the exception is cleared.
            </para><para>
            When you specify the limit and the next token, you receive a paginated response. 
            </para><para>
            Limit and next token are not applicable if you request resources in batch. It is only
            applicable, when you request all resources.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.ResourceKey">
            <summary>
            <para>
            <para>An exception list of resource exception keys to be processed with the current request.
            Config adds exception for each resource key. For example, Config adds 3 exceptions
            for 3 resource keys. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of RemediationExceptionResourceKey returned on each page. The default
            is 25. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RemediationExceptions'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeRemediationExceptionsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeRemediationExceptionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExceptionCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet">
            <summary>
            Provides a detailed view of a Remediation Execution for a set of resources including
            state, timestamps for when steps for the remediation execution occur, and any error
            messages for steps that have failed. When you specify the limit and the next token,
            you receive a paginated response.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>A list of Config rule names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.ResourceKey">
            <summary>
            <para>
            <para>A list of resource keys to be processed with the current request. Each element in
            the list consists of the resource type and resource ID. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of RemediationExecutionStatuses returned on each page. The default
            is maximum. If you specify 0, Config uses the default. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RemediationExecutionStatuses'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeRemediationExecutionStatusResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeRemediationExecutionStatusResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRemediationExecutionStatusCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet">
            <summary>
            Returns a list of <code>ConfigurationItems</code> for the specified resource. The
            list contains details about each state of the resource during the specified time interval.
            If you specified a retention period to retain your <code>ConfigurationItems</code>
            between a minimum of 30 days and a maximum of 7 years (2557 days), Config returns
            the <code>ConfigurationItems</code> for the specified retention period. 
            
             
            <para>
            The response is paginated. By default, Config returns a limit of 10 configuration
            items per page. You can customize this number with the <code>limit</code> parameter.
            The response includes a <code>nextToken</code> string. To get the next page of results,
            run the request again and specify the string for the <code>nextToken</code> parameter.
            </para><note><para>
            Each call to the API is limited to span a duration of seven days. It is likely that
            the number of records returned is smaller than the specified <code>limit</code>. In
            such cases, you can make another call, using the <code>nextToken</code>.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.ChronologicalOrder">
            <summary>
            <para>
            <para>The chronological order for configuration items listed. By default, the results are
            listed in reverse chronological order.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.EarlierTime">
            <summary>
            <para>
            <para>The time stamp that indicates an earlier time. If not specified, the action returns
            paginated results that contain configuration items that start when the first configuration
            item was recorded.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.LaterTime">
            <summary>
            <para>
            <para>The time stamp that indicates a later time. If not specified, current time is taken.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.ResourceId">
            <summary>
            <para>
            <para>The ID of the resource (for example., <code>sg-xxxxxx</code>).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.ResourceType">
            <summary>
            <para>
            <para>The resource type.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of configuration items returned on each page. The default is 10.
            You cannot specify a number greater than 100. If you specify 0, Config uses the default.</para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationItems'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetResourceConfigHistoryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetResourceConfigHistoryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceConfigHistoryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet">
            <summary>
            List the tags for Config resource.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) that identifies the resource for which to list the
            tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code>
            and <code>AggregatorAuthorization</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of tags returned on each page. The limit maximum is 50. You cannot
            specify a number greater than 50. If you specify 0, Config uses the default. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Tags'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.ListTagsForResourceResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.ListTagsForResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGResourceTagCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGRetentionConfigurationCmdlet">
            <summary>
            Returns the details of one or more retention configurations. If the retention configuration
            name is not specified, this action returns the details for all the retention configurations
            for that account.
            
             <note><para>
            Currently, Config supports only one retention configuration per region in your account.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRetentionConfigurationCmdlet.RetentionConfigurationName">
            <summary>
            <para>
            <para>A list of names of retention configurations for which you want details. If you do
            not specify a name, Config returns details for all the retention configurations for
            that account.</para><note><para>Currently, Config supports only one retention configuration per region in your account.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRetentionConfigurationCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned on a previous page that you use to get
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRetentionConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RetentionConfigurations'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DescribeRetentionConfigurationsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DescribeRetentionConfigurationsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGRetentionConfigurationCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryCmdlet">
            <summary>
            Returns the details of a specific stored query.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryCmdlet.QueryName">
            <summary>
            <para>
            <para>The name of the query.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'StoredQuery'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.GetStoredQueryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.GetStoredQueryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the QueryName parameter.
            The -PassThru parameter is deprecated, use -Select '^QueryName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryListCmdlet">
            <summary>
            Lists the stored queries for a single Amazon Web Services account and a single Amazon
            Web Services Region. The default is 100.<br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of results to be returned with a single call.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryListCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned in a previous request that you use to request the next
            page of results in a paginated response.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'StoredQueryMetadata'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.ListStoredQueriesResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.ListStoredQueriesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.GetCFGStoredQueryListCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet">
            <summary>
            Deletes the authorization granted to the specified configuration aggregator account
            in a specified region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet.AuthorizedAccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the account authorized to aggregate data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet.AuthorizedAwsRegion">
            <summary>
            <para>
            <para>The region authorized to collect aggregated data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteAggregationAuthorizationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AuthorizedAccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AuthorizedAccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGAggregationAuthorizationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigRuleCmdlet">
            <summary>
            Deletes the specified Config rule and all of its evaluation results.
            
             
            <para>
            Config sets the state of a rule to <code>DELETING</code> until the deletion is complete.
            You cannot update a rule while it is in this state. If you make a <code>PutConfigRule</code>
            or <code>DeleteConfigRule</code> request for the rule, you will receive a <code>ResourceInUseException</code>.
            </para><para>
            You can check the state of a rule by using the <code>DescribeConfigRules</code> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigRuleCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteConfigRuleResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationAggregatorCmdlet">
            <summary>
            Deletes the specified configuration aggregator and the aggregated data associated
            with the aggregator.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationAggregatorCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationAggregatorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteConfigurationAggregatorResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationAggregatorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationAggregatorName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationAggregatorName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationAggregatorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationRecorderCmdlet">
            <summary>
            Deletes the configuration recorder.
            
             
            <para>
            After the configuration recorder is deleted, Config will not record resource configuration
            changes until you create a new configuration recorder.
            </para><para>
            This action does not delete the configuration information that was previously recorded.
            You will be able to access the previously recorded information by using the <code>GetResourceConfigHistory</code>
            action, but you will not be able to access this information in the Config console
            until you create a new configuration recorder.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationRecorderCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>The name of the configuration recorder to be deleted. You can retrieve the name of
            your configuration recorder by using the <code>DescribeConfigurationRecorders</code>
            action.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationRecorderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteConfigurationRecorderResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationRecorderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConfigurationRecorderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConformancePackCmdlet">
            <summary>
            Deletes the specified conformance pack and all the Config rules, remediation actions,
            and all evaluation results within that conformance pack.
            
             
            <para>
            Config sets the conformance pack to <code>DELETE_IN_PROGRESS</code> until the deletion
            is complete. You cannot update a conformance pack while it is in this state.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConformancePackCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>Name of the conformance pack you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteConformancePackResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGConformancePackCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGDeliveryChannelCmdlet">
            <summary>
            Deletes the delivery channel.
            
             
            <para>
            Before you can delete the delivery channel, you must stop the configuration recorder
            by using the <a>StopConfigurationRecorder</a> action.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGDeliveryChannelCmdlet.DeliveryChannelName">
            <summary>
            <para>
            <para>The name of the delivery channel to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGDeliveryChannelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteDeliveryChannelResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGDeliveryChannelCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DeliveryChannelName parameter.
            The -PassThru parameter is deprecated, use -Select '^DeliveryChannelName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGDeliveryChannelCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGEvaluationResultCmdlet">
            <summary>
            Deletes the evaluation results for the specified Config rule. You can specify one
            Config rule per request. After you delete the evaluation results, you can call the
            <a>StartConfigRulesEvaluation</a> API to start evaluating your Amazon Web Services
            resources against the rule.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGEvaluationResultCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want to delete the evaluation results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGEvaluationResultCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteEvaluationResultsResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGEvaluationResultCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGEvaluationResultCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConfigRuleCmdlet">
            <summary>
            Deletes the specified organization Config rule and all of its evaluation results from
            all member accounts in that organization. 
            
             
            <para>
            Only a management account and a delegated administrator account can delete an organization
            Config rule. When calling this API with a delegated administrator, you must ensure
            Organizations <code>ListDelegatedAdministrator</code> permissions are added.
            </para><para>
            Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete.
            You cannot update a rule while it is in this state.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConfigRuleCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The name of organization Config rule that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteOrganizationConfigRuleResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConfigRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConfigRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConformancePackCmdlet">
            <summary>
            Deletes the specified organization conformance pack and all of the Config rules and
            remediation actions from all member accounts in that organization. 
            
             
            <para>
             Only a management account or a delegated administrator account can delete an organization
            conformance pack. When calling this API with a delegated administrator, you must ensure
            Organizations <code>ListDelegatedAdministrator</code> permissions are added.
            </para><para>
            Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion
            is complete. You cannot update a conformance pack while it is in this state. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConformancePackCmdlet.OrganizationConformancePackName">
            <summary>
            <para>
            <para>The name of organization conformance pack that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteOrganizationConformancePackResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGOrganizationConformancePackCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet">
            <summary>
            Deletes pending authorization requests for a specified aggregator account in a specified
            region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet.RequesterAccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the account requesting to aggregate data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet.RequesterAwsRegion">
            <summary>
            <para>
            <para>The region requesting to aggregate data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeletePendingAggregationRequestResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RequesterAccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^RequesterAccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGPendingAggregationRequestCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet">
            <summary>
            Deletes the remediation configuration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want to delete remediation configuration.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of a resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteRemediationConfigurationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationConfigurationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet">
            <summary>
            Deletes one or more remediation exceptions mentioned in the resource keys.
            
             <note><para>
            Config generates a remediation exception when a problem occurs executing a remediation
            action to a specific resource. Remediation exceptions blocks auto-remediation until
            the exception is cleared.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want to delete remediation exception configuration.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet.ResourceKey">
            <summary>
            <para>
            <para>An exception list of resource exception keys to be processed with the current request.
            Config adds exception for each resource key. For example, Config adds 3 exceptions
            for 3 resource keys. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedBatches'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteRemediationExceptionsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DeleteRemediationExceptionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRemediationExceptionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet">
            <summary>
            Records the configuration state for a custom resource that has been deleted. This
            API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve
            the ConfigurationItems recorded for this resource in your Config History.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet.ResourceId">
            <summary>
            <para>
            <para>Unique identifier of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteResourceConfigResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceId parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceConfigCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet">
            <summary>
            Deletes specified tags from a resource.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) that identifies the resource for which to list the
            tags. Currently, the supported resources are <code>ConfigRule</code>, <code>ConfigurationAggregator</code>
            and <code>AggregatorAuthorization</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>The keys of the tags to be removed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRetentionConfigurationCmdlet">
            <summary>
            Deletes the retention configuration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRetentionConfigurationCmdlet.RetentionConfigurationName">
            <summary>
            <para>
            <para>The name of the retention configuration to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRetentionConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteRetentionConfigurationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRetentionConfigurationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RetentionConfigurationName parameter.
            The -PassThru parameter is deprecated, use -Select '^RetentionConfigurationName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGRetentionConfigurationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGStoredQueryCmdlet">
            <summary>
            Deletes the stored query for a single Amazon Web Services account and a single Amazon
            Web Services Region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGStoredQueryCmdlet.QueryName">
            <summary>
            <para>
            <para>The name of the query that you want to delete.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGStoredQueryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeleteStoredQueryResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGStoredQueryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the QueryName parameter.
            The -PassThru parameter is deprecated, use -Select '^QueryName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.RemoveCFGStoredQueryCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet">
            <summary>
            Accepts a structured query language (SQL) SELECT command and an aggregator to query
            configuration state of Amazon Web Services resources across multiple accounts and
            regions, performs the corresponding search, and returns resource configurations matching
            the properties.
            
             
            <para>
            For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"><b>Query Components</b></a> section in the Config Developer Guide.
            </para><note><para>
            If you run an aggregation query (i.e., using <code>GROUP BY</code> or using aggregate
            functions such as <code>COUNT</code>; e.g., <code>SELECT resourceId, COUNT(*) WHERE
            resourceType = 'AWS::IAM::Role' GROUP BY resourceId</code>) and do not specify the
            <code>MaxResults</code> or the <code>Limit</code> query parameters, the default page
            size is set to 500.
            </para><para>
            If you run a non-aggregation query (i.e., not using <code>GROUP BY</code> or aggregate
            function; e.g., <code>SELECT * WHERE resourceType = 'AWS::IAM::Role'</code>) and do
            not specify the <code>MaxResults</code> or the <code>Limit</code> query parameters,
            the default page size is set to 25.
            </para></note><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.Expression">
            <summary>
            <para>
            <para>The SQL query SELECT command. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of query results returned on each page. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of query results returned on each page. Config also allows the
            Limit request parameter.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.NextToken">
            <summary>
            <para>
            <para>The nextToken string returned in a previous request that you use to request the next
            page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Results'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.SelectAggregateResourceConfigResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.SelectAggregateResourceConfigResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationAggregatorName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationAggregatorName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGAggregateResourceConfigCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet">
            <summary>
            Accepts a structured query language (SQL) <code>SELECT</code> command, performs the
            corresponding search, and returns resource configurations matching the properties.
            
             
            <para>
            For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"><b>Query Components</b></a> section in the <i>Config Developer Guide</i>.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.Expression">
            <summary>
            <para>
            <para>The SQL query <code>SELECT</code> command.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.Limit">
            <summary>
            <para>
            <para>The maximum number of query results returned on each page. </para>
            </para>
            <para>
            <br/><b>Note:</b> In AWSPowerShell and AWSPowerShell.NetCore this parameter is used to limit the total number of items returned by the cmdlet.
            <br/>In AWS.Tools this parameter is simply passed to the service to specify how many items should be returned by each service call.
            <br/>Pipe the output of this cmdlet into Select-Object -First to terminate retrieving data pages early and control the number of items returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.NextToken">
            <summary>
            <para>
            <para>The <code>nextToken</code> string returned in a previous request that you use to request
            the next page of results in a paginated response. </para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-NextToken $null' for the first call and '-NextToken $AWSHistory.LastServiceResponse.NextToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Results'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.SelectResourceConfigResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.SelectResourceConfigResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Expression parameter.
            The -PassThru parameter is deprecated, use -Select '^Expression' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SelectCFGResourceConfigCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of NextToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigRulesEvaluationCmdlet">
            <summary>
            Runs an on-demand evaluation for the specified Config rules against the last known
            configuration state of the resources. Use <code>StartConfigRulesEvaluation</code>
            when you want to test that a rule you updated is working as expected. <code>StartConfigRulesEvaluation</code>
            does not re-record the latest configuration state for your resources. It re-runs an
            evaluation against the last known state of your resources. 
            
             
            <para>
            You can specify up to 25 Config rules per request. 
            </para><para>
            An existing <code>StartConfigRulesEvaluation</code> call for the specified rules must
            complete before you can call the API again. If you chose to have Config stream to
            an Amazon SNS topic, you will receive a <code>ConfigRuleEvaluationStarted</code> notification
            when the evaluation starts.
            </para><note><para>
            You don't need to call the <code>StartConfigRulesEvaluation</code> API to run an evaluation
            for a new rule. When you create a rule, Config evaluates your resources against the
            rule automatically. 
            </para></note><para>
            The <code>StartConfigRulesEvaluation</code> API is useful if you want to run on-demand
            evaluations, such as the following example:
            </para><ol><li><para>
            You have a custom rule that evaluates your IAM resources every 24 hours.
            </para></li><li><para>
            You update your Lambda function to add additional conditions to your rule.
            </para></li><li><para>
            Instead of waiting for the next periodic evaluation, you call the <code>StartConfigRulesEvaluation</code>
            API.
            </para></li><li><para>
            Config invokes your Lambda function and evaluates your IAM resources.
            </para></li><li><para>
            Your custom rule will still run periodic evaluations every 24 hours.
            </para></li></ol>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigRulesEvaluationCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The list of names of Config rules that you want to run evaluations for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigRulesEvaluationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.StartConfigRulesEvaluationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigRulesEvaluationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigRulesEvaluationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigurationRecorderCmdlet">
            <summary>
            Starts recording configurations of the Amazon Web Services resources you have selected
            to record in your Amazon Web Services account.
            
             
            <para>
            You must have created at least one delivery channel to successfully start the configuration
            recorder.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigurationRecorderCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>The name of the recorder object that records each configuration change made to the
            resources.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigurationRecorderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.StartConfigurationRecorderResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigurationRecorderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGConfigurationRecorderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet">
            <summary>
            Runs an on-demand remediation for the specified Config rules against the last known
            remediation configuration. It runs an execution against the current state of your
            resources. Remediation execution is asynchronous.
            
             
            <para>
            You can specify up to 100 resource keys per request. An existing StartRemediationExecution
            call for the specified resource keys must complete before you can call the API again.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The list of names of Config rules that you want to run remediation execution for.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet.ResourceKey">
            <summary>
            <para>
            <para>A list of resource keys to be processed with the current request. Each element in
            the list consists of the resource type and resource ID. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.StartRemediationExecutionResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.StartRemediationExecutionResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceKey parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceKey' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StartCFGRemediationExecutionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.StopCFGConfigurationRecorderCmdlet">
            <summary>
            Stops recording configurations of the Amazon Web Services resources you have selected
            to record in your Amazon Web Services account.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StopCFGConfigurationRecorderCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>The name of the recorder object that records each configuration change made to the
            resources.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StopCFGConfigurationRecorderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.StopConfigurationRecorderResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StopCFGConfigurationRecorderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.StopCFGConfigurationRecorderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.SubmitCFGConfigSnapshotDeliveryCmdlet">
            <summary>
            Schedules delivery of a configuration snapshot to the Amazon S3 bucket in the specified
            delivery channel. After the delivery has started, Config sends the following notifications
            using an Amazon SNS topic that you have specified.
            
             <ul><li><para>
            Notification of the start of the delivery.
            </para></li><li><para>
            Notification of the completion of the delivery, if the delivery was successfully completed.
            </para></li><li><para>
            Notification of delivery failure, if the delivery failed.
            </para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SubmitCFGConfigSnapshotDeliveryCmdlet.DeliveryChannelName">
            <summary>
            <para>
            <para>The name of the delivery channel through which the snapshot is delivered.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SubmitCFGConfigSnapshotDeliveryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigSnapshotId'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.DeliverConfigSnapshotResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.DeliverConfigSnapshotResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SubmitCFGConfigSnapshotDeliveryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DeliveryChannelName parameter.
            The -PassThru parameter is deprecated, use -Select '^DeliveryChannelName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.SubmitCFGConfigSnapshotDeliveryCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet">
            <summary>
            Authorizes the aggregator account and region to collect data from the source account
            and region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.AuthorizedAccountId">
            <summary>
            <para>
            <para>The 12-digit account ID of the account authorized to aggregate data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.AuthorizedAwsRegion">
            <summary>
            <para>
            <para>The region authorized to collect aggregated data.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.Tag">
            <summary>
            <para>
            <para>An array of tag object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'AggregationAuthorization'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutAggregationAuthorizationResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutAggregationAuthorizationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the AuthorizedAccountId parameter.
            The -PassThru parameter is deprecated, use -Select '^AuthorizedAccountId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGAggregationAuthorizationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet">
            <summary>
            Adds or updates an Config rule to evaluate if your Amazon Web Services resources comply
            with your desired configurations. For information on how many Config rules you can
            have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"><b>Service Limits</b></a> in the <i>Config Developer Guide</i>.
            
             
            <para>
            There are two types of rules: Config Custom Rules and Config Managed Rules. You can
            use <code>PutConfigRule</code> to create both Config custom rules and Config managed
            rules.
            </para><para>
            Custom rules are rules that you can create using either Guard or Lambda functions.
            Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard
            GitHub Repository</a>) is a policy-as-code language that allows you to write policies
            that are enforced by Config Custom Policy rules. Lambda uses custom code that you
            upload to evaluate a custom rule. If you are adding a new Custom Lambda rule, you
            first need to create an Lambda function that the rule invokes to evaluate your resources.
            When you use <code>PutConfigRule</code> to add a Custom Lambda rule to Config, you
            must specify the Amazon Resource Name (ARN) that Lambda assigns to the function. You
            specify the ARN in the <code>SourceIdentifier</code> key. This key is part of the
            <code>Source</code> object, which is part of the <code>ConfigRule</code> object. 
            </para><para>
            Managed rules are predefined, customizable rules created by Config. For a list of
            managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List
            of Config Managed Rules</a>. If you are adding an Config managed rule, you must specify
            the rule's identifier for the <code>SourceIdentifier</code> key.
            </para><para>
            For any new rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code>
            object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>.
            These values are generated by Config for new rules.
            </para><para>
            If you are updating a rule that you added previously, you can specify the rule by
            <code>ConfigRuleName</code>, <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code>
            in the <code>ConfigRule</code> data type that you use in this request.
            </para><para>
            For more information about developing and using Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating
            Amazon Web Services resource Configurations with Config</a> in the <i>Config Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Scope_ComplianceResourceId">
            <summary>
            <para>
            <para>The ID of the only Amazon Web Services resource that you want to trigger an evaluation
            for the rule. If you specify a resource ID, you must specify one resource type for
            <code>ComplianceResourceTypes</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Scope_ComplianceResourceType">
            <summary>
            <para>
            <para>The resource types of only those Amazon Web Services resources that you want to trigger
            an evaluation for the rule. You can only specify one type if you also specify a resource
            ID for <code>ComplianceResourceId</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_ConfigRuleArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_ConfigRuleId">
            <summary>
            <para>
            <para>The ID of the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_ConfigRuleName">
            <summary>
            <para>
            <para>The name that you assign to the Config rule. The name is required if you are adding
            a new rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_ConfigRuleState">
            <summary>
            <para>
            <para>Indicates whether the Config rule is active or is currently being deleted by Config.
            It can also indicate the evaluation status for the Config rule.</para><para>Config sets the state of the rule to <code>EVALUATING</code> temporarily after you
            use the <code>StartConfigRulesEvaluation</code> request to evaluate your resources
            against the Config rule.</para><para>Config sets the state of the rule to <code>DELETING_RESULTS</code> temporarily after
            you use the <code>DeleteEvaluationResults</code> request to delete the current evaluation
            results for the Config rule.</para><para>Config temporarily sets the state of a rule to <code>DELETING</code> after you use
            the <code>DeleteConfigRule</code> request to delete the rule. After Config deletes
            the rule, the rule and all of its evaluations are erased and are no longer available.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_CreatedBy">
            <summary>
            <para>
            <para>Service principal name of the service that created the rule.</para><note><para>The field is populated only if the service-linked rule is created by a service. The
            field is empty if you create your own rule.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_Description">
            <summary>
            <para>
            <para>The description that you provide for the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.CustomPolicyDetails_EnableDebugLogDelivery">
            <summary>
            <para>
            <para>The boolean expression for enabling debug logging for your Config Custom Policy rule.
            The default value is <code>false</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_InputParameter">
            <summary>
            <para>
            <para>A string, in JSON format, that is passed to the Config rule Lambda function.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.ConfigRule_MaximumExecutionFrequency">
            <summary>
            <para>
            <para>The maximum frequency with which Config runs evaluations for a rule. You can specify
            a value for <code>MaximumExecutionFrequency</code> when:</para><ul><li><para>This is for an Config managed rule that is triggered at a periodic frequency.</para></li><li><para>Your custom rule is triggered when Config delivers the configuration snapshot. For
            more information, see <a>ConfigSnapshotDeliveryProperties</a>.</para></li></ul><note><para>By default, rules with a periodic trigger are evaluated every 24 hours. To change
            the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code>
            parameter.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Source_Owner">
            <summary>
            <para>
            <para>Indicates whether Amazon Web Services or the customer owns and manages the Config
            rule.</para><para>Config Managed Rules are predefined rules owned by Amazon Web Services. For more information,
            see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Config
            Managed Rules</a> in the <i>Config developer guide</i>.</para><para>Config Custom Rules are rules that you can develop either with Guard (<code>CUSTOM_POLICY</code>)
            or Lambda (<code>CUSTOM_LAMBDA</code>). For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html">Config
            Custom Rules </a> in the <i>Config developer guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.CustomPolicyDetails_PolicyRuntime">
            <summary>
            <para>
            <para>The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language
            that allows you to write policies that are enforced by Config Custom Policy rules.
            For more information about Guard, see the <a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard
            GitHub Repository</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.CustomPolicyDetails_PolicyText">
            <summary>
            <para>
            <para>The policy definition containing the logic for your Config Custom Policy rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Source_SourceDetail">
            <summary>
            <para>
            <para>Provides the source and the message types that cause Config to evaluate your Amazon
            Web Services resources against a rule. It also provides the frequency with which you
            want Config to run evaluations for the rule if the trigger type is periodic.</para><para>If the owner is set to <code>CUSTOM_POLICY</code>, the only acceptable values for
            the Config rule trigger message type are <code>ConfigurationItemChangeNotification</code>
            and <code>OversizedConfigurationItemChangeNotification</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Source_SourceIdentifier">
            <summary>
            <para>
            <para>For Config Managed rules, a predefined identifier from a list. For example, <code>IAM_PASSWORD_POLICY</code>
            is a managed rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List
            of Config Managed Rules</a>.</para><para>For Config Custom Lambda rules, the identifier is the Amazon Resource Name (ARN) of
            the rule's Lambda function, such as <code>arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name</code>.</para><para>For Config Custom Policy rules, this field will be ignored.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Scope_TagKey">
            <summary>
            <para>
            <para>The tag key that is applied to only those Amazon Web Services resources that you want
            to trigger an evaluation for the rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Tag">
            <summary>
            <para>
            <para>An array of tag object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Scope_TagValue">
            <summary>
            <para>
            <para>The tag value applied to only those Amazon Web Services resources that you want to
            trigger an evaluation for the rule. If you specify a value for <code>TagValue</code>,
            you must also specify a value for <code>TagKey</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutConfigRuleResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRule_ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRule_ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet">
            <summary>
            Creates and updates the configuration aggregator with the selected source accounts
            and regions. The source account can be individual account(s) or an organization.
            
             
            <para><code>accountIds</code> that are passed will be replaced with existing accounts.
            If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code>
            to get the previous accounts and then append new ones.
            </para><note><para>
            Config should be enabled in source accounts and regions you want to aggregate.
            </para><para>
            If your source type is an organization, you must be signed in to the management account
            or a registered delegated administrator and all the features must be enabled in your
            organization. If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code>
            API to enable integration between Config and Organizations. If the caller is a registered
            delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API
            to verify whether the caller is a valid delegated administrator.
            </para><para>
            To register a delegated administrator, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli">Register
            a Delegated Administrator</a> in the <i>Config developer guide</i>. 
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.AccountAggregationSource">
            <summary>
            <para>
            <para>A list of AccountAggregationSource object. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.OrganizationAggregationSource_AllAwsRegion">
            <summary>
            <para>
            <para>If true, aggregate existing Config regions and future regions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.OrganizationAggregationSource_AwsRegion">
            <summary>
            <para>
            <para>The source regions being aggregated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.ConfigurationAggregatorName">
            <summary>
            <para>
            <para>The name of the configuration aggregator.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.OrganizationAggregationSource_RoleArn">
            <summary>
            <para>
            <para>ARN of the IAM role used to retrieve Amazon Web Services Organization details associated
            with the aggregator account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.Tag">
            <summary>
            <para>
            <para>An array of tag object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConfigurationAggregator'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutConfigurationAggregatorResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutConfigurationAggregatorResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationAggregatorName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationAggregatorName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationAggregatorCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet">
            <summary>
            Creates a new configuration recorder to record the selected resource configurations.
            
             
            <para>
            You can use this action to change the role <code>roleARN</code> or the <code>recordingGroup</code>
            of an existing recorder. To change the role, call the action on the existing configuration
            recorder and specify a role.
            </para><note><para>
            Currently, you can specify only one configuration recorder per region in your account.
            </para><para>
            If <code>ConfigurationRecorder</code> does not have the <b>recordingGroup</b> parameter
            specified, the default is to record all supported resource types.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.RecordingGroup_AllSupported">
            <summary>
            <para>
            <para>Specifies whether Config records configuration changes for every supported type of
            regional resource.</para><para>If you set this option to <code>true</code>, when Config adds support for a new type
            of regional resource, it starts recording resources of that type automatically.</para><para>If you set this option to <code>true</code>, you cannot enumerate a list of <code>resourceTypes</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.RecordingGroup_IncludeGlobalResourceType">
            <summary>
            <para>
            <para>Specifies whether Config includes all supported types of global resources (for example,
            IAM resources) with the resources that it records.</para><para>Before you can set this option to <code>true</code>, you must set the <code>allSupported</code>
            option to <code>true</code>.</para><para>If you set this option to <code>true</code>, when Config adds support for a new type
            of global resource, it starts recording resources of that type automatically.</para><para>The configuration details for any global resource are the same in all regions. To
            prevent duplicate configuration items, you should consider customizing Config in only
            one region to record global resources.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.ConfigurationRecorderName">
            <summary>
            <para>
            <para>The name of the recorder. By default, Config automatically assigns the name "default"
            when creating the configuration recorder. You cannot change the assigned name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.RecordingGroup_ResourceType">
            <summary>
            <para>
            <para>A comma-separated list that specifies the types of Amazon Web Services resources for
            which Config records configuration changes (for example, <code>AWS::EC2::Instance</code>
            or <code>AWS::CloudTrail::Trail</code>).</para><para>To record all configuration changes, you must set the <code>allSupported</code> option
            to <code>true</code>.</para><para>If you set this option to <code>false</code>, when Config adds support for a new type
            of resource, it will not record resources of that type unless you manually add that
            type to your recording group.</para><para>For a list of valid <code>resourceTypes</code> values, see the <b>resourceType Value</b>
            column in <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported
            Amazon Web Services resource Types</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.ConfigurationRecorder_RoleARN">
            <summary>
            <para>
            <para>Amazon Resource Name (ARN) of the IAM role used to describe the Amazon Web Services
            resources associated with the account.</para><note><para>While the API model does not require this field, the server will reject a request
            without a defined roleARN for the configuration recorder.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutConfigurationRecorderResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigurationRecorderName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigurationRecorderName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConfigurationRecorderCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet">
            <summary>
            Creates or updates a conformance pack. A conformance pack is a collection of Config
            rules that can be easily deployed in an account and a region and across an organization.
            For information on how many conformance packs you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"><b>Service Limits</b></a> in the Config Developer Guide.
            
             
            <para>
            This API creates a service-linked role <code>AWSServiceRoleForConfigConforms</code>
            in your account. The service-linked role is created only when the role does not exist
            in your account. 
            </para><note><para>
            You must specify only one of the follow parameters: <code>TemplateS3Uri</code>, <code>TemplateBody</code>
            or <code>TemplateSSMDocumentDetails</code>.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.ConformancePackInputParameter">
            <summary>
            <para>
            <para>A list of <code>ConformancePackInputParameter</code> objects.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.ConformancePackName">
            <summary>
            <para>
            <para>The unique name of the conformance pack you want to deploy.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.DeliveryS3Bucket">
            <summary>
            <para>
            <para>The name of the Amazon S3 bucket where Config stores conformance pack templates.</para><note><para>This field is optional.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.DeliveryS3KeyPrefix">
            <summary>
            <para>
            <para>The prefix for the Amazon S3 bucket. </para><note><para>This field is optional.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.TemplateSSMDocumentDetails_DocumentName">
            <summary>
            <para>
            <para>The name or Amazon Resource Name (ARN) of the SSM document to use to create a conformance
            pack. If you use the document name, Config checks only your account and Amazon Web
            Services Region for the SSM document. If you want to use an SSM document from another
            Region or account, you must provide the ARN.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.TemplateSSMDocumentDetails_DocumentVersion">
            <summary>
            <para>
            <para>The version of the SSM document to use to create a conformance pack. By default, Config
            uses the latest version.</para><note><para>This field is optional.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.TemplateBody">
            <summary>
            <para>
            <para>A string containing the full conformance pack template body. The structure containing
            the template body has a minimum length of 1 byte and a maximum length of 51,200 bytes.</para><note><para>You can use a YAML template with two resource types: Config rule (<code>AWS::Config::ConfigRule</code>)
            and remediation action (<code>AWS::Config::RemediationConfiguration</code>).</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.TemplateS3Uri">
            <summary>
            <para>
            <para>The location of the file containing the template body (<code>s3://bucketname/prefix</code>).
            The uri must point to a conformance pack template (max size: 300 KB) that is located
            in an Amazon S3 bucket in the same Region as the conformance pack. </para><note><para>You must have access to read Amazon S3 bucket.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ConformancePackArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutConformancePackResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutConformancePackResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGConformancePackCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet">
            <summary>
            Creates a delivery channel object to deliver configuration information to an Amazon
            S3 bucket and Amazon SNS topic.
            
             
            <para>
            Before you can create a delivery channel, you must create a configuration recorder.
            </para><para>
            You can use this action to change the Amazon S3 bucket or an Amazon SNS topic of the
            existing delivery channel. To change the Amazon S3 bucket or an Amazon SNS topic,
            call this action and specify the changed values for the S3 bucket and the SNS topic.
            If you specify a different value for either the S3 bucket or the SNS topic, this action
            will keep the existing value for the parameter that is not changed.
            </para><note><para>
            You can have only one delivery channel per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.ConfigSnapshotDeliveryProperties_DeliveryFrequency">
            <summary>
            <para>
            <para>The frequency with which Config delivers configuration snapshots.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.DeliveryChannelName">
            <summary>
            <para>
            <para>The name of the delivery channel. By default, Config assigns the name "default" when
            creating the delivery channel. To change the delivery channel name, you must use the
            DeleteDeliveryChannel action to delete your current delivery channel, and then you
            must use the PutDeliveryChannel command to create a delivery channel that has the
            desired name.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.DeliveryChannel_S3BucketName">
            <summary>
            <para>
            <para>The name of the Amazon S3 bucket to which Config delivers configuration snapshots
            and configuration history files.</para><para>If you specify a bucket that belongs to another Amazon Web Services account, that
            bucket must have policies that grant access permissions to Config. For more information,
            see <a href="https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy.html">Permissions
            for the Amazon S3 Bucket</a> in the <i>Config Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.DeliveryChannel_S3KeyPrefix">
            <summary>
            <para>
            <para>The prefix for the specified Amazon S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.DeliveryChannel_S3KmsKeyArn">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the Key Management Service (KMS ) KMS key (KMS key)
            used to encrypt objects delivered by Config. Must belong to the same Region as the
            destination S3 bucket.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.DeliveryChannel_SnsTopicARN">
            <summary>
            <para>
            <para>The Amazon Resource Name (ARN) of the Amazon SNS topic to which Config sends notifications
            about configuration changes.</para><para>If you choose a topic from another account, the topic must have policies that grant
            access permissions to Config. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/sns-topic-policy.html">Permissions
            for the Amazon SNS Topic</a> in the <i>Config Developer Guide</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutDeliveryChannelResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the DeliveryChannelName parameter.
            The -PassThru parameter is deprecated, use -Select '^DeliveryChannelName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGDeliveryChannelCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet">
            <summary>
            Used by an Lambda function to deliver evaluation results to Config. This action is
            required in every Lambda function that is invoked by an Config rule.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.Evaluation">
            <summary>
            <para>
            <para>The assessments that the Lambda function performs. Each evaluation identifies an Amazon
            Web Services resource and indicates whether it complies with the Config rule that
            invokes the Lambda function.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.ResultToken">
            <summary>
            <para>
            <para>An encrypted token that associates an evaluation with an Config rule. Identifies the
            rule and the event that triggered the evaluation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.TestMode">
            <summary>
            <para>
            <para>Use this parameter to specify a test run for <code>PutEvaluations</code>. You can
            verify whether your Lambda function will deliver evaluation results to Config. No
            updates occur to your existing evaluations, and evaluation results are not sent to
            Config.</para><note><para>When <code>TestMode</code> is <code>true</code>, <code>PutEvaluations</code> doesn't
            require a valid value for the <code>ResultToken</code> parameter, but the value cannot
            be null.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedEvaluations'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutEvaluationsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutEvaluationsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Evaluation parameter.
            The -PassThru parameter is deprecated, use -Select '^Evaluation' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGEvaluationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet">
            <summary>
            Add or updates the evaluations for process checks. This API checks if the rule is
            a process check when the name of the Config rule is provided.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ExternalEvaluation_Annotation">
            <summary>
            <para>
            <para>Supplementary information about the reason of compliance. For example, this task was
            completed on a specific date.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ExternalEvaluation_ComplianceResourceId">
            <summary>
            <para>
            <para>The evaluated compliance resource ID. Config accepts only Amazon Web Services account
            ID.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ExternalEvaluation_ComplianceResourceType">
            <summary>
            <para>
            <para>The evaluated compliance resource type. Config accepts <code>AWS::::Account</code>
            resource type.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ExternalEvaluation_ComplianceType">
            <summary>
            <para>
            <para>The compliance of the Amazon Web Services resource. The valid values are <code>COMPLIANT,
            NON_COMPLIANT, </code> and <code>NOT_APPLICABLE</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.ExternalEvaluation_OrderingTimestamp">
            <summary>
            <para>
            <para>The time when the compliance was recorded. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutExternalEvaluationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGExternalEvaluationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet">
            <summary>
            Adds or updates an Config rule for your entire organization to evaluate if your Amazon
            Web Services resources comply with your desired configurations. For information on
            how many organization Config rules you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"><b>Service Limits</b></a> in the <i>Config Developer Guide</i>.
            
             
            <para>
             Only a management account and a delegated administrator can create or update an organization
            Config rule. When calling this API with a delegated administrator, you must ensure
            Organizations <code>ListDelegatedAdministrator</code> permissions are added. An organization
            can have up to 3 delegated administrators.
            </para><para>
            This API enables organization service access through the <code>EnableAWSServiceAccess</code>
            action and creates a service-linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code>
            in the management or delegated administrator account of your organization. The service-linked
            role is created only when the role does not exist in the caller account. Config verifies
            the existence of role with <code>GetRole</code> action.
            </para><para>
            To use this API with delegated administrator, register a delegated administrator by
            calling Amazon Web Services Organization <code>register-delegated-administrator</code>
            for <code>config-multiaccountsetup.amazonaws.com</code>. 
            </para><para>
            There are two types of rules: Config Custom Rules and Config Managed Rules. You can
            use <code>PutOrganizationConfigRule</code> to create both Config custom rules and
            Config managed rules.
            </para><para>
            Custom rules are rules that you can create using either Guard or Lambda functions.
            Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard
            GitHub Repository</a>) is a policy-as-code language that allows you to write policies
            that are enforced by Config Custom Policy rules. Lambda uses custom code that you
            upload to evaluate a custom rule. If you are adding a new Custom Lambda rule, you
            first need to create an Lambda function in the management account or a delegated administrator
            that the rule invokes to evaluate your resources. You also need to create an IAM role
            in the managed account that can be assumed by the Lambda function. When you use <code>PutOrganizationConfigRule</code>
            to add a Custom Lambda rule to Config, you must specify the Amazon Resource Name (ARN)
            that Lambda assigns to the function.
            </para><para>
            Managed rules are predefined, customizable rules created by Config. For a list of
            managed rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List
            of Config Managed Rules</a>. If you are adding an Config managed rule, you must specify
            the rule's identifier for the <code>RuleIdentifier</code> key.
            </para><note><para>
            Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features
            in an organization.
            </para><para>
            Make sure to specify one of either <code>OrganizationCustomPolicyRuleMetadata</code>
            for Custom Policy rules, <code>OrganizationCustomRuleMetadata</code> for Custom Lambda
            rules, or <code>OrganizationManagedRuleMetadata</code> for managed rules.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_DebugLogDeliveryAccount">
            <summary>
            <para>
            <para>A list of accounts that you can enable debug logging for your organization Config
            Custom Policy rule. List is null when debug logging is enabled for all accounts.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_Description">
            <summary>
            <para>
            <para>The description that you provide for your organization Config Custom Policy rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_Description">
            <summary>
            <para>
            <para>The description that you provide for your organization Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_Description">
            <summary>
            <para>
            <para>The description that you provide for your organization Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.ExcludedAccount">
            <summary>
            <para>
            <para>A comma-separated list of accounts that you want to exclude from an organization Config
            rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_InputParameter">
            <summary>
            <para>
            <para>A string, in JSON format, that is passed to your organization Config Custom Policy
            rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_InputParameter">
            <summary>
            <para>
            <para>A string, in JSON format, that is passed to your organization Config rule Lambda function.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_InputParameter">
            <summary>
            <para>
            <para>A string, in JSON format, that is passed to your organization Config rule Lambda function.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_LambdaFunctionArn">
            <summary>
            <para>
            <para>The lambda function ARN.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_MaximumExecutionFrequency">
            <summary>
            <para>
            <para>The maximum frequency with which Config runs evaluations for a rule. Your Config Custom
            Policy rule is triggered when Config delivers the configuration snapshot. For more
            information, see <a>ConfigSnapshotDeliveryProperties</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_MaximumExecutionFrequency">
            <summary>
            <para>
            <para>The maximum frequency with which Config runs evaluations for a rule. Your custom rule
            is triggered when Config delivers the configuration snapshot. For more information,
            see <a>ConfigSnapshotDeliveryProperties</a>.</para><note><para>By default, rules with a periodic trigger are evaluated every 24 hours. To change
            the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code>
            parameter.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_MaximumExecutionFrequency">
            <summary>
            <para>
            <para>The maximum frequency with which Config runs evaluations for a rule. This is for an
            Config managed rule that is triggered at a periodic frequency.</para><note><para>By default, rules with a periodic trigger are evaluated every 24 hours. To change
            the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code>
            parameter.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationConfigRuleName">
            <summary>
            <para>
            <para>The name that you assign to an organization Config rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_OrganizationConfigRuleTriggerType">
            <summary>
            <para>
            <para>The type of notification that initiates Config to run an evaluation for a rule. For
            Config Custom Policy rules, Config supports change-initiated notification types:</para><ul><li><para><code>ConfigurationItemChangeNotification</code> - Initiates an evaluation when Config
            delivers a configuration item as a result of a resource change.</para></li><li><para><code>OversizedConfigurationItemChangeNotification</code> - Initiates an evaluation
            when Config delivers an oversized configuration item. Config may generate this notification
            type when a resource changes and the notification exceeds the maximum size allowed
            by Amazon SNS.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_OrganizationConfigRuleTriggerType">
            <summary>
            <para>
            <para>The type of notification that triggers Config to run an evaluation for a rule. You
            can specify the following notification types:</para><ul><li><para><code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when Config
            delivers a configuration item as a result of a resource change.</para></li><li><para><code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation
            when Config delivers an oversized configuration item. Config may generate this notification
            type when a resource changes and the notification exceeds the maximum size allowed
            by Amazon SNS.</para></li><li><para><code>ScheduledNotification</code> - Triggers a periodic evaluation at the frequency
            specified for <code>MaximumExecutionFrequency</code>.</para></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_PolicyRuntime">
            <summary>
            <para>
            <para>The runtime system for your organization Config Custom Policy rules. Guard is a policy-as-code
            language that allows you to write policies that are enforced by Config Custom Policy
            rules. For more information about Guard, see the <a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard
            GitHub Repository</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_PolicyText">
            <summary>
            <para>
            <para>The policy definition containing the logic for your organization Config Custom Policy
            rule.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_ResourceIdScope">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_ResourceIdScope">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_ResourceIdScope">
            <summary>
            <para>
            <para>The ID of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_ResourceTypesScope">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_ResourceTypesScope">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_ResourceTypesScope">
            <summary>
            <para>
            <para>The type of the Amazon Web Services resource that was evaluated.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_RuleIdentifier">
            <summary>
            <para>
            <para>For organization config managed rules, a predefined identifier from a list. For example,
            <code>IAM_PASSWORD_POLICY</code> is a managed rule. To reference a managed rule, see
            <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using
            Config managed rules</a>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_TagKeyScope">
            <summary>
            <para>
            <para>One part of a key-value pair that make up a tag. A key is a general label that acts
            like a category for more specific tag values.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_TagKeyScope">
            <summary>
            <para>
            <para>One part of a key-value pair that make up a tag. A key is a general label that acts
            like a category for more specific tag values. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_TagKeyScope">
            <summary>
            <para>
            <para>One part of a key-value pair that make up a tag. A key is a general label that acts
            like a category for more specific tag values. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomPolicyRuleMetadata_TagValueScope">
            <summary>
            <para>
            <para>The optional part of a key-value pair that make up a tag. A value acts as a descriptor
            within a tag category (key).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationCustomRuleMetadata_TagValueScope">
            <summary>
            <para>
            <para>The optional part of a key-value pair that make up a tag. A value acts as a descriptor
            within a tag category (key). </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.OrganizationManagedRuleMetadata_TagValueScope">
            <summary>
            <para>
            <para>The optional part of a key-value pair that make up a tag. A value acts as a descriptor
            within a tag category (key).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConfigRuleArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutOrganizationConfigRuleResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutOrganizationConfigRuleResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConfigRuleCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet">
            <summary>
            Deploys conformance packs across member accounts in an Amazon Web Services Organization.
            For information on how many organization conformance packs and how many Config rules
            you can have per account, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"><b>Service Limits</b></a> in the Config Developer Guide.
            
             
            <para>
            Only a management account and a delegated administrator can call this API. When calling
            this API with a delegated administrator, you must ensure Organizations <code>ListDelegatedAdministrator</code>
            permissions are added. An organization can have up to 3 delegated administrators.
            </para><para>
            This API enables organization service access for <code>config-multiaccountsetup.amazonaws.com</code>
            through the <code>EnableAWSServiceAccess</code> action and creates a service-linked
            role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the management or delegated
            administrator account of your organization. The service-linked role is created only
            when the role does not exist in the caller account. To use this API with delegated
            administrator, register a delegated administrator by calling Amazon Web Services Organization
            <code>register-delegate-admin</code> for <code>config-multiaccountsetup.amazonaws.com</code>.
            </para><note><para>
            Prerequisite: Ensure you call <code>EnableAllFeatures</code> API to enable all features
            in an organization.
            </para><para>
            You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code>
            parameter, but not both. If you provide both Config uses the <code>TemplateS3Uri</code>
            parameter and ignores the <code>TemplateBody</code> parameter.
            </para><para>
            Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS
            until the conformance pack is created or updated. You cannot update a conformance
            pack while it is in this state.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.ConformancePackInputParameter">
            <summary>
            <para>
            <para>A list of <code>ConformancePackInputParameter</code> objects.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.DeliveryS3Bucket">
            <summary>
            <para>
            <para>The name of the Amazon S3 bucket where Config stores conformance pack templates.</para><note><para>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.DeliveryS3KeyPrefix">
            <summary>
            <para>
            <para>The prefix for the Amazon S3 bucket.</para><note><para>This field is optional.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.ExcludedAccount">
            <summary>
            <para>
            <para>A list of Amazon Web Services accounts to be excluded from an organization conformance
            pack while deploying a conformance pack.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.OrganizationConformancePackName">
            <summary>
            <para>
            <para>Name of the organization conformance pack you want to create.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.TemplateBody">
            <summary>
            <para>
            <para>A string containing full conformance pack template body. Structure containing the
            template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.TemplateS3Uri">
            <summary>
            <para>
            <para>Location of file containing the template body. The uri must point to the conformance
            pack template (max size: 300 KB).</para><note><para>You must have access to read Amazon S3 bucket.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'OrganizationConformancePackArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutOrganizationConformancePackResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutOrganizationConformancePackResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the OrganizationConformancePackName parameter.
            The -PassThru parameter is deprecated, use -Select '^OrganizationConformancePackName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGOrganizationConformancePackCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationConfigurationCmdlet">
            <summary>
            Adds or updates the remediation configuration with a specific Config rule with the
            selected target or action. The API creates the <code>RemediationConfiguration</code>
            object for the Config rule. The Config rule must already exist for you to add a remediation
            configuration. The target (SSM document) must exist and have permissions to use the
            target. 
            
             <note><para>
            If you make backward incompatible changes to the SSM document, you must call this
            again to ensure the remediations can run.
            </para><para>
            This API does not support adding remediation configurations for service-linked Config
            Rules such as Organization Config rules, the rules deployed by conformance packs,
            and rules deployed by Amazon Web Services Security Hub.
            </para></note><note><para>
            For manual remediation configuration, you need to provide a value for <code>automationAssumeRole</code>
            or use a value in the <code>assumeRole</code>field to remediate your resources. The
            SSM automation document can use either as long as it maps to a valid parameter.
            </para><para>
            However, for automatic remediation configuration, the only valid <code>assumeRole</code>
            field value is <code>AutomationAssumeRole</code> and you need to provide a value for
            <code>AutomationAssumeRole</code> to remediate your resources.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationConfigurationCmdlet.RemediationConfiguration">
            <summary>
            <para>
            <para>A list of remediation configuration objects.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedBatches'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutRemediationConfigurationsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutRemediationConfigurationsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationConfigurationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RemediationConfiguration parameter.
            The -PassThru parameter is deprecated, use -Select '^RemediationConfiguration' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationConfigurationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet">
            <summary>
            A remediation exception is when a specific resource is no longer considered for auto-remediation.
            This API adds a new exception or updates an existing exception for a specific resource
            with a specific Config rule. 
            
             <note><para>
            Config generates a remediation exception when a problem occurs executing a remediation
            action to a specific resource. Remediation exceptions blocks auto-remediation until
            the exception is cleared.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.ConfigRuleName">
            <summary>
            <para>
            <para>The name of the Config rule for which you want to create remediation exception.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.ExpirationTime">
            <summary>
            <para>
            <para>The exception is automatically deleted after the expiration date.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.Message">
            <summary>
            <para>
            <para>The message contains an explanation of the exception.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.ResourceKey">
            <summary>
            <para>
            <para>An exception list of resource exception keys to be processed with the current request.
            Config adds exception for each resource key. For example, Config adds 3 exceptions
            for 3 resource keys. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedBatches'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutRemediationExceptionsResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutRemediationExceptionsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ConfigRuleName parameter.
            The -PassThru parameter is deprecated, use -Select '^ConfigRuleName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRemediationExceptionCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet">
            <summary>
            Records the configuration state for the resource provided in the request. The configuration
            state of a resource is represented in Config as Configuration Items. Once this API
            records the configuration item, you can retrieve the list of configuration items for
            the custom resource type using existing Config APIs. 
            
             <note><para>
            The custom resource type must be registered with CloudFormation. This API accepts
            the configuration item registered with CloudFormation.
            </para><para>
            When you call this API, Config only stores configuration state of the resource provided
            in the request. This API does not change or remediate the configuration of the resource.
            
            </para><para>
            Write-only schema properites are not recorded as part of the published configuration
            item.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.Configuration">
            <summary>
            <para>
            <para>The configuration object of the resource in valid JSON format. It must match the schema
            registered with CloudFormation.</para><note><para>The configuration JSON must not exceed 64 KB.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.ResourceId">
            <summary>
            <para>
            <para>Unique identifier of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.ResourceName">
            <summary>
            <para>
            <para>Name of the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.ResourceType">
            <summary>
            <para>
            <para>The type of the resource. The custom resource type must be registered with CloudFormation.
            </para><note><para>You cannot use the organization names “amzn”, “amazon”, “alexa”, “custom” with custom
            resource types. It is the first part of the ResourceType up to the first ::.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.SchemaVersionId">
            <summary>
            <para>
            <para>Version of the schema registered for the ResourceType in CloudFormation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.Tag">
            <summary>
            <para>
            <para>Tags associated with the resource.</para><note><para>This field is not to be confused with the Amazon Web Services-wide tag feature for
            Amazon Web Services resources. Tags for <code>PutResourceConfig</code> are tags that
            you supply for the configuration items of your custom resources.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutResourceConfigResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceId parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGResourceConfigCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRetentionConfigurationCmdlet">
            <summary>
            Creates and updates the retention configuration with details about retention period
            (number of days) that Config stores your historical information. The API creates the
            <code>RetentionConfiguration</code> object and names the object as <b>default</b>.
            When you have a <code>RetentionConfiguration</code> object named <b>default</b>, calling
            the API modifies the default object. 
            
             <note><para>
            Currently, Config supports only one retention configuration per region in your account.
            </para></note>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRetentionConfigurationCmdlet.RetentionPeriodInDay">
            <summary>
            <para>
            <para>Number of days Config stores your historical information.</para><note><para>Currently, only applicable to the configuration item history.</para></note>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRetentionConfigurationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'RetentionConfiguration'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutRetentionConfigurationResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutRetentionConfigurationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRetentionConfigurationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the RetentionPeriodInDay parameter.
            The -PassThru parameter is deprecated, use -Select '^RetentionPeriodInDay' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGRetentionConfigurationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet">
            <summary>
            Saves a new query or updates an existing saved query. The <code>QueryName</code> must
            be unique for a single Amazon Web Services account and a single Amazon Web Services
            Region. You can create upto 300 queries in a single Amazon Web Services account and
            a single Amazon Web Services Region.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.StoredQuery_Description">
            <summary>
            <para>
            <para>A unique description for the query.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.StoredQuery_Expression">
            <summary>
            <para>
            <para>The expression of the query. For example, <code>SELECT resourceId, resourceType, supplementaryConfiguration.BucketVersioningConfiguration.status
            WHERE resourceType = 'AWS::S3::Bucket' AND supplementaryConfiguration.BucketVersioningConfiguration.status
            = 'Off'.</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.StoredQuery_QueryArn">
            <summary>
            <para>
            <para>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.StoredQuery_QueryId">
            <summary>
            <para>
            <para>The ID of the query.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.StoredQuery_QueryName">
            <summary>
            <para>
            <para>The name of the query.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.Tag">
            <summary>
            <para>
            <para>A list of <code>Tags</code> object.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'QueryArn'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ConfigService.Model.PutStoredQueryResponse).
            Specifying the name of a property of type Amazon.ConfigService.Model.PutStoredQueryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the StoredQuery_QueryName parameter.
            The -PassThru parameter is deprecated, use -Select '^StoredQuery_QueryName' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.CFG.WriteCFGStoredQueryCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
