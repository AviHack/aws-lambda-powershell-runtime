<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.Honeycode</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet">
            <summary>
            The TagResource API allows you to add tags to an ARN-able resource. Resource includes
            workbook, table, screen and screen-automation.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The resource's Amazon Resource Name (ARN).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>A list of tags to apply to the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.TagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.AddHCResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCResourceTagCmdlet">
            <summary>
            The ListTagsForResource API allows you to return a resource's tags.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The resource's Amazon Resource Name (ARN).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'Tags'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.ListTagsForResourceResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.ListTagsForResourceResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet">
            <summary>
            The GetScreenData API allows retrieval of data from a screen in a Honeycode app.
            The API allows setting local variables in the screen to filter, sort or otherwise
            affect what will be displayed on the screen.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.AppId">
            <summary>
            <para>
            <para>The ID of the app that contains the screen.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.ScreenId">
            <summary>
            <para>
            <para>The ID of the screen.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.Variable">
            <summary>
            <para>
            <para> Variables are optional and are needed only if the screen requires them to render
            correctly. Variables are specified as a map where the key is the name of the variable
            as defined on the screen. The value is an object which currently has only one property,
            rawValue, which holds the value of the variable to be passed to the screen. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook that contains the screen.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.MaxResult">
            <summary>
            <para>
            <para> The number of results to be returned on a single page. Specify a number between 1
            and 100. The maximum value is 100. </para><para> This parameter is optional. If you don't specify this parameter, the default page
            size is 100. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.NextToken">
            <summary>
            <para>
            <para> This parameter is optional. If a nextToken is not specified, the API returns the
            first page of data. </para><para> Pagination tokens expire after 1 hour. If you use a token that was returned more
            than an hour back, the API will throw ValidationException. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.GetScreenDataResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.GetScreenDataResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCScreenDataCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ScreenId parameter.
            The -PassThru parameter is deprecated, use -Select '^ScreenId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCTableColumnListCmdlet">
            <summary>
            The ListTableColumns API allows you to retrieve a list of all the columns in a table
            in a workbook.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableColumnListCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table whose columns are being retrieved.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableColumnListCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook that contains the table whose columns are being retrieved.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableColumnListCmdlet.NextToken">
            <summary>
            <para>
            <para> This parameter is optional. If a nextToken is not specified, the API returns the
            first page of data. </para><para> Pagination tokens expire after 1 hour. If you use a token that was returned more
            than an hour back, the API will throw ValidationException. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableColumnListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.ListTableColumnsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.ListTableColumnsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCTableDataImportJobCmdlet">
            <summary>
            The DescribeTableDataImportJob API allows you to retrieve the status and details
            of a table data import job.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableDataImportJobCmdlet.JobId">
            <summary>
            <para>
            <para>The ID of the job that was returned by the StartTableDataImportJob request.</para><para> If a job with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableDataImportJobCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table into which data was imported.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableDataImportJobCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook into which data was imported.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableDataImportJobCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.DescribeTableDataImportJobResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.DescribeTableDataImportJobResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet">
            <summary>
            The ListTables API allows you to retrieve a list of all the tables in a workbook.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook whose tables are being retrieved.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of tables to return in each page of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet.NextToken">
            <summary>
            <para>
            <para> This parameter is optional. If a nextToken is not specified, the API returns the
            first page of data. </para><para> Pagination tokens expire after 1 hour. If you use a token that was returned more
            than an hour back, the API will throw ValidationException. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.ListTablesResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.ListTablesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableListCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the WorkbookId parameter.
            The -PassThru parameter is deprecated, use -Select '^WorkbookId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet">
            <summary>
            The ListTableRows API allows you to retrieve a list of all the rows in a table in
            a workbook.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.RowId">
            <summary>
            <para>
            <para> This parameter is optional. If one or more row ids are specified in this list, then
            only the specified row ids are returned in the result. If no row ids are specified
            here, then all the rows in the table are returned. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table whose rows are being retrieved.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook that contains the table whose rows are being retrieved.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of rows to return in each page of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.NextToken">
            <summary>
            <para>
            <para> This parameter is optional. If a nextToken is not specified, the API returns the
            first page of data. </para><para> Pagination tokens expire after 1 hour. If you use a token that was returned more
            than an hour back, the API will throw ValidationException. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.GetHCTableRowListCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.ListTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.ListTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet">
            <summary>
            The QueryTableRows API allows you to use a filter formula to query for specific rows
            in a table.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.FilterFormula_ContextRowId">
            <summary>
            <para>
            <para> The optional contextRowId attribute can be used to specify the row id of the context
            row if the filter formula contains unqualified references to table columns and needs
            a context row to evaluate them successfully. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.FilterFormula_Formula">
            <summary>
            <para>
            <para> A formula representing a filter function that returns zero or more matching rows
            from a table. Valid formulas in this field return a list of rows from a table. The
            most common ways of writing a formula to return a list of rows are to use the FindRow()
            or Filter() functions. Any other formula that returns zero or more rows is also acceptable.
            For example, you can use a formula that points to a cell that contains a filter function.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table whose rows are being queried.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook whose table rows are being queried.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.MaxResult">
            <summary>
            <para>
            <para>The maximum number of rows to return in each page of the results.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.NextToken">
            <summary>
            <para>
            <para> This parameter is optional. If a nextToken is not specified, the API returns the
            first page of data. </para><para> Pagination tokens expire after 1 hour. If you use a token that was returned more
            than an hour back, the API will throw ValidationException. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCQueryTableRowCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.QueryTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.QueryTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet">
            <summary>
            The InvokeScreenAutomation API allows invoking an action defined in a screen in a
            Honeycode app. The API allows setting local variables, which can then be used in the
            automation being invoked. This allows automating the Honeycode app interactions to
            write, update or delete data in the workbook.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.AppId">
            <summary>
            <para>
            <para>The ID of the app that contains the screen automation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the automation action. Request tokens help to identify
            duplicate requests. If a call times out or fails due to a transient error like a failed
            network connection, you can retry the call with the same request token. The service
            ensures that if the first call using that request token is successfully performed,
            the second call will return the response of the previous call rather than performing
            the action again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.RowId">
            <summary>
            <para>
            <para> The row ID for the automation if the automation is defined inside a block with source
            or list. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.ScreenAutomationId">
            <summary>
            <para>
            <para>The ID of the automation action to be performed.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.ScreenId">
            <summary>
            <para>
            <para>The ID of the screen that contains the screen automation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.Variable">
            <summary>
            <para>
            <para> Variables are specified as a map where the key is the name of the variable as defined
            on the screen. The value is an object which currently has only one property, rawValue,
            which holds the value of the variable to be passed to the screen. Any variables defined
            in a screen are required to be passed in the call. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook that contains the screen automation.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'WorkbookCursor'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.InvokeScreenAutomationResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.InvokeScreenAutomationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ScreenAutomationId parameter.
            The -PassThru parameter is deprecated, use -Select '^ScreenAutomationId' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCScreenAutomationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet">
            <summary>
            The BatchUpsertTableRows API allows you to upsert one or more rows in a table. The
            upsert operation takes a filter expression as input and evaluates it to find matching
            rows on the destination table. If matching rows are found, it will update the cells
            in the matching rows to new values specified in the request. If no matching rows are
            found, a new row is added at the end of the table and the cells in that row are set
            to the new values specified in the request. 
            
             
            <para>
             You can specify the values to set in some or all of the columns in the table for
            the matching or newly appended rows. If a column is not explicitly specified for a
            particular row, then that column will not be updated for that row. To clear out the
            data in a specific cell, you need to set the value as an empty string (""). 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the update action. Request tokens help to identify
            duplicate requests. If a call times out or fails due to a transient error like a failed
            network connection, you can retry the call with the same request token. The service
            ensures that if the first call using that request token is successfully performed,
            the second call will not perform the action again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.RowsToUpsert">
            <summary>
            <para>
            <para> The list of rows to upsert in the table. Each item in this list needs to have a batch
            item id to uniquely identify the element in the request, a filter expression to find
            the rows to update for that element and the cell values to set for each column in
            the upserted rows. You need to specify at least one item in this list. </para><para> Note that if one of the filter formulas in the request fails to evaluate because
            of an error or one of the column ids in any of the rows does not exist in the table,
            then the request fails and no updates are made to the table. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table where the rows are being upserted.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook where the rows are being upserted.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.BatchUpsertTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.BatchUpsertTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.InvokeHCUpsertTableRowsBatchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet">
            <summary>
            The BatchCreateTableRows API allows you to create one or more rows at the end of
            a table in a workbook. The API allows you to specify the values to set in some or
            all of the columns in the new rows. 
            
             
            <para>
             If a column is not explicitly set in a specific row, then the column level formula
            specified in the table will be applied to the new row. If there is no column level
            formula but the last row of the table has a formula, then that formula will be copied
            down to the new row. If there is no column level formula and no formula in the last
            row of the table, then that column will be left blank for the new rows. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the batch create operation. Request tokens help
            to identify duplicate requests. If a call times out or fails due to a transient error
            like a failed network connection, you can retry the call with the same request token.
            The service ensures that if the first call using that request token is successfully
            performed, the second call will not perform the operation again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.RowsToCreate">
            <summary>
            <para>
            <para> The list of rows to create at the end of the table. Each item in this list needs
            to have a batch item id to uniquely identify the element in the request and the cells
            to create for that row. You need to specify at least one item in this list. </para><para> Note that if one of the column ids in any of the rows in the request does not exist
            in the table, then the request fails and no updates are made to the table. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table where the new rows are being added.</para><para> If a table with the specified ID could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook where the new rows are being added.</para><para> If a workbook with the specified ID could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.BatchCreateTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.BatchCreateTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.NewHCTableRowsBatchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet">
            <summary>
            The UntagResource API allows you to removes tags from an ARN-able resource. Resource
            includes workbook, table, screen and screen-automation.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet.ResourceArn">
            <summary>
            <para>
            <para>The resource's Amazon Resource Name (ARN).</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>A list of tag keys to remove from the resource.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.UntagResourceResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceArn parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceArn' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet">
            <summary>
            The BatchDeleteTableRows API allows you to delete one or more rows from a table in
            a workbook. You need to specify the ids of the rows that you want to delete from the
            table.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the delete action. Request tokens help to identify
            duplicate requests. If a call times out or fails due to a transient error like a failed
            network connection, you can retry the call with the same request token. The service
            ensures that if the first call using that request token is successfully performed,
            the second call will not perform the action again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.RowId">
            <summary>
            <para>
            <para> The list of row ids to delete from the table. You need to specify at least one row
            id in this list. </para><para> Note that if one of the row ids provided in the request does not exist in the table,
            then the request fails and no rows are deleted from the table. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table where the rows are being deleted.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook where the rows are being deleted.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.BatchDeleteTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.BatchDeleteTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.RemoveHCTableRowsBatchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet">
            <summary>
            The StartTableDataImportJob API allows you to start an import job on a table. This
            API will only return the id of the job that was started. To find out the status of
            the import request, you need to call the DescribeTableDataImportJob API.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the update action. Request tokens help to identify
            duplicate requests. If a call times out or fails due to a transient error like a failed
            network connection, you can retry the call with the same request token. The service
            ensures that if the first call using that request token is successfully performed,
            the second call will not perform the action again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DestinationOptions_ColumnMap">
            <summary>
            <para>
            <para>A map of the column id to the import properties for each column.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DelimitedTextOptions_DataCharacterEncoding">
            <summary>
            <para>
            <para>The encoding of the data in the input file.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DataFormat">
            <summary>
            <para>
            <para> The format of the data that is being imported. Currently the only option supported
            is "DELIMITED_TEXT". </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DataSourceConfig_DataSourceUrl">
            <summary>
            <para>
            <para> The URL from which source data will be downloaded for the import request. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DelimitedTextOptions_Delimiter">
            <summary>
            <para>
            <para>The delimiter to use for separating columns in a single row of the input.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DestinationTableId">
            <summary>
            <para>
            <para>The ID of the table where the rows are being imported.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DelimitedTextOptions_HasHeaderRow">
            <summary>
            <para>
            <para>Indicates whether the input file has a header row at the top containing the column
            names.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.DelimitedTextOptions_IgnoreEmptyRow">
            <summary>
            <para>
            <para>A parameter to indicate whether empty rows should be ignored or be included in the
            import.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook where the rows are being imported.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.StartTableDataImportJobResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.StartTableDataImportJobResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.StartHCTableDataImportJobCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet">
            <summary>
            The BatchUpdateTableRows API allows you to update one or more rows in a table in
            a workbook. 
            
             
            <para>
             You can specify the values to set in some or all of the columns in the table for
            the specified rows. If a column is not explicitly specified in a particular row, then
            that column will not be updated for that row. To clear out the data in a specific
            cell, you need to set the value as an empty string (""). 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.ClientRequestToken">
            <summary>
            <para>
            <para> The request token for performing the update action. Request tokens help to identify
            duplicate requests. If a call times out or fails due to a transient error like a failed
            network connection, you can retry the call with the same request token. The service
            ensures that if the first call using that request token is successfully performed,
            the second call will not perform the action again. </para><para> Note that request tokens are valid only for a few minutes. You cannot use request
            tokens to dedupe requests spanning hours or days. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.RowsToUpdate">
            <summary>
            <para>
            <para> The list of rows to update in the table. Each item in this list needs to contain
            the row id to update along with the map of column id to cell values for each column
            in that row that needs to be updated. You need to specify at least one row in this
            list, and for each row, you need to specify at least one column to update. </para><para> Note that if one of the row or column ids in the request does not exist in the table,
            then the request fails and no updates are made to the table. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.TableId">
            <summary>
            <para>
            <para>The ID of the table where the rows are being updated.</para><para> If a table with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.WorkbookId">
            <summary>
            <para>
            <para>The ID of the workbook where the rows are being updated.</para><para> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.
            </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Honeycode.Model.BatchUpdateTableRowsResponse).
            Specifying the name of a property of type Amazon.Honeycode.Model.BatchUpdateTableRowsResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.HC.UpdateHCTableRowsBatchCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
