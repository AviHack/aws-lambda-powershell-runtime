<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Tools.ResourceGroupsTaggingAPI</name>
    </assembly>
    <members>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet">
            <summary>
            Applies one or more tags to the specified resources. Note the following:
            
             <ul><li><para>
            Not all resources can have tags. For a list of services with resources that support
            tagging using this operation, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services
            that support the Resource Groups Tagging API</a>. If the resource doesn't yet support
            this operation, the resource's service might support tagging using its own API operations.
            For more information, refer to the documentation for that service.
            </para></li><li><para>
            Each resource can have up to 50 tags. For other limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html#tag-conventions">Tag
            Naming and Usage Conventions</a> in the <i>Amazon Web Services General Reference.</i></para></li><li><para>
            You can only tag resources that are located in the specified Amazon Web Services Region
            for the Amazon Web Services account.
            </para></li><li><para>
            To add tags to a resource, you need the necessary permissions for the service that
            the resource belongs to as well as permissions for adding tags. For more information,
            see the documentation for each service.
            </para></li></ul><important><para>
            Do not store personally identifiable information (PII) or other confidential or sensitive
            information in tags. We use tags to provide you with billing and administration services.
            Tags are not intended to be used for private or sensitive data.
            </para></important><para><b>Minimum permissions</b></para><para>
            In addition to the <code>tag:TagResources</code> permission required by this operation,
            you must also have the tagging permission defined by the service that created the
            resource. For example, to tag an Amazon EC2 instance using the <code>TagResources</code>
            operation, you must have both of the following permissions:
            </para><ul><li><para><code>tag:TagResource</code></para></li><li><para><code>ec2:CreateTags</code></para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.ResourceARNList">
            <summary>
            <para>
            <para>Specifies the list of ARNs of the resources that you want to apply tags to.</para><para>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information,
            see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon
            Web Services General Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Tag">
            <summary>
            <para>
            <para>Specifies a list of tags that you want to add to the specified resources. A tag consists
            of a key and a value that you define.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedResourcesMap'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.TagResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.TagResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARNList parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARNList' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.AddRGTResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet">
            <summary>
            Returns a table that shows counts of resources that are noncompliant with their tag
            policies.
            
             
            <para>
            For more information on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag
            Policies</a> in the <i>Organizations User Guide.</i></para><para>
            You can call this operation only from the organization's management account and from
            the us-east-1 Region.
            </para><para>
            This operation supports pagination, where the response can be sent in multiple pages.
            You should check the <code>PaginationToken</code> response parameter to determine
            if there are additional results available to return. Repeat the query, passing the
            <code>PaginationToken</code> response parameter value as an input to the next request
            until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code>
            indicates that there are no more results waiting to be returned.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.GroupBy">
            <summary>
            <para>
            <para>Specifies a list of attributes to group the counts of noncompliant resources by. If
            supplied, the counts are sorted by those attributes.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.RegionFilter">
            <summary>
            <para>
            <para>Specifies a list of Amazon Web Services Regions to limit the output to. If you use
            this parameter, the count of returned noncompliant resources includes only resources
            in the specified Regions.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.ResourceTypeFilter">
            <summary>
            <para>
            <para>Specifies that you want the response to include information for only resources of
            the specified types. The format of each resource type is <code>service[:resourceType]</code>.
            For example, specifying a resource type of <code>ec2</code> returns all Amazon EC2
            resources (which includes EC2 instances). Specifying a resource type of <code>ec2:instance</code>
            returns only EC2 instances.</para><para>The string for each service name and resource type is the same as that embedded in
            a resource's Amazon Resource Name (ARN). Consult the <i><a href="https://docs.aws.amazon.com/general/latest/gr/">Amazon
            Web Services General Reference</a></i> for the following:</para><ul><li><para>For a list of service name strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon
            Web Services Service Namespaces</a>.</para></li><li><para>For resource type strings, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax">Example
            ARNs</a>.</para></li><li><para>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</para></li></ul><para>You can specify multiple resource types by using a comma separated array. The array
            can include up to 100 items. Note that the length constraint requirement applies to
            each resource type filter. </para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.TagKeyFilter">
            <summary>
            <para>
            <para>Specifies that you want the response to include information for only resources that
            have tags with the specified tag keys. If you use this parameter, the count of returned
            noncompliant resources includes only resources that have the specified tag keys.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.TargetIdFilter">
            <summary>
            <para>
            <para>Specifies target identifiers (usually, specific account IDs) to limit the output by.
            If you use this parameter, the count of returned noncompliant resources includes only
            resources with the specified target IDs.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.MaxResult">
            <summary>
            <para>
            <para>Specifies the maximum number of results to be returned in each page. A query can return
            fewer than this maximum, even if there are more results still to return. You should
            always check the <code>PaginationToken</code> response value to see if there are more
            results. You can specify a minimum of 1 and a maximum value of 100.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.PaginationToken">
            <summary>
            <para>
            <para>Specifies a <code>PaginationToken</code> response value from a previous request to
            indicate that you want the next page of results. Leave this parameter empty in your
            initial request.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'SummaryList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetComplianceSummaryResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetComplianceSummaryResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTComplianceSummaryCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTReportCreationCmdlet">
            <summary>
            Describes the status of the <code>StartReportCreation</code> operation. 
            
             
            <para>
            You can call this operation only from the organization's management account and from
            the us-east-1 Region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTReportCreationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is '*'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.DescribeReportCreationResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.DescribeReportCreationResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet">
            <summary>
            Returns all the tagged or previously tagged resources that are located in the specified
            Amazon Web Services Region for the account.
            
             
            <para>
            Depending on what information you want returned, you can also specify the following:
            </para><ul><li><para><i>Filters</i> that specify what tags and resource types you want returned. The response
            includes all tags that are associated with the requested resources.
            </para></li><li><para>
            Information about compliance with the account's effective tag policy. For more information
            on tag policies, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">Tag
            Policies</a> in the <i>Organizations User Guide.</i></para></li></ul><para>
            This operation supports pagination, where the response can be sent in multiple pages.
            You should check the <code>PaginationToken</code> response parameter to determine
            if there are additional results available to return. Repeat the query, passing the
            <code>PaginationToken</code> response parameter value as an input to the next request
            until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code>
            indicates that there are no more results waiting to be returned.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ExcludeCompliantResource">
            <summary>
            <para>
            <para>Specifies whether to exclude resources that are compliant with the tag policy. Set
            this to <code>true</code> if you are interested in retrieving information on noncompliant
            resources only.</para><para>You can use this parameter only if the <code>IncludeComplianceDetails</code> parameter
            is also set to <code>true</code>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.IncludeComplianceDetail">
            <summary>
            <para>
            <para>Specifies whether to include details regarding the compliance with the effective tag
            policy. Set this to <code>true</code> to determine whether resources are compliant
            with the tag policy and to get details.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ResourceARNList">
            <summary>
            <para>
            <para>Specifies a list of ARNs of resources for which you want to retrieve tag data. You
            can't specify both this parameter and any of the pagination parameters (<code>ResourcesPerPage</code>,
            <code>TagsPerPage</code>, <code>PaginationToken</code>) in the same request. If you
            specify both, you get an <code>Invalid Parameter</code> exception.</para><para>If a resource specified by this parameter doesn't exist, it doesn't generate an error;
            it simply isn't included in the response.</para><para>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information,
            see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon
            Web Services General Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ResourcesPerPage">
            <summary>
            <para>
            <para>Specifies the maximum number of results to be returned in each page. A query can return
            fewer than this maximum, even if there are more results still to return. You should
            always check the <code>PaginationToken</code> response value to see if there are more
            results. You can specify a minimum of 1 and a maximum value of 100.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.ResourceTypeFilter">
            <summary>
            <para>
            <para>Specifies the resource types that you want included in the response. The format of
            each resource type is <code>service[:resourceType]</code>. For example, specifying
            a resource type of <code>ec2</code> returns all Amazon EC2 resources (which includes
            EC2 instances). Specifying a resource type of <code>ec2:instance</code> returns only
            EC2 instances. </para><para>The string for each service name and resource type is the same as that embedded in
            a resource's Amazon Resource Name (ARN). For the list of services whose resources
            you can use in this parameter, see <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html">Services
            that support the Resource Groups Tagging API</a>.</para><para>You can specify multiple resource types by using an array. The array can include up
            to 100 items. Note that the length constraint requirement applies to each resource
            type filter. For example, the following string would limit the response to only Amazon
            EC2 instances, Amazon S3 buckets, or any Audit Manager resource:</para><para><code>ec2:instance,s3:bucket,auditmanager</code></para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.TagFilter">
            <summary>
            <para>
            <para>Specifies a list of TagFilters (keys and values) to restrict the output to only those
            resources that have tags with the specified keys and, if included, the specified values.
            Each <code>TagFilter</code> must contain a key with values optional. A request can
            include up to 50 keys, and each key can include up to 20 values. </para><para>Note the following when deciding how to use TagFilters:</para><ul><li><para>If you <i>don't</i> specify a <code>TagFilter</code>, the response includes all resources
            that are currently tagged or ever had a tag. Resources that currently don't have tags
            are shown with an empty tag set, like this: <code>"Tags": []</code>.</para></li><li><para>If you specify more than one filter in a single request, the response returns only
            those resources that satisfy all filters.</para></li><li><para>If you specify a filter that contains more than one value for a key, the response
            returns resources that match <i>any</i> of the specified values for that key.</para></li><li><para>If you don't specify a value for a key, the response returns all resources that are
            tagged with that key, with any or no value.</para><para>For example, for the following filters: <code>filter1= {keyA,{value1}}</code>, <code>filter2={keyB,{value2,value3,value4}}</code>,
            <code>filter3= {keyC}</code>:</para><ul><li><para><code>GetResources({filter1})</code> returns resources tagged with <code>key1=value1</code></para></li><li><para><code>GetResources({filter2})</code> returns resources tagged with <code>key2=value2</code>
            or <code>key2=value3</code> or <code>key2=value4</code></para></li><li><para><code>GetResources({filter3})</code> returns resources tagged with any tag with the
            key <code>key3</code>, and with any or no value</para></li><li><para><code>GetResources({filter1,filter2,filter3})</code> returns resources tagged with
            <code>(key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any
            or no value)</code></para></li></ul></li></ul>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.TagsPerPage">
            <summary>
            <para>
            <para>Amazon Web Services recommends using <code>ResourcesPerPage</code> instead of this
            parameter.</para><para>A limit that restricts the number of tags (key and value pairs) returned by <code>GetResources</code>
            in paginated output. A resource with no tags is counted as having one tag (one key
            and value pair).</para><para><code>GetResources</code> does not split a resource and its associated tags across
            pages. If the specified <code>TagsPerPage</code> would cause such a break, a <code>PaginationToken</code>
            is returned in place of the affected resource and its tags. Use that token in another
            request to get the remaining data. For example, if you specify a <code>TagsPerPage</code>
            of <code>100</code> and the account has 22 resources with 10 tags each (meaning that
            each resource has 10 key and value pairs), the output will consist of three pages.
            The first page displays the first 10 resources, each with its 10 tags. The second
            page displays the next 10 resources, each with its 10 tags. The third page displays
            the remaining 2 resources, each with its 10 tags.</para><para>You can set <code>TagsPerPage</code> to a minimum of 100 items up to a maximum of
            500 items.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.PaginationToken">
            <summary>
            <para>
            <para>Specifies a <code>PaginationToken</code> response value from a previous request to
            indicate that you want the next page of results. Leave this parameter empty in your
            initial request.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'ResourceTagMappingList'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceTypeFilter parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceTypeFilter' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTResourceCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet">
            <summary>
            Returns all tag keys currently in use in the specified Amazon Web Services Region
            for the calling account.
            
             
            <para>
            This operation supports pagination, where the response can be sent in multiple pages.
            You should check the <code>PaginationToken</code> response parameter to determine
            if there are additional results available to return. Repeat the query, passing the
            <code>PaginationToken</code> response parameter value as an input to the next request
            until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code>
            indicates that there are no more results waiting to be returned.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.PaginationToken">
            <summary>
            <para>
            <para>Specifies a <code>PaginationToken</code> response value from a previous request to
            indicate that you want the next page of results. Leave this parameter empty in your
            initial request.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TagKeys'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetTagKeysResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetTagKeysResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagKeyCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet">
            <summary>
            Returns all tag values for the specified key that are used in the specified Amazon
            Web Services Region for the calling account.
            
             
            <para>
            This operation supports pagination, where the response can be sent in multiple pages.
            You should check the <code>PaginationToken</code> response parameter to determine
            if there are additional results available to return. Repeat the query, passing the
            <code>PaginationToken</code> response parameter value as an input to the next request
            until you recieve a <code>null</code> value. A null value for <code>PaginationToken</code>
            indicates that there are no more results waiting to be returned.
            </para><br/><br/>This cmdlet automatically pages all available results to the pipeline - parameters related to iteration are only needed if you want to manually control the paginated output. To disable autopagination, use -NoAutoIteration.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.Key">
            <summary>
            <para>
            <para>Specifies the tag key for which you want to list all existing values that are currently
            used in the specified Amazon Web Services Region for the calling account.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.PaginationToken">
            <summary>
            <para>
            <para>Specifies a <code>PaginationToken</code> response value from a previous request to
            indicate that you want the next page of results. Leave this parameter empty in your
            initial request.</para>
            </para>
            <para>
            <br/><b>Note:</b> This parameter is only used if you are manually controlling output pagination of the service API call.
            <br/>In order to manually control output pagination, use '-PaginationToken $null' for the first call and '-PaginationToken $AWSHistory.LastServiceResponse.PaginationToken' for subsequent calls.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'TagValues'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.GetTagValuesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.GetTagValuesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the Key parameter.
            The -PassThru parameter is deprecated, use -Select '^Key' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.GetRGTTagValueCmdlet.NoAutoIteration">
            <summary>
            By default the cmdlet will auto-iterate and retrieve all results to the pipeline by performing multiple
            service calls. If set, the cmdlet will retrieve only the next 'page' of results using the value of PaginationToken
            as the start point.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet">
            <summary>
            Removes the specified tags from the specified resources. When you specify a tag key,
            the action removes both that key and its associated value. The operation succeeds
            even if you attempt to remove tags from a resource that were already removed. Note
            the following:
            
             <ul><li><para>
            To remove tags from a resource, you need the necessary permissions for the service
            that the resource belongs to as well as permissions for removing tags. For more information,
            see the documentation for the service whose resource you want to untag.
            </para></li><li><para>
            You can only tag resources that are located in the specified Amazon Web Services Region
            for the calling Amazon Web Services account.
            </para></li></ul><para><b>Minimum permissions</b></para><para>
            In addition to the <code>tag:UntagResources</code> permission required by this operation,
            you must also have the remove tags permission defined by the service that created
            the resource. For example, to remove the tags from an Amazon EC2 instance using the
            <code>UntagResources</code> operation, you must have both of the following permissions:
            </para><ul><li><para><code>tag:UntagResource</code></para></li><li><para><code>ec2:DeleteTags</code></para></li></ul>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.ResourceARNList">
            <summary>
            <para>
            <para>Specifies a list of ARNs of the resources that you want to remove tags from.</para><para>An ARN (Amazon Resource Name) uniquely identifies a resource. For more information,
            see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and Amazon Web Services Service Namespaces</a> in the <i>Amazon
            Web Services General Reference</i>.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.TagKey">
            <summary>
            <para>
            <para>Specifies a list of tag keys that you want to remove from the specified resources.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The default value is 'FailedResourcesMap'.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.UntagResourcesResponse).
            Specifying the name of a property of type Amazon.ResourceGroupsTaggingAPI.Model.UntagResourcesResponse will result in that property being returned.
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the ResourceARNList parameter.
            The -PassThru parameter is deprecated, use -Select '^ResourceARNList' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.RemoveRGTResourceTagCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
        <member name="T:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet">
            <summary>
            Generates a report that lists all tagged resources in the accounts across your organization
            and tells whether each resource is compliant with the effective tag policy. Compliance
            data is refreshed daily. The report is generated asynchronously.
            
             
            <para>
            The generated report is saved to the following location:
            </para><para><code>s3://example-bucket/AwsTagPolicies/o-exampleorgid/YYYY-MM-ddTHH:mm:ssZ/report.csv</code></para><para>
            You can call this operation only from the organization's management account and from
            the us-east-1 Region.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.S3Bucket">
            <summary>
            <para>
            <para>The name of the Amazon S3 bucket where the report will be stored; for example:</para><para><code>awsexamplebucket</code></para><para>For more information on S3 bucket requirements, including an example bucket policy,
            see the example S3 bucket policy on this page.</para>
            </para>
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.Select">
            <summary>
            Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
            Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.ResourceGroupsTaggingAPI.Model.StartReportCreationResponse).
            Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.PassThru">
            <summary>
            Changes the cmdlet behavior to return the value passed to the S3Bucket parameter.
            The -PassThru parameter is deprecated, use -Select '^S3Bucket' instead. This parameter will be removed in a future version.
            </summary>
        </member>
        <member name="P:Amazon.PowerShell.Cmdlets.RGT.StartRGTReportCreationCmdlet.Force">
            <summary>
            This parameter overrides confirmation prompts to force 
            the cmdlet to continue its operation. This parameter should always
            be used with caution.
            </summary>
        </member>
    </members>
</doc>
